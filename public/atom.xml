<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tiger_pop&#39;s Blog</title>
  
  <subtitle>tiger_pop 的博客</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-01-01T14:08:55.016Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>陈宇韶chenyushao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>go笔记</title>
    <link href="http://example.com/2025/01/01/go%E5%AD%A6%E4%B9%A0/go%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2025/01/01/go%E5%AD%A6%E4%B9%A0/go%E7%AC%94%E8%AE%B0/</id>
    <published>2025-01-01T14:16:15.000Z</published>
    <updated>2025-01-01T14:08:55.016Z</updated>
    
    <content type="html"><![CDATA[<p>简介 <span id="more"></span></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>1、注意 环境变量中 GOPATH； GOROOT的配置。</p><p>2、还要 注意 是 模块模式还是 gopath模式。</p><p>3、用vscode编辑器时一定要记得在编辑器中 指定gopath的路径，不然会找不到。</p><h1 id="杂鱼笔记"><a href="#杂鱼笔记" class="headerlink" title="杂鱼笔记"></a>杂鱼笔记</h1><p>1、go 一个方法内重复定义 变量非法；</p><p>2、go 没有隐式类型转换，变量声明和赋值要一致；</p><p>3、go 声明变量 有个默认值；</p><p>4、go有类型推断；</p><p>5、 用vscode时，注意 go 代码规范是 冗余非法，一定要先在代码块中用到了 某个 库，再写 import，不然直接保存会导致 编辑器 把 冗余import 库直接当写错了删除。</p><p>6、uint8 这样的无符号 整型 范围是 2^7 + 2^7-1 &#x3D; 0<del>255 , 整数部分是 int8 -128</del>127的两倍。</p><p>7、go 用反引号 &#96;&#96; 输出带特殊符号的原始字符串.</p><p>8、go 的 string 转其它类型一定要保证 能够转，不然会按照 目标类型的默认值来 赋值；</p><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><p>0、指针概念；</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> age <span class="type">int</span> = <span class="number">18</span></span><br><span class="line">fmt.Println(&amp;age) <span class="comment">//变量内存地址</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ptr *<span class="type">int</span> = &amp;age <span class="comment">// 可以理解为 一个 指向 int类型的指针类型，里面放的是 指向 int类型 的地址；</span></span><br><span class="line">fmt.Println(<span class="string">&quot;ptr存储空间的地址为：&quot;</span>, &amp;ptr) <span class="comment">//获取指针本身的内存地址；</span></span><br><span class="line">fmt.Println(<span class="string">&quot;ptr指向的数值为：&quot;</span>, *ptr) <span class="comment">//获取指针指向的值。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、可以通过指针来改变指向值；</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> age <span class="type">int</span> = <span class="number">18</span></span><br><span class="line"><span class="keyword">var</span> ptr *<span class="type">int</span> = &amp;age</span><br><span class="line">*ptr = <span class="number">20</span></span><br><span class="line">fmt.Println(age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、指针变量接收的一定是地址值；</p><p>3、指针变量的定义一定要和实际值匹配，例如 *float 类型的指针 就不能和 &amp;num num 是一个 int8 类型的变量地址匹配；</p><h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><p>‘_’ 只能被当作忽略的标识符，不能单独当作标识符使用。</p><p>1、main包 是一个程序的入口包，main函数所在的包，建议定义为main包；</p><p>2、<strong>变量名、函数名、常量 首字母大写，则可以被其它包访问，首字母小写则只能本包中使用；</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、go 默认的模式不是 模块模式，模块模式能 跳出gopath 的影响，但是默认用gopath模式；</span></span><br><span class="line">export GO111MODULE=off </span><br><span class="line"><span class="comment">//2、gopath模式中，包都是从$GOPATH/src 路径后开始计算的，import 后面写相对路径即可；</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;goproject/demo_package/test&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(test.StuNo)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3、用vscode编辑器时一定要记得在编辑器中 指定gopath的路径，不然会找不到；</span></span><br></pre></td></tr></table></figure><p>3、go语言获取控制台输入的 时候，scanln、scanf 传入的是待修改 值的地址 如 <code>&amp;age</code>. </p><h1 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h1><p>​go 的 switch case 中 加上 fallthrough 会带来 一层的穿透。</p><p>​goto 到某个标签的 语句最好少用，因为可能导致 逻辑混乱。</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>go不支持 函数重载（同一函数 不同形参）</p><p>利用指针，实现一个函数内改变函数外的值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str <span class="type">string</span> = <span class="string">&quot;abcdefg&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟在一个函数中改变外面的值，利用指针。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fun</span><span class="params">(args ...*<span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> args &#123;</span><br><span class="line">*args[i] = <span class="number">30</span></span><br><span class="line">fmt.Print(<span class="string">&quot;fun=====&quot;</span>, *args[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> age <span class="type">int</span> = <span class="number">10</span></span><br><span class="line">fun(&amp;age)</span><br><span class="line">fmt.Print(<span class="string">&quot;main----- &quot;</span>, age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数直接当形参</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fun</span><span class="params">(num <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(num)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把函数当形参</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(num1 <span class="type">int</span>, num2 <span class="type">float32</span>, testFunc <span class="keyword">func</span>(<span class="type">int</span>)</span></span>) &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;---test&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// var age int = 10</span></span><br><span class="line"><span class="comment">// fun(&amp;age)</span></span><br><span class="line">a := fun</span><br><span class="line"><span class="comment">// fmt.Printf(&quot;main----- %T,%T\n&quot;, a, fun)</span></span><br><span class="line"><span class="comment">// a(10)</span></span><br><span class="line">test(<span class="number">1</span>, <span class="number">3.14</span>, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>go支持自定义类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> myFunc <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test01</span><span class="params">(num1 <span class="type">int</span>, num2 <span class="type">float64</span>, testFunc myFunc)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;---test01&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>go支持对函数返回值命名</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test02</span><span class="params">(num1 <span class="type">int</span>, num2 <span class="type">int</span>)</span></span> (sum <span class="type">int</span>, sub <span class="type">int</span>) &#123;</span><br><span class="line">sum = num1 + num2 <span class="comment">//sum := num1 + num2由于这两个变量已经在函数签名中声明，你不能再使用短变量声明方式对它们进行赋值。</span></span><br><span class="line">sub = num1 - num2</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// var age int = 10</span></span><br><span class="line"><span class="comment">// fun(&amp;age)</span></span><br><span class="line">a := fun</span><br><span class="line"><span class="comment">// fmt.Printf(&quot;main----- %T,%T\n&quot;, a, fun)</span></span><br><span class="line"><span class="comment">// a(10)</span></span><br><span class="line">test(<span class="number">1</span>, <span class="number">3.14</span>, a)</span><br><span class="line">test(<span class="number">10</span>, <span class="number">3.14</span>, fun)</span><br><span class="line">test01(<span class="number">10</span>, <span class="number">3.14</span>, a)</span><br><span class="line">sub, sum := test02(<span class="number">10</span>, <span class="number">6</span>)</span><br><span class="line">fmt.Println(sub, sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><p>​包是一个抽象概念，需要用 package 来声明一下。 导包，import 其实是导入 package 声明包文件所在的文件夹路径。</p><p>​导入另一个包的操作是import 从 gopath 的src 下的路径开始算的，并且只有首字母大写的方法才能被别的包访问。</p><p>​建议1\ package 进行包的声明，建议 声明的包和所在的文件夹同名；建议2\ main包是程序的入口包，一般main函数放在这个包下。</p><p>​是哪一个包 ，要看 package 声明 叫什么名字，包就是什么名字，main函数一定要放在main包下。</p><p>​<strong>一个目录下不能有重复的函数</strong></p><p>​同级别源文件的包的声明，必须一致！也就是说一个包其实对应一个文件夹。</p><p>​<img src="/2025/01/01/go%E5%AD%A6%E4%B9%A0/go%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2023-08-22%2011.06.34.jpg" alt="截屏2023-08-22 11.06.34"></p><p><img src="/2025/01/01/go%E5%AD%A6%E4%B9%A0/go%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2023-08-22%2011.12.42.jpg" alt="截屏2023-08-22 11.12.42"></p><h1 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局变量形式的匿名函数</span></span><br><span class="line"><span class="keyword">var</span> Fanc = <span class="function"><span class="keyword">func</span><span class="params">(num1 <span class="type">int</span>, num2 <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> num1 * num2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//匿名函数，定义同时调用</span></span><br><span class="line">result := <span class="function"><span class="keyword">func</span><span class="params">(num1 <span class="type">int</span>, num2 <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"><span class="comment">//匿名函数</span></span><br><span class="line">sub := <span class="function"><span class="keyword">func</span><span class="params">(num1 <span class="type">int</span>, num2 <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> num1 - num2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(result)</span><br><span class="line">fmt.Println(sub(<span class="number">20</span>, <span class="number">10</span>))</span><br><span class="line">fmt.Println(Fanc(<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 闭包 ，由返回的匿名函数和匿名函数以外的变量组成。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getSum</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">var</span> sum <span class="type">int</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(num1 <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">sum = sum + num1</span><br><span class="line"><span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f := getSum()</span><br><span class="line">fmt.Println(f(<span class="number">1</span>))</span><br><span class="line">fmt.Println(f(<span class="number">2</span>))</span><br><span class="line">fmt.Println(f(<span class="number">3</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">result := add(<span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line">fmt.Println(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(num1 <span class="type">int</span>, num2 <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="comment">// defer 后面的内容会被压入一个栈中，直到本函数运行完才会运行</span></span><br><span class="line"><span class="comment">// 由于是压入栈，先进后出。</span></span><br><span class="line"><span class="comment">// defer语句一般用于 go语言在运行某段代码后释放资源。</span></span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">&quot;num1=&quot;</span>, num1)</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">&quot;num2=&quot;</span>, num2)</span><br><span class="line">num1 += <span class="number">10</span></span><br><span class="line">num2 += <span class="number">20</span></span><br><span class="line"><span class="keyword">var</span> sum <span class="type">int</span> = num1 + num2</span><br><span class="line">fmt.Println(sum)</span><br><span class="line"><span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// utf-8 一个汉字3个字节</span></span><br><span class="line">str := <span class="string">&quot;golang你好&quot;</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(str))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历字符串</span></span><br><span class="line"><span class="keyword">for</span> i, value := <span class="keyword">range</span> str &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;索引为：%d,值为: %c\n&quot;</span>, i, value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历字符串 2</span></span><br><span class="line">r := []<span class="type">rune</span>(str)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(r); i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%c \n&quot;</span>, r[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//字符串转整数</span></span><br><span class="line">num1, _ := strconv.Atoi(<span class="string">&quot;888&quot;</span>)</span><br><span class="line">fmt.Println(num1)</span><br><span class="line"><span class="comment">//整数转字符串</span></span><br><span class="line">str1 := strconv.Itoa(<span class="number">88</span>)</span><br><span class="line">fmt.Println(str1)</span><br><span class="line"></span><br><span class="line"><span class="comment">//统计子串数量</span></span><br><span class="line">count := strings.Count(<span class="string">&quot;golangisbestonegolang&quot;</span>, <span class="string">&quot;go&quot;</span>)</span><br><span class="line">fmt.Println(count)</span><br><span class="line"><span class="comment">//找子串索引</span></span><br><span class="line">fmt.Println(strings.Index(<span class="string">&quot;golangisbestonegolang&quot;</span>, <span class="string">&quot;go&quot;</span>))</span><br><span class="line"><span class="comment">//字符串的替换</span></span><br><span class="line">str2 := strings.Replace(<span class="string">&quot;golangisbest&quot;</span>, <span class="string">&quot;golang&quot;</span>, <span class="string">&quot;python&quot;</span>, <span class="number">-1</span>)</span><br><span class="line">str3 := strings.Replace(<span class="string">&quot;golangisbest&quot;</span>, <span class="string">&quot;g&quot;</span>, <span class="string">&quot;python&quot;</span>, <span class="number">2</span>)</span><br><span class="line">fmt.Println(str2)</span><br><span class="line">fmt.Println(str3)</span><br><span class="line"><span class="comment">//切割</span></span><br><span class="line">arr := strings.Split(<span class="string">&quot;go-python-java&quot;</span>, <span class="string">&quot;-&quot;</span>)</span><br><span class="line">fmt.Println(arr)</span><br><span class="line"><span class="comment">// 大小写</span></span><br><span class="line">fmt.Println(strings.ToLower(<span class="string">&quot;ABC&quot;</span>))</span><br><span class="line">fmt.Println(strings.ToUpper(<span class="string">&quot;AbC&quot;</span>))</span><br><span class="line"><span class="comment">// 去除左右两边。</span></span><br><span class="line">fmt.Println(strings.TrimSpace(<span class="string">&quot; go and java &quot;</span>))</span><br><span class="line">fmt.Println(strings.Trim(<span class="string">&quot;~go and java~&quot;</span>, <span class="string">&quot;~&quot;</span>))</span><br><span class="line"><span class="comment">// 判断开头</span></span><br><span class="line">fmt.Println(strings.HasPrefix(<span class="string">&quot;http://baidu.com&quot;</span>, <span class="string">&quot;http&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="new"><a href="#new" class="headerlink" title="new"></a>new</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new 分配内存，new返回值时一个对应类型的指针。</span></span><br><span class="line">num := <span class="built_in">new</span>(<span class="type">int</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;num type is:%T,num value is:%v,num index is:%v,num指针指向的值是：%v&quot;</span>,</span><br><span class="line">num, num, &amp;num, *num)</span><br></pre></td></tr></table></figure><h1 id="异常捕获"><a href="#异常捕获" class="headerlink" title="异常捕获"></a>异常捕获</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">test()</span><br><span class="line">fmt.Println(<span class="string">&quot;上面执行成功&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;开始执行下面的逻辑&quot;</span>)</span><br><span class="line">err := test2()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;自定义错误：&quot;</span>, err)</span><br><span class="line"><span class="built_in">panic</span>(err) <span class="comment">//panic 输出 参数后就不再向下执行了。</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;test2上面执行成功&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;test2开始执行下面的逻辑&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 利用 defer 和 recover 来捕获异常(实际上是调用一个匿名函数)。</span></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//调用 revover 内置函数</span></span><br><span class="line">err := <span class="built_in">recover</span>()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;异常被捕获&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;err 是:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">num1 := <span class="number">10</span></span><br><span class="line">num2 := <span class="number">0</span></span><br><span class="line">result := num1 / num2</span><br><span class="line">fmt.Println(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test2</span><span class="params">()</span></span> (err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">//自定义异常</span></span><br><span class="line">num1 := <span class="number">10</span></span><br><span class="line">num2 := <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> num2 == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;除数不能为0&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">result := num1 / num2</span><br><span class="line">fmt.Println(result)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>定义好的指针，默认值都是0；</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> scores [<span class="number">3</span>]<span class="type">int</span> <span class="comment">// go 这样定义数组。</span></span><br><span class="line"><span class="comment">/* scores[0] = 95</span></span><br><span class="line"><span class="comment">   scores[1] = 99</span></span><br><span class="line"><span class="comment">   scores[2] = 94 */</span></span><br><span class="line"><span class="keyword">var</span> sum <span class="type">int</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(scores); i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;please enter %d_th score\n&quot;</span>, i+<span class="number">1</span>)</span><br><span class="line">fmt.Scanln(&amp;scores[i]) <span class="comment">// 获取输入,对对应地址的值进行修改。</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(scores); i++ &#123;</span><br><span class="line">sum += scores[i]</span><br><span class="line">&#125;</span><br><span class="line">avg := sum / <span class="built_in">len</span>(scores)</span><br><span class="line">fmt.Println(sum, avg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/01/01/go%E5%AD%A6%E4%B9%A0/go%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2023-08-25%2011.06.51.jpg" alt="截屏2023-08-25 11.06.51"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scores [<span class="number">3</span>]<span class="type">int</span> = [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>&#125;</span><br><span class="line"><span class="keyword">var</span> scores = [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">var</span> scores = [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">var</span> scores = [...]<span class="type">int</span>&#123;<span class="number">0</span>: <span class="number">99</span>, <span class="number">2</span>: <span class="number">100</span>, <span class="number">1</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><p>go 语言中的数组默认是值传递，和python等语言不一样，但是可以通过改变参数为指针，实现和python等语言一样的参数传递；</p><p><img src="/2025/01/01/go%E5%AD%A6%E4%B9%A0/go%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2023-08-25%2016.05.21.jpg" alt="截屏2023-08-25 16.05.21"></p><p><img src="/2025/01/01/go%E5%AD%A6%E4%B9%A0/go%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2023-08-25%2016.05.40.jpg" alt="截屏2023-08-25 16.05.40"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;1类型是 %T\n&quot;</span>, arr1) <span class="comment">//1类型是 [3]int</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">6</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;2类型是 %T\n&quot;</span>, arr2) <span class="comment">//2类型是 [6]int</span></span><br><span class="line">test(arr1)</span><br><span class="line">fmt.Println(arr1) <span class="comment">//可见 arr1 的一号位置的值没有被test方法改变；</span></span><br><span class="line"><span class="comment">// 注意，go和python等语言不通，数组的传递默认是值传递，</span></span><br><span class="line"><span class="comment">// 而不是地址传递(引用传递)；</span></span><br><span class="line"></span><br><span class="line">test2(&amp;arr1)</span><br><span class="line">fmt.Println(arr1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(arr [3]<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把函数的参数改为指针，实现和python等语言一样的 数组 地址传递。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test2</span><span class="params">(arr *[3]<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">(*arr)[<span class="number">0</span>] = <span class="number">200</span> <span class="comment">// 需要先对 arr指针找到它对应的值，再按照第几个值去改变。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> intarr = [<span class="number">6</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line"><span class="keyword">var</span> slice []<span class="type">int</span> = intarr[:<span class="number">3</span>]</span><br><span class="line">fmt.Println(slice)</span><br><span class="line">fmt.Println(<span class="string">&quot;容量is：&quot;</span>, <span class="built_in">cap</span>(slice))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/01/01/go%E5%AD%A6%E4%B9%A0/go%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2023-08-25%2016.24.25.jpg" alt="截屏2023-08-25 16.24.25"></p><p>注意切片并不是数组，而是一个单独的结构体；</p><p>由于 切片 存的是数组的地址，所以改变切片的值，原本数组的值也会跟着变；</p><h2 id="make"><a href="#make" class="headerlink" title="make"></a>make</h2><p>用 <strong>make</strong>  方法创建一个切片；</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// make 底层也是创建一个数组，对外不可见，不可以直接操作此数组，只能通过slice间接访问；</span></span><br><span class="line">slice := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">3</span>, <span class="number">20</span>) <span class="comment">// 切片的类型，长度，容量。</span></span><br><span class="line">fmt.Println(slice)</span><br><span class="line">fmt.Println(<span class="string">&quot;len is &quot;</span>, <span class="built_in">len</span>(slice))</span><br><span class="line">slice[<span class="number">1</span>] = <span class="number">666</span></span><br><span class="line">fmt.Println(slice)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切片注意事项</p><p>【1】切片不用直接使用，需要引用一个数组 或者make提供一个空间供切片使用；</p><p>【2】切片可以继续切片；</p><p>【3】切片可以动态增长。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> intarr [<span class="number">3</span>]<span class="type">int</span> = [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">slice := intarr[<span class="number">1</span>:]</span><br><span class="line">fmt.Println(slice)</span><br><span class="line"><span class="comment">// append 会新建一个数组，copy老数组的内容，在新数组上修改；</span></span><br><span class="line">slice2 := <span class="built_in">append</span>(slice, <span class="number">88</span>, <span class="number">99</span>, <span class="number">100</span>) <span class="comment">//追加三个元素</span></span><br><span class="line">fmt.Println(<span class="string">&quot;slice2 is :&quot;</span>, slice2)</span><br><span class="line">fmt.Println(<span class="string">&quot;slice is :&quot;</span>, slice)</span><br><span class="line"><span class="comment">//如果想要对原始数组进行修改，只能通过重新赋值；</span></span><br><span class="line">slice = <span class="built_in">append</span>(slice, <span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>)</span><br><span class="line">fmt.Println(slice)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a []<span class="type">int</span> = []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">var</span> b []<span class="type">int</span> = <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">10</span>)</span><br><span class="line"><span class="comment">//拷贝a到b</span></span><br><span class="line"><span class="built_in">copy</span>(b, a)</span><br><span class="line">fmt.Println(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><p>就是python中的dict</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span>         <span class="comment">//定义map变量</span></span><br><span class="line">a = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span>, <span class="number">10</span>) <span class="comment">//通过make初始化，不在make中指定size就默认只有一个键值对。</span></span><br><span class="line">a[<span class="number">123929</span>] = <span class="string">&quot;张三&quot;</span></span><br><span class="line">a[<span class="number">2234234</span>] = <span class="string">&quot;李四&quot;</span></span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span> <span class="comment">//定义map变量</span></span><br><span class="line"><span class="comment">//通过make初始化，不在make中指定size就默认只有一个键值对，但是可以赋值时自动扩充。</span></span><br><span class="line">a = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span>, <span class="number">10</span>)</span><br><span class="line">a[<span class="number">123929</span>] = <span class="string">&quot;张三&quot;</span></span><br><span class="line">a[<span class="number">2234234</span>] = <span class="string">&quot;李四&quot;</span></span><br><span class="line">fmt.Println(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式2</span></span><br><span class="line">b := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span>)</span><br><span class="line">b[<span class="number">123123</span>] = <span class="string">&quot;zhansan&quot;</span></span><br><span class="line">b[<span class="number">32143222</span>] = <span class="string">&quot;liudehua&quot;</span></span><br><span class="line">b[<span class="number">1231234</span>] = <span class="string">&quot;zhouxinchi&quot;</span></span><br><span class="line">fmt.Println(b)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式3</span></span><br><span class="line">c := <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span>&#123;</span><br><span class="line"><span class="number">200200</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line"><span class="number">899898</span>: <span class="string">&quot;王五&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">c[<span class="number">123982</span>] = <span class="string">&quot;刘德华&quot;</span></span><br><span class="line">fmt.Println(c)</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除(go没有清空，只能遍历删除实现清空，或者make一个新的作它，原来的成为垃圾被回收。)</span></span><br><span class="line"><span class="built_in">delete</span>(c, <span class="number">200200</span>)</span><br><span class="line">fmt.Println(c)</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line">value, flag := b[<span class="number">123123</span>] <span class="comment">//flag 为true or false看找没找到。</span></span><br><span class="line">fmt.Println(value, flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> a &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;key is :%v, value is :%v \n&quot;</span>, k, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span>)</span><br><span class="line"><span class="comment">//赋值</span></span><br><span class="line">a[<span class="string">&quot;class1&quot;</span>] = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span>)</span><br><span class="line">a[<span class="string">&quot;class1&quot;</span>][<span class="number">200</span>] = <span class="string">&quot;小王&quot;</span></span><br><span class="line">a[<span class="string">&quot;class1&quot;</span>][<span class="number">300</span>] = <span class="string">&quot;小红&quot;</span></span><br><span class="line"></span><br><span class="line">a[<span class="string">&quot;class2&quot;</span>] = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span>)</span><br><span class="line">a[<span class="string">&quot;class2&quot;</span>][<span class="number">100</span>] = <span class="string">&quot;李辉&quot;</span></span><br><span class="line">a[<span class="string">&quot;class2&quot;</span>][<span class="number">200</span>] = <span class="string">&quot;小宁&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> a &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;班级是:&quot;</span>, k)</span><br><span class="line"><span class="keyword">for</span> k1, v1 := <span class="keyword">range</span> v &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;学生学号是：%v,学生姓名是：%v\n&quot;</span>, k1, v1)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="go的面向对象"><a href="#go的面向对象" class="headerlink" title="go的面向对象"></a>go的面向对象</h1><p>go 不用类，用结构体。</p><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义目标结构体</span></span><br><span class="line"><span class="keyword">type</span> Teacher <span class="keyword">struct</span> &#123;</span><br><span class="line">Name   <span class="type">string</span></span><br><span class="line">Age    <span class="type">int</span></span><br><span class="line">School <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建老师结构体的实例、对象、变量。</span></span><br><span class="line"><span class="keyword">var</span> ma Teacher  <span class="comment">// 有点像变量的定义</span></span><br><span class="line">fmt.Println(ma) <span class="comment">// 在未赋值时 默认是 &#123; 0 &#125; ,每个属性有初始值。</span></span><br><span class="line">ma.Name = <span class="string">&quot;马云&quot;</span></span><br><span class="line">ma.Age = <span class="number">59</span></span><br><span class="line">ma.School = <span class="string">&quot;杭州师范&quot;</span></span><br><span class="line">fmt.Println(ma)</span><br><span class="line">fmt.Println(ma.Age + <span class="number">10</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义目标结构体</span></span><br><span class="line"><span class="keyword">type</span> Teacher <span class="keyword">struct</span> &#123;</span><br><span class="line">Name   <span class="type">string</span></span><br><span class="line">Age    <span class="type">int</span></span><br><span class="line">School <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 第二种方法 创建老师结构体的实例、对象、变量。</span></span><br><span class="line"><span class="keyword">var</span> ma Teacher = Teacher&#123;<span class="string">&quot;赵云&quot;</span>, <span class="number">25</span>, <span class="string">&quot;白马义从&quot;</span>&#125;</span><br><span class="line">fmt.Println(ma)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义目标结构体</span></span><br><span class="line"><span class="keyword">type</span> Teacher <span class="keyword">struct</span> &#123;</span><br><span class="line">Name   <span class="type">string</span></span><br><span class="line">Age    <span class="type">int</span></span><br><span class="line">School <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 第三种方法 创建老师结构体的实例、对象、变量。</span></span><br><span class="line"><span class="comment">// 通过new 一个结构体指针的方式。</span></span><br><span class="line"><span class="keyword">var</span> t *Teacher = <span class="built_in">new</span>(Teacher)</span><br><span class="line">(*t).Age = <span class="number">100</span></span><br><span class="line">(*t).Name = <span class="string">&quot;好人&quot;</span></span><br><span class="line">fmt.Println(*t)</span><br><span class="line"></span><br><span class="line"><span class="comment">// go 为了简化 写法，可以用一下方法赋值，但是实际上底层还是上面的指针方法。</span></span><br><span class="line">t.Name = <span class="string">&quot;坏人&quot;</span></span><br><span class="line">t.Age = <span class="number">95</span></span><br><span class="line">fmt.Println(*t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义目标结构体</span></span><br><span class="line"><span class="keyword">type</span> Teacher <span class="keyword">struct</span> &#123;</span><br><span class="line">Name   <span class="type">string</span></span><br><span class="line">Age    <span class="type">int</span></span><br><span class="line">School <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> t *Teacher = &amp;Teacher&#123;&#125;</span><br><span class="line"><span class="comment">//var t *Teacher = &amp;Teacher&#123;&quot;赵云&quot;,25,&quot;白马义从&quot;&#125;</span></span><br><span class="line">(*t).Name = <span class="string">&quot;赵云&quot;</span></span><br><span class="line">(*t).Age = <span class="number">25</span></span><br><span class="line">t.School = <span class="string">&quot;白马义从&quot;</span></span><br><span class="line">fmt.Println(*t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体 和其它类型进行转换，需要有完全相同的字段。（名字，个数，类型）</span></span><br><span class="line"><span class="keyword">type</span> Teacher <span class="keyword">struct</span> &#123;</span><br><span class="line">Age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Tea Teacher</span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> t Teacher = Teacher&#123;<span class="number">10</span>&#125;</span><br><span class="line"><span class="keyword">var</span> p Person = Person&#123;<span class="number">10</span>&#125;</span><br><span class="line">t = Teacher(p)</span><br><span class="line">fmt.Println(t)</span><br><span class="line">fmt.Println(p)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体重新定义，取别名，只认最新数据类型，相互之间需要强转。</span></span><br><span class="line"><span class="keyword">var</span> t1 Tea = Tea&#123;<span class="number">100</span>&#125;</span><br><span class="line">t = Teacher(t1)</span><br><span class="line">fmt.Println(t1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s1 Student = Student&#123;<span class="string">&quot;小王&quot;</span>, <span class="number">22</span>&#125;</span><br><span class="line">fmt.Println(s1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s2 Student = Student&#123;</span><br><span class="line">Name: <span class="string">&quot;小红&quot;</span>,</span><br><span class="line">Age:  <span class="number">33</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(s2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s3 *Student = &amp;Student&#123;<span class="string">&quot;小明&quot;</span>, <span class="number">30</span>&#125;</span><br><span class="line">fmt.Println(s3)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法作用在指定的数据类型上。</span></span><br><span class="line"><span class="comment">// 结构体 传递参数给方法也是值传递。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span></span> test() &#123;</span><br><span class="line">p.Age = <span class="number">111</span></span><br><span class="line">fmt.Println(p.Age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> p Person</span><br><span class="line">p.Age = <span class="number">100</span></span><br><span class="line">p.test()</span><br><span class="line">fmt.Println(p.Age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Person)</span></span> test() &#123;</span><br><span class="line">(*p).Age = <span class="number">2333</span> <span class="comment">//也可以用程序员的简写 p.Age 其实底层还是(*p).Age;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;test 中p存好的内容是 %p\n&quot;</span>, p)</span><br><span class="line">fmt.Println(p.Age) <span class="comment">//输出原p的属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> p Person</span><br><span class="line">p.Age = <span class="number">100</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;main 中p存放的地址是 %p\n&quot;</span>, &amp;p)</span><br><span class="line">(&amp;p).test()</span><br><span class="line">fmt.Println(p.Age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> integer <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不用结构体 用其它类型试试。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i integer)</span></span> <span class="built_in">print</span>() &#123;</span><br><span class="line">i = <span class="number">10</span></span><br><span class="line">fmt.Println(<span class="string">&quot;print i = &quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *integer)</span></span> change() &#123;</span><br><span class="line">*i = <span class="number">30</span></span><br><span class="line">fmt.Println(<span class="string">&quot;change i = &quot;</span>, *i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i integer = <span class="number">20</span></span><br><span class="line">fmt.Println(<span class="string">&quot;main i = &quot;</span>, i)</span><br><span class="line">i.<span class="built_in">print</span>()</span><br><span class="line">fmt.Println(<span class="string">&quot;main i = &quot;</span>, i)</span><br><span class="line"><span class="comment">// (&amp;i).change()</span></span><br><span class="line">i.change() <span class="comment">// go语言的简写形式，其实上面才是规范写法。</span></span><br><span class="line">fmt.Println(<span class="string">&quot;main i = &quot;</span>, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体类型 实现了 String方法 ,print此结构体就是自动输出String方法的返回值。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *student)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line">str := fmt.Sprintf(<span class="string">&quot;Name = %v,Age = %v&quot;</span>, s.Name, s.Age)</span><br><span class="line"><span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">stu := student&#123;</span><br><span class="line">Name: <span class="string">&quot;周文王&quot;</span>,</span><br><span class="line">Age:  <span class="number">20</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// fmt.Println(stu.Name, stu.Age)</span></span><br><span class="line">fmt.Println(&amp;stu)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数 要严格按照 参数是 值还是指针来区分，但是方法不一样。</p><p>方法 接收者为 值类型，可以传入指针类型，接收者是 指针类型，也可以传入值类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s student)</span></span> test01() &#123;</span><br><span class="line">fmt.Println(s.Name, s.Age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *student)</span></span> test02() &#123;</span><br><span class="line">(*s).Name = <span class="string">&quot;小黄&quot;</span></span><br><span class="line">fmt.Println((*s).Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s student = student&#123;<span class="string">&quot;小红&quot;</span>, <span class="number">100</span>&#125;</span><br><span class="line">s.test01()</span><br><span class="line">(&amp;s).test01() <span class="comment">// 虽然使用了指针类型调用，但是还是值传递形式。</span></span><br><span class="line"></span><br><span class="line">s.test02() <span class="comment">// 虽然使用了值类型调用，但是还是指针传递形式。（会变）</span></span><br><span class="line">(&amp;s).test02()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用工厂模式实现非首字母大写的结构体的跨包调用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 被调用的包写如下</span></span><br><span class="line"><span class="keyword">package</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂模式</span></span><br><span class="line"><span class="comment">// 解决首字母小写，还能调用，“工厂模式”</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New_student</span><span class="params">(n <span class="type">string</span>, a <span class="type">int</span>)</span></span> student &#123;</span><br><span class="line"><span class="keyword">return</span> student&#123;n, a&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回指针的工厂模式</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New_student_address</span><span class="params">(n <span class="type">string</span>, a <span class="type">int</span>)</span></span> *student &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;student&#123;n, a&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main包下写如下</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;demo15/model&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 跨包 创建结构体 实例</span></span><br><span class="line"><span class="comment">// 要求另一个包内的 结构体首字母大写。</span></span><br><span class="line"><span class="keyword">var</span> s model.Student = model.Student&#123;<span class="string">&quot;张三&quot;</span>, <span class="number">11</span>&#125;</span><br><span class="line">fmt.Println(s)</span><br><span class="line"></span><br><span class="line"><span class="comment">//解决首字母小写，还能调用，“工厂模式”</span></span><br><span class="line">ss := model.New_student(<span class="string">&quot;李四&quot;</span>, <span class="number">12</span>)</span><br><span class="line">fmt.Println(ss.Name, ss.Age)</span><br><span class="line">fmt.Printf(<span class="string">&quot;类型是：%T\n&quot;</span>, ss)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回指针的工厂模式</span></span><br><span class="line">sss := model.New_student_address(<span class="string">&quot;王五&quot;</span>, <span class="number">13</span>)</span><br><span class="line">fmt.Println((*sss).Name, (*sss).Age)</span><br><span class="line">fmt.Printf(<span class="string">&quot;类型是：%T\n&quot;</span>, sss)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">age  <span class="type">int</span> <span class="comment">// 不能别的包访问</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义工厂模式（函数） ，相当于构造器。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewPerson</span><span class="params">(name <span class="type">string</span>)</span></span> *person &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;person&#123;</span><br><span class="line">Name: name,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体指针的set方法，对age字段封装</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *person)</span></span> SetAge(age <span class="type">int</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> age &gt; <span class="number">0</span> &amp;&amp; age &lt; <span class="number">150</span> &#123;</span><br><span class="line">p.age = age</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;范围不正确.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体指针的get方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *person)</span></span> GetAge() <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> p.age <span class="comment">//同一个包下 直接访问。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;demo16/model&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">p := model.NewPerson(<span class="string">&quot;丽丽&quot;</span>)</span><br><span class="line">p.SetAge(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(p.Name)</span><br><span class="line">fmt.Println(p.GetAge())</span><br><span class="line">fmt.Println(p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义结构体</span></span><br><span class="line"><span class="keyword">type</span> Animal <span class="keyword">struct</span> &#123;</span><br><span class="line">Age    <span class="type">int</span></span><br><span class="line">Weight <span class="type">float32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给结构体绑定上方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Animal)</span></span> Shout() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;wan wan wan &quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义结构体</span></span><br><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// &quot;结构体嵌入&quot;实现继承，加入匿名结构体</span></span><br><span class="line">  <span class="comment">// 当一个结构体内嵌（嵌入）了其他结构体，而不指定字段的名称，这些嵌入的结构体称为匿名结构体。</span></span><br><span class="line">Animal</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给结构体绑定上方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Cat)</span></span> scratch() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;闹人&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//创建cat结构体的实例</span></span><br><span class="line">cat := &amp;Cat&#123;&#125;</span><br><span class="line">cat.Animal.Age = <span class="number">3</span></span><br><span class="line">cat.Animal.Weight = <span class="number">10.3</span></span><br><span class="line">cat.Animal.Shout()</span><br><span class="line">cat.scratch()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就近原则。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义结构体</span></span><br><span class="line"><span class="keyword">type</span> Animal <span class="keyword">struct</span> &#123;</span><br><span class="line">Age    <span class="type">int</span></span><br><span class="line">Weight <span class="type">float32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给结构体绑定上方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Animal)</span></span> Shout() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;wan wan wan &quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Animal)</span></span> showInfo() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;年龄是：&quot;</span>, a.Age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义结构体</span></span><br><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// &quot;结构体嵌入&quot;实现继承，加入匿名结构体</span></span><br><span class="line">Animal</span><br><span class="line">Age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Cat)</span></span> showInfo() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;年龄是：&quot;</span>, c.Age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给结构体绑定上方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Cat)</span></span> scratch() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;闹人&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//创建cat结构体的实例</span></span><br><span class="line">cat := &amp;Cat&#123;&#125;</span><br><span class="line">cat.Age = <span class="number">9</span></span><br><span class="line">cat.Weight = <span class="number">10.3</span></span><br><span class="line">cat.Animal.Age = <span class="number">20</span></span><br><span class="line">cat.showInfo() <span class="comment">// 就近原则</span></span><br><span class="line">cat.Animal.showInfo()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多重继承,(不推荐)</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> A <span class="keyword">struct</span> &#123;</span><br><span class="line">a <span class="type">int</span></span><br><span class="line">b <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> B <span class="keyword">struct</span> &#123;</span><br><span class="line">c <span class="type">int</span></span><br><span class="line">d <span class="type">string</span></span><br><span class="line">a <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> C <span class="keyword">struct</span> &#123;</span><br><span class="line">A</span><br><span class="line">B</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := C&#123;A&#123;<span class="number">10</span>, <span class="string">&quot;aaa&quot;</span>&#125;, B&#123;<span class="number">20</span>, <span class="string">&quot;bbb&quot;</span>, <span class="number">30</span>&#125;&#125;</span><br><span class="line">fmt.Println(c)</span><br><span class="line">fmt.Println(c.b)</span><br><span class="line">fmt.Println(c.A.a, c.B.a) <span class="comment">// 有同名要区分。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构体的匿名字段可以是基本数据类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> A <span class="keyword">struct</span> &#123;</span><br><span class="line">a <span class="type">int</span></span><br><span class="line">b <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> B <span class="keyword">struct</span> &#123;</span><br><span class="line">c <span class="type">int</span></span><br><span class="line">d <span class="type">string</span></span><br><span class="line">a <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> C <span class="keyword">struct</span> &#123;</span><br><span class="line">A</span><br><span class="line">B</span><br><span class="line"><span class="type">int</span> <span class="comment">// 把int 也当成一个匿名结构体，结构体的匿名字段可以是基本数据类型。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := C&#123;A&#123;<span class="number">10</span>, <span class="string">&quot;aaa&quot;</span>&#125;, B&#123;<span class="number">20</span>, <span class="string">&quot;bbb&quot;</span>, <span class="number">30</span>&#125;, <span class="number">888</span>&#125;</span><br><span class="line">fmt.Println(c)</span><br><span class="line">fmt.Println(c.b)</span><br><span class="line">fmt.Println(c.A.a, c.B.a) <span class="comment">// 有同名要区分。</span></span><br><span class="line">fmt.Println(c.<span class="type">int</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> A <span class="keyword">struct</span> &#123;</span><br><span class="line">a <span class="type">int</span></span><br><span class="line">b <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> B <span class="keyword">struct</span> &#123;</span><br><span class="line">c <span class="type">int</span></span><br><span class="line">d <span class="type">string</span></span><br><span class="line">a <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> C <span class="keyword">struct</span> &#123;</span><br><span class="line">A</span><br><span class="line">B</span><br><span class="line"><span class="type">int</span> <span class="comment">// 把int 也当成一个匿名结构体，结构体的匿名字段可以是基本数据类型。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> C1 <span class="keyword">struct</span> &#123;</span><br><span class="line">*A <span class="comment">// 传结构体的指针也是可以的。</span></span><br><span class="line">*B</span><br><span class="line"><span class="type">int</span> <span class="comment">// 把int 也当成一个匿名结构体，结构体的匿名字段可以是基本数据类型。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> D <span class="keyword">struct</span> &#123;</span><br><span class="line">a <span class="type">int</span></span><br><span class="line">b <span class="type">string</span></span><br><span class="line">c B <span class="comment">// 组合模式。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := C&#123;A&#123;<span class="number">10</span>, <span class="string">&quot;aaa&quot;</span>&#125;, B&#123;<span class="number">20</span>, <span class="string">&quot;bbb&quot;</span>, <span class="number">30</span>&#125;, <span class="number">888</span>&#125;</span><br><span class="line">fmt.Println(c)</span><br><span class="line">fmt.Println(c.b)</span><br><span class="line">fmt.Println(c.A.a, c.B.a) <span class="comment">// 有同名要区分。</span></span><br><span class="line">fmt.Println(c.<span class="type">int</span>)</span><br><span class="line"></span><br><span class="line">c1 := C1&#123;&amp;A&#123;<span class="number">10</span>, <span class="string">&quot;aaa&quot;</span>&#125;, &amp;B&#123;<span class="number">20</span>, <span class="string">&quot;bbb&quot;</span>, <span class="number">30</span>&#125;, <span class="number">888</span>&#125;</span><br><span class="line">fmt.Println(c1)</span><br><span class="line">fmt.Println(c1.A)</span><br><span class="line">fmt.Println(*c1.A)</span><br><span class="line"></span><br><span class="line">d := D&#123;<span class="number">10</span>, <span class="string">&quot;ooo&quot;</span>, B&#123;<span class="number">10</span>, <span class="string">&quot;bbb&quot;</span>, <span class="number">100</span>&#125;&#125;</span><br><span class="line">fmt.Println(d)</span><br><span class="line">fmt.Println(d.c.d)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="接口（借尸还魂）"><a href="#接口（借尸还魂）" class="headerlink" title="接口（借尸还魂）"></a>接口（借尸还魂）</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口的定义s</span></span><br><span class="line"><span class="keyword">type</span> SayHello <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// 声明没有实现的方法。</span></span><br><span class="line">sayHello()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口的实现</span></span><br><span class="line"><span class="comment">// 先定义一个结构体</span></span><br><span class="line"><span class="keyword">type</span> Chinese <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再 用一个绑定结构体的方法来实现 上面的接口。</span></span><br><span class="line"><span class="comment">// 如果想要实现某一个接口，需要把此接口内的所有的方法都实现。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(person Chinese)</span></span> sayHello() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;你好&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> American <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(person American)</span></span> sayHello() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;hi&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个函数，用来接收 具备SayHello接口能力的变量。</span></span><br><span class="line"><span class="comment">// golang 实现接口是基于方法的，而不是基于接口的。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">greet</span><span class="params">(s SayHello)</span></span> &#123;</span><br><span class="line">s.sayHello()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := Chinese&#123;&#125;</span><br><span class="line">a := American&#123;&#125;</span><br><span class="line">greet(c)</span><br><span class="line">greet(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/01/01/go%E5%AD%A6%E4%B9%A0/go%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2023-09-02%2010.59.52.jpg" alt="截屏2023-09-02 10.59.52"></p><p><img src="/2025/01/01/go%E5%AD%A6%E4%B9%A0/go%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2023-09-02%2011.05.21.jpg" alt="截屏2023-09-02 11.05.21"></p><p>一个结构体实现多个接口。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">a()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> BInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">b()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Stu <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Stu)</span></span> a() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;aaaa&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Stu)</span></span> b() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;bbbb&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s Stu</span><br><span class="line"><span class="keyword">var</span> a AInterface = s</span><br><span class="line"><span class="keyword">var</span> b BInterface = s</span><br><span class="line">a.a()</span><br><span class="line">b.b()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">a()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> BInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">b()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> CInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">AInterface</span><br><span class="line">BInterface</span><br><span class="line">c()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Stu <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Stu)</span></span> a() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;aaaa&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Stu)</span></span> b() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;bbbb&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Stu)</span></span> c() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;ccc&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s Stu</span><br><span class="line"><span class="keyword">var</span> a AInterface = s</span><br><span class="line"><span class="keyword">var</span> b BInterface = s</span><br><span class="line">a.a()</span><br><span class="line">b.b()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c CInterface = s</span><br><span class="line">c.c( )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>空接口 没有实现任何方法，所以可以视为 任意类型都实现了空接口。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> E <span class="keyword">interface</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s Stu</span><br><span class="line"><span class="keyword">var</span> a AInterface = s</span><br><span class="line"><span class="keyword">var</span> b BInterface = s</span><br><span class="line">a.a()</span><br><span class="line">b.b()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c CInterface = s</span><br><span class="line">c.c()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> e E = s <span class="comment">// 空接口。</span></span><br><span class="line">fmt.Println(e)</span><br><span class="line"><span class="comment">// 另一种空接口 实现。</span></span><br><span class="line"><span class="keyword">var</span> ee <span class="keyword">interface</span>&#123;&#125; = s</span><br><span class="line">fmt.Println(ee)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p>golang的多态 也是通过 接口 实现的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口的定义s</span></span><br><span class="line"><span class="keyword">type</span> SayHello <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// 声明没有实现的方法。</span></span><br><span class="line">sayHello()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口的实现</span></span><br><span class="line"><span class="comment">// 先定义一个结构体</span></span><br><span class="line"><span class="keyword">type</span> Chinese <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再 用一个绑定结构体的方法来实现 上面的接口。</span></span><br><span class="line"><span class="comment">// 如果想要实现某一个接口，需要把此接口内的所有的方法都实现。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(person Chinese)</span></span> sayHello() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;你好&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> American <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(person American)</span></span> sayHello() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;hi&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个函数，用来接收 具备SayHello接口能力的变量。</span></span><br><span class="line"><span class="comment">// golang 实现接口是基于方法的，而不是基于接口的。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">greet</span><span class="params">(s SayHello)</span></span> &#123;</span><br><span class="line">s.sayHello()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := Chinese&#123;&#125;</span><br><span class="line">a := American&#123;&#125;</span><br><span class="line">greet(c)</span><br><span class="line">greet(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/01/01/go%E5%AD%A6%E4%B9%A0/go%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2023-09-02%2016.06.40.jpg" alt="截屏2023-09-02 16.06.40"></p><h1 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口的定义s</span></span><br><span class="line"><span class="keyword">type</span> SayHello <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// 声明没有实现的方法。</span></span><br><span class="line">sayHello()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口的实现</span></span><br><span class="line"><span class="comment">// 先定义一个结构体</span></span><br><span class="line"><span class="keyword">type</span> Chinese <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再 用一个绑定结构体的方法来实现 上面的接口。</span></span><br><span class="line"><span class="comment">// 如果想要实现某一个接口，需要把此接口内的所有的方法都实现。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(person Chinese)</span></span> sayHello() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;你好&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个接口外的 方法。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(person Chinese)</span></span> niu() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;扭秧歌&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> American <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(person American)</span></span> sayHello() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;hi&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个函数，用来接收 具备SayHello接口能力的变量。</span></span><br><span class="line"><span class="comment">// golang 实现接口是基于方法的，而不是基于接口的。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">greet</span><span class="params">(s SayHello)</span></span> &#123;</span><br><span class="line">s.sayHello()</span><br><span class="line"><span class="comment">// 断言</span></span><br><span class="line"><span class="keyword">var</span> ch Chinese = s.(Chinese) <span class="comment">// 看s是否能转为Chinese类型，并赋给ch变量。</span></span><br><span class="line">ch.niu()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := Chinese&#123;<span class="string">&quot;陈&quot;</span>&#125;</span><br><span class="line"><span class="comment">// a := American&#123;&quot;宇&quot;&#125;</span></span><br><span class="line">greet(c)</span><br><span class="line"><span class="comment">// greet(a)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口的定义s</span></span><br><span class="line"><span class="keyword">type</span> SayHello <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// 声明没有实现的方法。</span></span><br><span class="line">sayHello()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口的实现</span></span><br><span class="line"><span class="comment">// 先定义一个结构体</span></span><br><span class="line"><span class="keyword">type</span> Chinese <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再 用一个绑定结构体的方法来实现 上面的接口。</span></span><br><span class="line"><span class="comment">// 如果想要实现某一个接口，需要把此接口内的所有的方法都实现。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(person Chinese)</span></span> sayHello() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;你好&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个接口外的 方法。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(person Chinese)</span></span> niu() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;扭秧歌&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> American <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(person American)</span></span> sayHello() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;hi&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个函数，用来接收 具备SayHello接口能力的变量。</span></span><br><span class="line"><span class="comment">// golang 实现接口是基于方法的，而不是基于接口的。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">greet</span><span class="params">(s SayHello)</span></span> &#123;</span><br><span class="line">s.sayHello()</span><br><span class="line"><span class="comment">// 断言</span></span><br><span class="line">ch, flag := s.(Chinese) <span class="comment">// 看s是否能转为Chinese类型，并赋给ch变量。</span></span><br><span class="line"><span class="comment">// if ch, flag := s.(Chinese); flag == true &#123; //这样写；前是定义，；后判断。</span></span><br><span class="line">  <span class="keyword">if</span> flag == <span class="literal">true</span> &#123;</span><br><span class="line">ch.niu()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;不会扭秧歌&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// c := Chinese&#123;&quot;陈&quot;&#125;</span></span><br><span class="line">a := American&#123;<span class="string">&quot;宇&quot;</span>&#125;</span><br><span class="line"><span class="comment">// greet(c)</span></span><br><span class="line">greet(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//打开</span></span><br><span class="line">file, err := os.Open(<span class="string">&quot;/Users/chenyushao/Desktop/golang_draft/test.txt&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;文件打开失败,对应错误为：&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;文件的指针是：&quot;</span>, file)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一系列操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭文件</span></span><br><span class="line">err = file.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;关闭失败&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;关闭成功&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/01/01/go%E5%AD%A6%E4%B9%A0/go%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2023-09-04%2011.22.22.jpg" alt="截屏2023-09-04 11.22.22"></p><p>带缓冲的读取，4096.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//打开</span></span><br><span class="line">file, err := os.Open(<span class="string">&quot;/Users/chenyushao/Desktop/golang_draft/test.txt&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;文件打开成功。&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数退出时，关闭，防治内存泄漏。</span></span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建流</span></span><br><span class="line">reader := bufio.NewReader(file)</span><br><span class="line"><span class="comment">//读取,死循环读取。</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">str, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;读取完毕&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;文件读物成功，且读取完毕。&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 写入文件。</span></span><br><span class="line"><span class="comment">//打开文件</span></span><br><span class="line">file, err := os.OpenFile(<span class="string">&quot;/Users/chenyushao/Desktop/golang_draft/test.txt&quot;</span>, os.O_APPEND|os.O_RDWR|os.O_CREATE, <span class="number">0751</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;打开文件失败，&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//及时关闭资源</span></span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">//写入</span></span><br><span class="line"><span class="comment">//io流，先写入缓冲区。</span></span><br><span class="line">writer := bufio.NewWriter(file)</span><br><span class="line">writer.WriteString(<span class="string">&quot;hello &quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">writer.WriteString(<span class="string">&quot;重复&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 流带缓冲区，刷新数据，把管子清一下。(真正写入到文件)</span></span><br><span class="line">writer.Flush()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="进程、线程、协程、管道"><a href="#进程、线程、协程、管道" class="headerlink" title="进程、线程、协程、管道"></a>进程、线程、协程、管道</h1><p>一个运行的程序就是一个 进程；</p><p>一个进程中可以有一个或者多个线程；</p><p>一个cpu运行多个线程，就是伪多线程，实际上是一个cpu在多个线程片段之间切换，只是切换的速度比较快，切换不同的线程涉及系统层面的开销；</p><p>协程（goroutine） 就是 微线程，本质是 对单一线程的优化（协程是单线程的并发）。</p><p><img src="/2025/01/01/go%E5%AD%A6%E4%B9%A0/go%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2023-09-06%2010.55.26.jpg" alt="截屏2023-09-06 10.55.26"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123; <span class="comment">// 准备用作协程的函数（协程属于函数调用层面）</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;协程 goroutine:&quot;</span> + strconv.Itoa(i))</span><br><span class="line">time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123; <span class="comment">// 主线程</span></span><br><span class="line"><span class="keyword">go</span> test() <span class="comment">// go 中开启协程。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;主线程:&quot;</span> + strconv.Itoa(i))</span><br><span class="line">time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行结果</span></span><br><span class="line">主线程:<span class="number">1</span></span><br><span class="line">协程 goroutine:<span class="number">1</span></span><br><span class="line">协程 goroutine:<span class="number">2</span></span><br><span class="line">主线程:<span class="number">2</span></span><br><span class="line">主线程:<span class="number">3</span></span><br><span class="line">协程 goroutine:<span class="number">3</span></span><br><span class="line">主线程:<span class="number">4</span></span><br><span class="line">协程 goroutine:<span class="number">4</span></span><br><span class="line">协程 goroutine:<span class="number">5</span></span><br><span class="line">主线程:<span class="number">5</span></span><br><span class="line">协程 goroutine:<span class="number">6</span></span><br><span class="line">主线程:<span class="number">6</span></span><br><span class="line">主线程:<span class="number">7</span></span><br><span class="line">协程 goroutine:<span class="number">7</span></span><br><span class="line">协程 goroutine:<span class="number">8</span></span><br><span class="line">主线程:<span class="number">8</span></span><br><span class="line">协程 goroutine:<span class="number">9</span></span><br><span class="line">主线程:<span class="number">9</span></span><br><span class="line">协程 goroutine:<span class="number">10</span></span><br><span class="line">主线程:<span class="number">10</span></span><br></pre></td></tr></table></figure><p><img src="/2025/01/01/go%E5%AD%A6%E4%B9%A0/go%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2023-09-06%2011.12.39.jpg" alt="截屏2023-09-06 11.12.39"></p><p>主死随从</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主线程结束了，协程也会跟着结束</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123; <span class="comment">// 准备用作协程的函数（协程属于函数调用层面）</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++ &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;协程 goroutine:&quot;</span> + strconv.Itoa(i))</span><br><span class="line">time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123; <span class="comment">// 主线程</span></span><br><span class="line"><span class="keyword">go</span> test() <span class="comment">// go 中开启协程。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;主线程:&quot;</span> + strconv.Itoa(i))</span><br><span class="line">time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 用匿名函数 和 外部变量组成 闭包</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="comment">//启动协程</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 以上代码 会让10个协程 并发， i变量不确定运行到多少时，被协程的匿名函数用上。</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 用匿名函数 和 外部变量组成 闭包</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="comment">//启动协程</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(num <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(num)</span><br><span class="line">&#125;(i)</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 循环每生成一个协程的匿名函数时，把此时的i以参数形式，传入匿名函数。</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup <span class="comment">// 只需要定义，无需赋值。计数器</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 用匿名函数 和 外部变量组成 闭包</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">wg.Add(<span class="number">1</span>) <span class="comment">// 注意这里wg add的次数，要保证和 协程的个数一致。</span></span><br><span class="line"><span class="comment">//启动协程</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(num <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">      <span class="keyword">defer</span> wg.Done()</span><br><span class="line">fmt.Println(num)</span><br><span class="line">&#125;(i)</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num <span class="type">int</span></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup <span class="comment">//定义不需要赋值。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</span><br><span class="line">num = num + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sub</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</span><br><span class="line">num = num - <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">wg.Add(<span class="number">2</span>)</span><br><span class="line"><span class="comment">//启动协程</span></span><br><span class="line"><span class="keyword">go</span> add()</span><br><span class="line"><span class="keyword">go</span> sub()</span><br><span class="line">wg.Wait()</span><br><span class="line">fmt.Println(num)</span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//结果 </span></span><br><span class="line"><span class="number">1045</span></span><br></pre></td></tr></table></figure><p><img src="/2025/01/01/go%E5%AD%A6%E4%B9%A0/go%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2023-09-07%2010.34.18.jpg" alt="截屏2023-09-07 10.34.18"></p><p>多个协程之间 交替执行导致了问题，协程并发争抢资源。</p><p>用 锁 可以解决上面的问题，但是不推荐,因为性能低。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num <span class="type">int</span></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup <span class="comment">//定义不需要赋值。</span></span><br><span class="line"><span class="comment">// 加入互斥锁 mutex lock</span></span><br><span class="line"><span class="keyword">var</span> lock sync.Mutex</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</span><br><span class="line"><span class="comment">// 加锁</span></span><br><span class="line">lock.Lock()</span><br><span class="line">num = num + <span class="number">1</span></span><br><span class="line"><span class="comment">// 解锁</span></span><br><span class="line">lock.Unlock()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sub</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</span><br><span class="line"><span class="comment">// 加锁</span></span><br><span class="line">lock.Lock()</span><br><span class="line">num = num - <span class="number">1</span></span><br><span class="line"><span class="comment">// 解锁</span></span><br><span class="line">lock.Unlock()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">wg.Add(<span class="number">2</span>)</span><br><span class="line"><span class="comment">//启动协程</span></span><br><span class="line"><span class="keyword">go</span> add()</span><br><span class="line"><span class="keyword">go</span> sub()</span><br><span class="line">wg.Wait()</span><br><span class="line">fmt.Println(num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读多写少，推荐用读写锁RWLock。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num <span class="type">int</span></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup <span class="comment">//定义不需要赋值。</span></span><br><span class="line"><span class="comment">// 加入读写锁 RWMutex lock</span></span><br><span class="line"><span class="keyword">var</span> lock sync.RWMutex</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="comment">// 加锁</span></span><br><span class="line">lock.RLock() <span class="comment">// 读之间不锁，只针对写锁起来。</span></span><br><span class="line">fmt.Println(<span class="string">&quot;开始读&quot;</span>)</span><br><span class="line">num = num + <span class="number">1</span></span><br><span class="line">time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line"><span class="comment">// 解锁</span></span><br><span class="line">lock.RUnlock()</span><br><span class="line">fmt.Println(<span class="string">&quot;读完了&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sub</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line"><span class="comment">// 加锁</span></span><br><span class="line">lock.Lock() <span class="comment">// 默认的Lock就是写锁。</span></span><br><span class="line">fmt.Println(<span class="string">&quot;开始写&quot;</span>)</span><br><span class="line">num = num - <span class="number">1</span></span><br><span class="line">time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line"><span class="comment">// 解锁</span></span><br><span class="line">lock.Unlock()</span><br><span class="line">fmt.Println(<span class="string">&quot;写完了&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">wg.Add(<span class="number">2</span>) <span class="comment">// add 的计数要和 协程数量一致。</span></span><br><span class="line"><span class="comment">//启动协程</span></span><br><span class="line"><span class="keyword">go</span> add()</span><br><span class="line"><span class="keyword">go</span> sub()</span><br><span class="line">wg.Wait()</span><br><span class="line">fmt.Println(num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 管道 声明</span></span><br><span class="line"><span class="keyword">var</span> intChan <span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line"><span class="comment">// 通过make初始化，此管道可以放3个int数据。</span></span><br><span class="line">intChan = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// 证明管道是 引用类型</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;intChan的值是：%v \n&quot;</span>, intChan)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向管道放数据</span></span><br><span class="line">intChan &lt;- <span class="number">10</span></span><br><span class="line">num := <span class="number">20</span></span><br><span class="line">intChan &lt;- num</span><br><span class="line">intChan &lt;- <span class="number">50</span></span><br><span class="line"><span class="comment">// intChan &lt;- 500 // 超了会死锁。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 管道内读取数据</span></span><br><span class="line">num1 := &lt;-intChan</span><br><span class="line">num2 := &lt;-intChan</span><br><span class="line">num3 := &lt;-intChan</span><br><span class="line">fmt.Println(num1, num2, num3)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;管道实际长度：%v,管道容量是 %v&quot;</span>, <span class="built_in">len</span>(intChan), <span class="built_in">cap</span>(intChan))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>管道关闭以后 读取可以，只是不能再写入了。如果写入超过容量，会死锁。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 管道 声明</span></span><br><span class="line"><span class="keyword">var</span> intChan <span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line"><span class="comment">// 通过make初始化，此管道可以放3个int数据。</span></span><br><span class="line">intChan = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">100</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">intChan &lt;- i</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(intChan)</span><br><span class="line"><span class="comment">//遍历 前记得关闭管道。</span></span><br><span class="line"><span class="keyword">for</span> v := <span class="keyword">range</span> intChan &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;value = &quot;</span>, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/01/01/go%E5%AD%A6%E4%B9%A0/go%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2023-09-07%2022.14.58.jpg" alt="截屏2023-09-07 22.14.58"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeData</span><span class="params">(intChan <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">50</span>; i++ &#123;</span><br><span class="line">intChan &lt;- i</span><br><span class="line">fmt.Println(<span class="string">&quot;写入的数据为：&quot;</span>, i)</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写完以后关闭管道</span></span><br><span class="line"><span class="built_in">close</span>(intChan)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readData</span><span class="params">(intChan <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"><span class="keyword">for</span> v := <span class="keyword">range</span> intChan &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;读的数据为：&quot;</span>, v)</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup <span class="comment">// 用协程计数器 做一个阻塞。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123; <span class="comment">//主线程</span></span><br><span class="line"><span class="comment">//写的协程 和 读协程 共同操作一个管道。</span></span><br><span class="line">intChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">wg.Add(<span class="number">2</span>) <span class="comment">// 用到的是两个协程。</span></span><br><span class="line"><span class="comment">//开启读写协程</span></span><br><span class="line"><span class="keyword">go</span> writeData(intChan)</span><br><span class="line"><span class="keyword">go</span> readData(intChan)</span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>管道可以声明 只读或者只写。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123; <span class="comment">//主线程</span></span><br><span class="line"><span class="comment">// 正常情况下，管道是双向的，可读可写。</span></span><br><span class="line"><span class="comment">// var intChan chan int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明为只写</span></span><br><span class="line"><span class="keyword">var</span> intChan2 <span class="keyword">chan</span>&lt;- <span class="type">int</span> <span class="comment">// 管道有 只读性质。而不是一种新类型</span></span><br><span class="line">intChan2 = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">5</span>)</span><br><span class="line">intChan2 &lt;- <span class="number">10</span></span><br><span class="line"><span class="comment">// num := &lt;-intChan2 // 有只写性质后，这样的读管道就非法了。</span></span><br><span class="line">fmt.Println(<span class="string">&quot;intChan2&quot;</span>, intChan2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明为只读</span></span><br><span class="line"><span class="keyword">var</span> intChan3 &lt;-<span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line"><span class="keyword">if</span> intChan3 != <span class="literal">nil</span> &#123;</span><br><span class="line">num1 := &lt;-intChan3</span><br><span class="line">fmt.Println(<span class="string">&quot;num1&quot;</span>, num1)</span><br><span class="line">&#125;</span><br><span class="line">intChan3 &lt;- <span class="number">20</span> <span class="comment">// 有只读性质后，这样的写管道就非法了。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有写没有读，管道就会deadlock 死锁。</p><p>但是写的快，读得慢，是不会死锁的。</p><h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><p>select 解决多个管道的选择问题，又叫“多路复用”</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123; <span class="comment">//主线程</span></span><br><span class="line"><span class="comment">//管道1</span></span><br><span class="line">intChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; <span class="comment">// 通过一个匿名函数往管道1内 写。</span></span><br><span class="line">time.Sleep(time.Second * <span class="number">5</span>)</span><br><span class="line">intChan &lt;- <span class="number">10</span></span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">//管道2</span></span><br><span class="line">stringChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; <span class="comment">// 通过一个匿名函数往管道2内 写。</span></span><br><span class="line">time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">stringChan &lt;- <span class="string">&quot;msbgolang&quot;</span></span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// fmt.Println(&lt;-intChan) // 本身 取数据就是 阻塞。</span></span><br><span class="line"><span class="comment">// select 可以公平的从多个管道中按照时间长短， 选择一个来阻塞并执行。</span></span><br><span class="line"><span class="comment">// 像以下就是输出“stringChan: msbgolang” 因为管道2的那个写入的协程时间短一些。</span></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> v := &lt;-intChan: <span class="comment">// 语句写法是固定的。case 后跟一个读管道操作。</span></span><br><span class="line">fmt.Println(<span class="string">&quot;intChan：&quot;</span>, v)</span><br><span class="line"><span class="keyword">case</span> v := &lt;-stringChan:</span><br><span class="line">fmt.Println(<span class="string">&quot;stringChan:&quot;</span>, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123; <span class="comment">//主线程</span></span><br><span class="line"><span class="comment">//管道1</span></span><br><span class="line">intChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; <span class="comment">// 通过一个匿名函数往管道1内 写。</span></span><br><span class="line">time.Sleep(time.Second * <span class="number">5</span>)</span><br><span class="line">intChan &lt;- <span class="number">10</span></span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">//管道2</span></span><br><span class="line">stringChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; <span class="comment">// 通过一个匿名函数往管道2内 写。</span></span><br><span class="line">time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">stringChan &lt;- <span class="string">&quot;msbgolang&quot;</span></span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// fmt.Println(&lt;-intChan) // 本身 取数据就是 阻塞。</span></span><br><span class="line"><span class="comment">// select 可以公平的从多个管道中按照时间长短， 选择一个来阻塞并执行。</span></span><br><span class="line"><span class="comment">// 像以下就是输出“stringChan: msbgolang” 因为管道2的那个写入的协程时间短一些。</span></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> v := &lt;-intChan: <span class="comment">// 语句写法是固定的。case 后跟一个读管道操作。</span></span><br><span class="line">fmt.Println(<span class="string">&quot;intChan：&quot;</span>, v)</span><br><span class="line"><span class="keyword">case</span> v := &lt;-stringChan:</span><br><span class="line">fmt.Println(<span class="string">&quot;stringChan:&quot;</span>, v)</span><br><span class="line"><span class="keyword">default</span>: <span class="comment">//default 可以防止case 的阻塞被执行。</span></span><br><span class="line">fmt.Println(<span class="string">&quot;防止select被阻塞&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主动捕获异常defer+recover，来让协程出问题的时候，其它协程和主线程正常运行。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printNum</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">devide</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 捕获异常。</span></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := <span class="built_in">recover</span>()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;devide() 出现错误:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">num1 := <span class="number">1</span></span><br><span class="line">num2 := <span class="number">0</span></span><br><span class="line">result := num1 / num2</span><br><span class="line">fmt.Println(<span class="string">&quot;devide:&quot;</span>, result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123; <span class="comment">//主线程</span></span><br><span class="line"><span class="comment">//启动两个goroutine</span></span><br><span class="line"><span class="keyword">go</span> printNum()</span><br><span class="line"><span class="keyword">go</span> devide()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 让主线程等一等</span></span><br><span class="line">time.Sleep(time.Second * <span class="number">4</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><p><img src="/2025/01/01/go%E5%AD%A6%E4%B9%A0/go%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2023-09-09%2010.41.22.jpg" alt="截屏2023-09-09 10.41.22"></p><h2 id="传输层：TCP-协议三次握手，四次挥手"><a href="#传输层：TCP-协议三次握手，四次挥手" class="headerlink" title="传输层：TCP 协议三次握手，四次挥手"></a>传输层：TCP 协议三次握手，四次挥手</h2><p><img src="/2025/01/01/go%E5%AD%A6%E4%B9%A0/go%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2023-09-09%2010.43.02.jpg" alt="截屏2023-09-09 10.43.02"></p><p><img src="/2025/01/01/go%E5%AD%A6%E4%B9%A0/go%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2023-09-09%2010.44.42.jpg" alt="截屏2023-09-09 10.44.42"></p><h2 id="传输层：UDP-协议（不可靠）"><a href="#传输层：UDP-协议（不可靠）" class="headerlink" title="传输层：UDP 协议（不可靠）"></a>传输层：UDP 协议（不可靠）</h2><p>UDP协议可能丢包；</p><p>数据切成一个一个的小数据包 发送给服务器。服务器也接收一个一个的小数据包。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span> <span class="comment">// 网络需要的包。</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;客户端启动&quot;</span>)</span><br><span class="line"><span class="comment">// 创建客户端(指定服务器端IP 和 PROT)</span></span><br><span class="line">conn, err := net.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;127.0.0.1:8888&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;客户端链接失败&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;客户端连接成功,conn:&quot;</span>, conn)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务器端</span></span><br><span class="line"><span class="comment">// 测试时，要先启动服务器端，因为服务器端要先启动 等待客户端发消息过来。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span> <span class="comment">// 网络需要的包。</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;服务器端启动&quot;</span>)</span><br><span class="line"><span class="comment">// 监听</span></span><br><span class="line">listen, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;127.0.0.1:8888&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;监听失败,err:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 监听成功后，等待客户端连接</span></span><br><span class="line">conn, err2 := listen.Accept()</span><br><span class="line"><span class="keyword">if</span> err2 != <span class="literal">nil</span> &#123; <span class="comment">// 客户端等待失败</span></span><br><span class="line">fmt.Println(<span class="string">&quot;客户端等待失败，err2&quot;</span>, err2)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;连接成功,%v\n,接收到的客户端远程地址是:%v\n&quot;</span>, conn, conn.RemoteAddr().String())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 在实际连接时，服务器会分配一个临时的端口给客户端，</span></span><br><span class="line"><span class="comment">而不是使用监听的端口。这是因为在传输层（TCP 协议）中，</span></span><br><span class="line"><span class="comment">客户端和服务器之间的通信是通过客户端随机 分配的一个临时端口与服务器的监听端口建立连接的。*/</span></span><br></pre></td></tr></table></figure><p>完整版</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务器</span></span><br><span class="line"><span class="comment">// 测试时，要先启动服务器端，因为服务器端要先启动 等待客户端发消息过来。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span> <span class="comment">// 网络需要的包。</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> conn.Close() <span class="comment">// 链接用完记得关闭。</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// 创建一个切片,将读入的数据 放进切片中。</span></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">1024</span>)</span><br><span class="line">n, err := conn.Read(buf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="type">string</span>(buf[<span class="number">0</span>:n]) == <span class="string">&quot;quit\n&quot;</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;接收到客户端注销信号,现在执行.&quot;</span>)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="type">string</span>(buf[<span class="number">0</span>:n]))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;服务器端启动&quot;</span>)</span><br><span class="line"><span class="comment">// 监听</span></span><br><span class="line">listen, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;127.0.0.1:8888&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;监听失败,err:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// 监听成功后，等待客户端连接</span></span><br><span class="line">conn, err2 := listen.Accept()</span><br><span class="line"><span class="keyword">if</span> err2 != <span class="literal">nil</span> &#123; <span class="comment">// 客户端等待失败</span></span><br><span class="line">fmt.Println(<span class="string">&quot;客户端等待失败，err2&quot;</span>, err2)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;连接成功,%v\n,接收到的客户端远程地址是:%v\n&quot;</span>, conn, conn.RemoteAddr().String())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备一个协程，此协程处理不同客户端请求。</span></span><br><span class="line"><span class="keyword">go</span> process(conn)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span> <span class="comment">// 网络需要的包。</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;客户端启动&quot;</span>)</span><br><span class="line"><span class="comment">// 创建客户端(指定服务器端IP 和 PROT)</span></span><br><span class="line">conn, err := net.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;127.0.0.1:8888&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;客户端链接失败&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;客户端连接成功,conn:&quot;</span>, conn)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">reader := bufio.NewReader(os.Stdin)</span><br><span class="line">str, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;终端输入失败,err&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> str == <span class="string">&quot;quit\n&quot;</span> &#123;</span><br><span class="line">_, err := conn.Write([]<span class="type">byte</span>(str)) <span class="comment">// 这里需要强转一下。</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;写入失败&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;手动退出客户端&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将str发送给服务器</span></span><br><span class="line">n, err := conn.Write([]<span class="type">byte</span>(str)) <span class="comment">// 这里需要强转一下。</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;写入失败&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;客户端数据发送成功，一共发送了%d字节的数据。&quot;</span>, n)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>放射能够 在 运行时动态获取变量信息。</p><p><img src="/2025/01/01/go%E5%AD%A6%E4%B9%A0/go%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2023-09-10%2011.29.05.jpg" alt="截屏2023-09-10 11.29.05"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用一个函数，函数的参数为空接口；</span></span><br><span class="line"><span class="comment">// 空接口没有方法，可以视为所有类型都实现了空接口。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testReflect</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="comment">// 1.调用TypeOf函数，返回reflect.Type类型</span></span><br><span class="line">reType := reflect.TypeOf(i)</span><br><span class="line">fmt.Println(<span class="string">&quot;reType:&quot;</span>, reType)</span><br><span class="line">reValue := reflect.ValueOf(i)</span><br><span class="line">fmt.Println(<span class="string">&quot;Value:&quot;</span>, reValue)</span><br><span class="line"></span><br><span class="line"><span class="comment">// num1 := 2</span></span><br><span class="line"><span class="comment">// reValue 是 Value 类型的结构体 不是int类型</span></span><br><span class="line">num2 := <span class="number">50</span> + reValue.Int() <span class="comment">//num1</span></span><br><span class="line">fmt.Println(num2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原路返回</span></span><br><span class="line"><span class="comment">// reValue 转为空接口(其实是转为保管在空接口中的类型)：</span></span><br><span class="line">i2 := reValue.Interface()</span><br><span class="line"><span class="comment">// 利用断言，看看能不能转为int类型。</span></span><br><span class="line">n := i2.(<span class="type">int</span>)</span><br><span class="line">fmt.Println(n + <span class="number">10</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 对基础数据类型进行反射</span></span><br><span class="line"><span class="keyword">var</span> num <span class="type">int</span> = <span class="number">100</span></span><br><span class="line">testReflect(num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/01/01/go%E5%AD%A6%E4%B9%A0/go%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2023-09-10%2012.27.40.jpg" alt="截屏2023-09-10 12.27.40"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用一个函数，函数的参数为空接口；</span></span><br><span class="line"><span class="comment">// 空接口没有方法，可以视为所有类型都实现了空接口。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testReflect</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="comment">// 1.调用TypeOf函数，返回reflect.Type类型</span></span><br><span class="line">reType := reflect.TypeOf(i)</span><br><span class="line">fmt.Println(<span class="string">&quot;reType:&quot;</span>, reType)</span><br><span class="line">reValue := reflect.ValueOf(i)</span><br><span class="line">fmt.Println(<span class="string">&quot;Value:&quot;</span>, reValue)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原路返回</span></span><br><span class="line"><span class="comment">// reValue 转为空接口(其实是转为保管在空接口中的类型)：</span></span><br><span class="line">i2 := reValue.Interface()</span><br><span class="line"><span class="comment">// 利用断言，看看能不能转为int类型。</span></span><br><span class="line">n, flag := i2.(Student)</span><br><span class="line"><span class="keyword">if</span> flag == <span class="literal">true</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;名字是：%v,年龄是：%v&quot;</span>, n.Name, n.Age)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 对基础数据类型进行反射</span></span><br><span class="line"><span class="keyword">var</span> num <span class="type">int</span> = <span class="number">100</span></span><br><span class="line">testReflect(num)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对结构体反射</span></span><br><span class="line">stu := Student&#123;</span><br><span class="line">Name: <span class="string">&quot;丽丽&quot;</span>,</span><br><span class="line">Age:  <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line">testReflect(stu)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用一个函数，函数的参数为空接口；</span></span><br><span class="line"><span class="comment">// 空接口没有方法，可以视为所有类型都实现了空接口。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testReflect</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="comment">// 1.调用TypeOf函数，返回reflect.Type类型</span></span><br><span class="line">reType := reflect.TypeOf(i)</span><br><span class="line">fmt.Println(<span class="string">&quot;reType:&quot;</span>, reType)</span><br><span class="line">reValue := reflect.ValueOf(i)</span><br><span class="line">fmt.Println(<span class="string">&quot;Value:&quot;</span>, reValue)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取变量类别(类别比 类型的范围要大一些)</span></span><br><span class="line">k1 := reType.Kind()  <span class="comment">// 方式一</span></span><br><span class="line">k2 := reValue.Kind() <span class="comment">// 方式二</span></span><br><span class="line">fmt.Println(k1, k2, k1 == k2, <span class="string">&quot;look this.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原路返回</span></span><br><span class="line"><span class="comment">// reValue 转为空接口(其实是转为保管在空接口中的类型)：</span></span><br><span class="line">i2 := reValue.Interface()</span><br><span class="line"><span class="comment">// 利用断言，看看能不能转为int类型。</span></span><br><span class="line">n, flag := i2.(Student)</span><br><span class="line"><span class="keyword">if</span> flag == <span class="literal">true</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;名字是：%v,年龄是：%v&quot;</span>, n.Name, n.Age)</span><br><span class="line"><span class="comment">// 获取变量类型</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;\n类型是:%T&quot;</span>, n)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 对基础数据类型进行反射</span></span><br><span class="line"><span class="keyword">var</span> num <span class="type">int</span> = <span class="number">100</span></span><br><span class="line">testReflect(num)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对结构体反射</span></span><br><span class="line">stu := Student&#123;</span><br><span class="line">Name: <span class="string">&quot;丽丽&quot;</span>,</span><br><span class="line">Age:  <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line">testReflect(stu)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过反射修改变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用一个函数，函数的参数为空接口；</span></span><br><span class="line"><span class="comment">// 空接口没有方法，可以视为所有类型都实现了空接口。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testReflect</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">reValue := reflect.ValueOf(i)</span><br><span class="line">fmt.Println(<span class="string">&quot;Value:&quot;</span>, reValue)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过Elen \SetInt 来改变值：</span></span><br><span class="line"><span class="comment">// SetInt 设置v的持有值。如果v的Kind不是Int、Int8、Int16、Int32、Int64之一或者v.CanSet()返回假，会panic。</span></span><br><span class="line"><span class="comment">// Elem Elem返回v持有的接口保管的值的Value封装，或者v持有的指针指向的值的Value封装。如果v的Kind不是Interface或Ptr会panic；如果v持有的值为nil，会返回Value零值。</span></span><br><span class="line">reValue.Elem().SetInt(<span class="number">101</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> num <span class="type">int</span> = <span class="number">100</span></span><br><span class="line">testReflect(&amp;num) <span class="comment">// 想要改变值 ，要传递指针。</span></span><br><span class="line">fmt.Println(num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Student)</span></span> CPrint() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;调用print方法，学生名字是：&quot;</span>, s.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Student)</span></span> AGetSum(n1, n2 <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n1 + n2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Student)</span></span> BSet(name <span class="type">string</span>, age <span class="type">int</span>) &#123;</span><br><span class="line">s.Name = name</span><br><span class="line">s.Age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个函数来 操作结构体 进行反射操作</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestStudentStruct</span><span class="params">(a <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="comment">// 将a转成 reflect 的value 类型</span></span><br><span class="line">val := reflect.ValueOf(a)</span><br><span class="line">fmt.Println(val)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作结构体内部字段</span></span><br><span class="line">n1 := val.NumField()</span><br><span class="line">fmt.Println(<span class="string">&quot;结构体内部字段数为：&quot;</span>, n1)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n1; i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;第%d个字段的值是：%v\n&quot;</span>, i, val.Field(i))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作结构体内部方法</span></span><br><span class="line">n2 := val.NumMethod()</span><br><span class="line">fmt.Println(n2)</span><br><span class="line"><span class="comment">// value 的 method 只能访问到 外部能访问的方法，也就是首字母大写的。</span></span><br><span class="line">val.Method(<span class="number">2</span>).Call(<span class="literal">nil</span>) <span class="comment">//Call 的参数就是 结构体对应方法 输入的参数，上面的正好没有参数。</span></span><br><span class="line"><span class="comment">// 定义Value 的切片,也就是一个切片，元素都是 reflect的Value类型。</span></span><br><span class="line"><span class="keyword">var</span> params []reflect.Value</span><br><span class="line">params = <span class="built_in">append</span>(params, reflect.ValueOf(<span class="number">10</span>))</span><br><span class="line">params = <span class="built_in">append</span>(params, reflect.ValueOf(<span class="number">20</span>))</span><br><span class="line">result := val.Method(<span class="number">0</span>).Call(params) <span class="comment">// Method 按照 ASCII 码取方法。 </span></span><br><span class="line">fmt.Println(<span class="string">&quot;返回值是：&quot;</span>, result[<span class="number">0</span>], result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := Student&#123;</span><br><span class="line">Name: <span class="string">&quot;丽丽&quot;</span>,</span><br><span class="line">Age:  <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">TestStudentStruct(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Student)</span></span> CPrint() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;调用print方法，学生名字是：&quot;</span>, s.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Student)</span></span> AGetSum(n1, n2 <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n1 + n2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Student)</span></span> BSet(name <span class="type">string</span>, age <span class="type">int</span>) &#123;</span><br><span class="line">s.Name = name</span><br><span class="line">s.Age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个函数来 操作结构体 进行反射操作</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestStudentStruct</span><span class="params">(a <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="comment">// 将a转成 reflect 的value 类型</span></span><br><span class="line">val := reflect.ValueOf(a)</span><br><span class="line">fmt.Println(val)</span><br><span class="line"></span><br><span class="line">n := val.Elem().NumField()</span><br><span class="line">fmt.Println(n)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改字段的值</span></span><br><span class="line">val.Elem().Field(<span class="number">0</span>).SetString(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := Student&#123;</span><br><span class="line">Name: <span class="string">&quot;丽丽&quot;</span>,</span><br><span class="line">Age:  <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">TestStudentStruct(&amp;s) <span class="comment">// 修改 要传 指针。</span></span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="协程管道练习"><a href="#协程管道练习" class="headerlink" title="协程管道练习"></a>协程管道练习</h1><p><img src="/2025/01/01/go%E5%AD%A6%E4%B9%A0/go%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2023-09-18%2010.44.04.jpg" alt="截屏2023-09-18 10.44.04"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> intChan <span class="keyword">chan</span> <span class="type">int</span> = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> printChan <span class="keyword">chan</span> <span class="type">int</span> = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">10000</span>)</span><br><span class="line"><span class="keyword">var</span> exitChan <span class="keyword">chan</span> <span class="type">bool</span> = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>, <span class="number">8</span>)</span><br><span class="line"><span class="keyword">go</span> initChan(<span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= <span class="number">8</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> isPrime(intChan, printChan, exitChan)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">8</span>; i++ &#123;</span><br><span class="line">&lt;-exitChan</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(printChan) <span class="comment">// 在这里关闭 上面的存放输出数据的管道。</span></span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">res, ok := &lt;-printChan</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;素数是：&quot;</span>, res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initChan</span><span class="params">(num <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; num; i++ &#123;</span><br><span class="line">intChan &lt;- i</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(intChan) <span class="comment">// 写完后，不关闭掉，再读的时候可能有死锁问题。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPrime</span><span class="params">(intChan <span class="keyword">chan</span> <span class="type">int</span>, printChan <span class="keyword">chan</span> <span class="type">int</span>, exitChan <span class="keyword">chan</span> <span class="type">bool</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> flag <span class="type">bool</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">num, ok := &lt;-intChan</span><br><span class="line">flag = <span class="literal">true</span></span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j := <span class="number">2</span>; j &lt; num; j++ &#123;</span><br><span class="line"><span class="keyword">if</span> num%j == <span class="number">0</span> &#123;</span><br><span class="line">flag = <span class="literal">false</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> flag &#123;</span><br><span class="line">printChan &lt;- num</span><br><span class="line"><span class="comment">// fmt.Println(num, &quot;是素数.&quot;)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">exitChan &lt;- <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="label-和-select-管道"><a href="#label-和-select-管道" class="headerlink" title="label 和 select 管道"></a>label 和 select 管道</h2><p>​管道写完都要 close，不然读的时候可能会死锁错误，如果不想总是用这个 锁，”每次操作管道”都要使用 label 配合 select 选择管道，select 的default 返回值 赋值给了label。</p><p><code>label: for &#123;select &#123;case := &lt;-chanName:</code><br><code> case := &lt;-chanName2:</code><br><code> default returnValue &#125;&#125;</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> intChan <span class="keyword">chan</span> <span class="type">int</span> = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> printChan <span class="keyword">chan</span> <span class="type">int</span> = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">10000</span>)</span><br><span class="line"><span class="keyword">var</span> exitChan <span class="keyword">chan</span> <span class="type">bool</span> = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>, <span class="number">8</span>)</span><br><span class="line"><span class="keyword">go</span> initChan(<span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= <span class="number">8</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> isPrime(intChan, printChan, exitChan)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">8</span>; i++ &#123;</span><br><span class="line">&lt;-exitChan</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用 label 配合 select 不再用 close关闭管道。</span></span><br><span class="line"><span class="comment">//close(printChan) // 在这里关闭 上面的存放输出数据的管道。</span></span><br><span class="line">&#125;()</span><br><span class="line">label:</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> res := &lt;-printChan:</span><br><span class="line">fmt.Println(<span class="string">&quot;素数是：&quot;</span>, res)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span> label</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initChan</span><span class="params">(num <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; num; i++ &#123;</span><br><span class="line">intChan &lt;- i</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(intChan) <span class="comment">// 写完后，不关闭掉，再读的时候可能有死锁问题。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPrime</span><span class="params">(intChan <span class="keyword">chan</span> <span class="type">int</span>, printChan <span class="keyword">chan</span> <span class="type">int</span>, exitChan <span class="keyword">chan</span> <span class="type">bool</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> flag <span class="type">bool</span></span><br><span class="line">label:</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> num := &lt;-intChan:</span><br><span class="line">flag = <span class="literal">true</span></span><br><span class="line"><span class="keyword">for</span> j := <span class="number">2</span>; j &lt; num; j++ &#123;</span><br><span class="line"><span class="keyword">if</span> num%j == <span class="number">0</span> &#123;</span><br><span class="line">flag = <span class="literal">false</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> flag &#123;</span><br><span class="line">printChan &lt;- num</span><br><span class="line"><span class="comment">// fmt.Println(num, &quot;是素数.&quot;)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span> label</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;协程已经结束&quot;</span>)</span><br><span class="line">exitChan &lt;- <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/01/01/go%E5%AD%A6%E4%B9%A0/go%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2023-09-19%2011.15.44.jpg" alt="截屏2023-09-19 11.15.44"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println()</span><br><span class="line">storageChan := <span class="built_in">make</span>(<span class="keyword">chan</span> Product, <span class="number">100</span>)</span><br><span class="line">shopChan := <span class="built_in">make</span>(<span class="keyword">chan</span> Product, <span class="number">100</span>)</span><br><span class="line">exitChan := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment">// 通过一个循环 开启多协程。</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">9</span>; i++ &#123; <span class="comment">// 但是这样一开以后，九个都会往管道写，每个都从10 开始循环，所以会被多个10填满管道。</span></span><br><span class="line"><span class="keyword">go</span> Producer(storageChan, <span class="number">10</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// go Producer(storageChan, 10)</span></span><br><span class="line"><span class="keyword">go</span> Logistics(storageChan, shopChan)</span><br><span class="line"><span class="keyword">go</span> Consumer(shopChan, <span class="number">10</span>, exitChan)</span><br><span class="line"><span class="keyword">if</span> &lt;-exitChan &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Product <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// storageChan 是只写。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Producer</span><span class="params">(storageChan <span class="keyword">chan</span>&lt;- Product, count <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">producer := Product&#123;<span class="string">&quot;商品：&quot;</span> + strconv.Itoa(count)&#125;</span><br><span class="line">storageChan &lt;- producer</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">count--</span><br><span class="line">fmt.Println(<span class="string">&quot;生产了，&quot;</span>, producer)</span><br><span class="line"><span class="keyword">if</span> count &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// storageChan 是只读。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Logistics</span><span class="params">(storageChan &lt;-<span class="keyword">chan</span> Product, shopChan <span class="keyword">chan</span>&lt;- Product)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">product := &lt;-storageChan</span><br><span class="line">shopChan &lt;- product</span><br><span class="line">fmt.Println(<span class="string">&quot;运输了，&quot;</span>, product)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Consumer</span><span class="params">(shopChan &lt;-<span class="keyword">chan</span> Product, count <span class="type">int</span>, exitChan <span class="keyword">chan</span>&lt;- <span class="type">bool</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">product := &lt;-shopChan</span><br><span class="line">fmt.Println(<span class="string">&quot;消费了，&quot;</span>, product)</span><br><span class="line">count--</span><br><span class="line"><span class="keyword">if</span> count &lt; <span class="number">1</span> &#123;</span><br><span class="line">exitChan &lt;- <span class="literal">true</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="管道定时任务应用"><a href="#管道定时任务应用" class="headerlink" title="管道定时任务应用"></a>管道定时任务应用</h2><p>第一类：定时任务，类似延时消息队列。</p><p>第二类：周期性执行某个任务，类似定期同步某些数据。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定时任务</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> flag <span class="type">bool</span> = isStopTimer()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;当前时间&quot;</span>, time.Now())</span><br><span class="line"><span class="comment">// 方式一</span></span><br><span class="line">timer := time.NewTicker(time.Second * <span class="number">3</span>)</span><br><span class="line"><span class="keyword">if</span> flag &#123;</span><br><span class="line">timer.Stop()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">t := &lt;-timer.C</span><br><span class="line">fmt.Println(t)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line"><span class="comment">// t := &lt;-time.After(time.Second * 3)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isStopTimer</span><span class="params">()</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line">tempInt := rand.Intn(<span class="number">2</span>) + <span class="number">18</span></span><br><span class="line"><span class="keyword">if</span> tempInt &gt;= <span class="number">18</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;已经找到了大于18，结束。&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 周期任务</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> count <span class="type">int</span> = <span class="number">0</span></span><br><span class="line">ticker := time.NewTicker(time.Second * <span class="number">1</span>) <span class="comment">// 定时器，定时间间隔。</span></span><br><span class="line"><span class="comment">// 协程调用一个匿名函数，不停的输出定时器 管道中的时间，在&gt;3时停下计时器。</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">t := &lt;-ticker.C</span><br><span class="line">fmt.Println(<span class="string">&quot;时间:&quot;</span>, t.Format(<span class="string">&quot;2003-01-02 03:04:05PM&quot;</span>))</span><br><span class="line">count++</span><br><span class="line"><span class="keyword">if</span> count &gt; <span class="number">3</span> &#123;</span><br><span class="line">ticker.Stop()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// for &#123;</span></span><br><span class="line"><span class="comment">// t := &lt;-ticker.C</span></span><br><span class="line"><span class="comment">// fmt.Println(&quot;时间:&quot;, t.Format(&quot;2003-01-02 03:04:05PM&quot;))</span></span><br><span class="line"><span class="comment">// count++</span></span><br><span class="line"><span class="comment">// if count &gt; 3 &#123;</span></span><br><span class="line"><span class="comment">// ticker.Stop()</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//在第一个示例中，ticker.Stop() 是在协程内部执行的，当 count 大于 3 时，</span></span><br><span class="line"><span class="comment">// 它会停止计时器。这样，</span></span><br><span class="line"><span class="comment">// 协程内的 for 循环会因为 ticker.C 的通道关闭而结束，</span></span><br><span class="line"><span class="comment">// 从而协程退出，程序继续执行后续代码，不会发生死锁。</span></span><br><span class="line"><span class="comment">// 而在第二个示例中，ticker.Stop() 是在主函数内部执行的，</span></span><br><span class="line"><span class="comment">// 但 for 循环仍然在继续从 ticker.C 接收时间值。</span></span><br><span class="line"><span class="comment">// 当 ticker.Stop() 被调用后，ticker.C 通道会被关闭，</span></span><br><span class="line"><span class="comment">// 但由于 for 循环仍在尝试从已关闭的通道中接收数据，会导致死锁错误。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">time.Sleep(time.Second * <span class="number">10</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;游戏结束&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> count <span class="type">int</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> waitGroup sync.WaitGroup <span class="comment">// 有点像 别的语言的进程池的意思。但是控制的协程。</span></span><br><span class="line"><span class="comment">// 用于向 WaitGroup 中添加指定数量的等待任务。</span></span><br><span class="line"><span class="comment">// 通常在启动 goroutine 之前调用，表示有多少个任务需要等待完成。</span></span><br><span class="line">waitGroup.Add(<span class="number">1</span>)</span><br><span class="line">ticker := time.NewTicker(time.Second * <span class="number">1</span>) <span class="comment">// 定时器，定时间间隔。</span></span><br><span class="line"><span class="comment">// 协程调用一个匿名函数，不停的输出定时器 管道中的时间，在&gt;3时停下计时器。</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> ticker.Stop()    <span class="comment">// 关闭定时器 的管道。</span></span><br><span class="line"><span class="keyword">defer</span> waitGroup.Done() <span class="comment">// 书写的好习惯。表示一个协程任务已经完成。</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">t := &lt;-ticker.C</span><br><span class="line">fmt.Println(<span class="string">&quot;时间:&quot;</span>, t.Format(<span class="string">&quot;2003-01-02 03:04:05PM&quot;</span>))</span><br><span class="line">count++</span><br><span class="line"><span class="keyword">if</span> count &gt; <span class="number">3</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="comment">// 此时退出方法，进入defer的语句运行。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">time.Sleep(time.Second * <span class="number">5</span>)</span><br><span class="line">waitGroup.Wait() <span class="comment">// 结束协程池</span></span><br><span class="line">fmt.Println(<span class="string">&quot;游戏结束&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> count <span class="type">int</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> waitGroup sync.WaitGroup <span class="comment">// 有点像 别的语言的进程池的意思。但是控制的协程。</span></span><br><span class="line"><span class="comment">// 用于向 WaitGroup 中添加指定数量的等待任务。</span></span><br><span class="line"><span class="comment">// 通常在启动 goroutine 之前调用，表示有多少个任务需要等待完成。</span></span><br><span class="line">waitGroup.Add(<span class="number">1</span>)</span><br><span class="line">ticker := time.NewTicker(time.Second * <span class="number">1</span>) <span class="comment">// 定时器，定时间间隔。</span></span><br><span class="line"><span class="comment">// 协程调用一个匿名函数，不停的输出定时器 管道中的时间，在&gt;3时停下计时器。</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> ticker.Stop()    <span class="comment">// 关闭定时器 的管道。</span></span><br><span class="line"><span class="keyword">defer</span> waitGroup.Done() <span class="comment">// 书写的好习惯。表示一个协程任务已经完成。</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">t := &lt;-ticker.C</span><br><span class="line">fmt.Println(<span class="string">&quot;ticker 时间:&quot;</span>, t.Format(<span class="string">&quot;2003-01-02 03:04:05PM&quot;</span>))</span><br><span class="line">count++</span><br><span class="line"><span class="keyword">if</span> count &gt; <span class="number">2</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="comment">// 此时退出方法，进入defer的语句运行。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> countA <span class="type">int</span> = <span class="number">0</span></span><br><span class="line">timer := time.NewTimer(time.Second * <span class="number">1</span>) <span class="comment">//单次触发的定时器，即定时器触发一次后就停止。</span></span><br><span class="line"><span class="comment">// 协程调用一个匿名函数，不停的输出定时器 管道中的时间，在&gt;3时停下计时器。</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> timer.Stop()     <span class="comment">// 关闭定时器 的管道。</span></span><br><span class="line"><span class="keyword">defer</span> waitGroup.Done() <span class="comment">// 书写的好习惯。表示一个协程任务已经完成。</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">t := &lt;-ticker.C</span><br><span class="line">fmt.Println(<span class="string">&quot;timer 时间:&quot;</span>, t.Format(<span class="string">&quot;2003-01-02 03:04:05PM&quot;</span>))</span><br><span class="line"><span class="comment">// 重新设置定时器 timer，使其在1秒后触发。这意味着原来的定时器计时将被取消，</span></span><br><span class="line"><span class="comment">// 并在调用 Reset 后重新开始计时，1秒后触发。</span></span><br><span class="line">timer.Reset(time.Second)</span><br><span class="line">countA++</span><br><span class="line"><span class="keyword">if</span> countA &gt; <span class="number">3</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="comment">// 此时退出方法，进入defer的语句运行。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">time.Sleep(time.Second * <span class="number">5</span>)</span><br><span class="line">waitGroup.Wait() <span class="comment">// 结束协程池</span></span><br><span class="line">fmt.Println(<span class="string">&quot;游戏结束&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="go笔记" scheme="http://example.com/categories/go%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="go" scheme="http://example.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7 更新baseurl_for_repo</title>
    <link href="http://example.com/2024/12/25/Linux%E5%AD%A6%E4%B9%A0/CentOS%207%20%E6%9B%B4%E6%96%B0baseurl_for_repo/"/>
    <id>http://example.com/2024/12/25/Linux%E5%AD%A6%E4%B9%A0/CentOS%207%20%E6%9B%B4%E6%96%B0baseurl_for_repo/</id>
    <published>2024-12-25T04:23:07.000Z</published>
    <updated>2024-12-25T03:48:50.250Z</updated>
    
    <content type="html"><![CDATA[<p>简介 <span id="more"></span></p><p>在centos7 中运行 yum 相关操作遇到报错</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[CentOS 7 Cannot find a valid baseurl <span class="keyword">for</span> repo: base/7/x86_64 when I run yum update]</span><br></pre></td></tr></table></figure><p>其实就是 centos7 太老了。</p><p>解决方法</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak</span><br><span class="line"></span><br><span class="line">sudo vim /etc/yum.repos.d/CentOS-Base.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># And comment out all the mirrorlist lines.</span></span><br><span class="line"><span class="comment"># And uncomment all the baseurl lines.</span></span><br><span class="line"><span class="comment"># For CentOS version 8 and below you will also need to change `mirror.centos` to `vault.centos` in the baseurl lines as they are deprecated.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 就是注释掉mirro 列，打开 baseurl列，然后把mirror.centos都改成 vault.centos。</span></span><br></pre></td></tr></table></figure><blockquote><p>参考：</p><p><a href="https://superuser.com/questions/1373881/centos-7-cannot-find-a-valid-baseurl-for-repo-base-7-x86-64-when-i-run-yum-upda">https://superuser.com/questions/1373881/centos-7-cannot-find-a-valid-baseurl-for-repo-base-7-x86-64-when-i-run-yum-upda</a></p></blockquote>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="centos" scheme="http://example.com/tags/centos/"/>
    
    <category term="yum" scheme="http://example.com/tags/yum/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu装clash</title>
    <link href="http://example.com/2024/12/16/windows_ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/Ubuntu%E8%A3%85clash/"/>
    <id>http://example.com/2024/12/16/windows_ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/Ubuntu%E8%A3%85clash/</id>
    <published>2024-12-16T13:09:57.000Z</published>
    <updated>2024-12-17T02:27:03.337Z</updated>
    
    <content type="html"><![CDATA[<p>简介 <span id="more"></span></p><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>Github 上的 clash 官方仓库已经删库跑路，本文介绍的是一个目前可行的解决方案。</p><p>在 <a href="https://github.com/doreamon-design/clash/releases">https://github.com/doreamon-design/clash/releases</a> 下载与自己系统架构符合的安装包。一般选择 <code>[clash_2.0.24_linux_amd64.tar.gz](https://github.com/doreamon-design/clash/releases/download/v2.0.24/clash_2.0.24_linux_amd64.tar.gz)</code>。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">gzip -d clash_2.0.24_linux_amd64.tar.gz <span class="comment"># 在安装包所在路径解压安装包</span></span><br><span class="line"><span class="built_in">chmod</span> +x clash_2.0.24_linux_amd64.tar.gz <span class="comment"># 给解压后的文件赋予执行权限</span></span><br><span class="line"><span class="built_in">mv</span> clash_2.0.24_linux_amd64 /usr/local/bin/clash <span class="comment"># 移动文件位置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一、 把clash_2.0.24_linux_amd64文件夹中 clash执行文件和 license 移动到 /usr/local/bin/clash</span></span><br><span class="line"><span class="comment"># 二、 在bashrc 或者 zshrc 中 把 /usr/local/bin/clash 加入到环境变量路径。</span></span><br><span class="line"><span class="comment"># 三、如果缺少MMDB文件：</span></span><br><span class="line"><span class="comment">#    下载 Country.mmdb 文件： 在另一台可以访问网络的设备上，手动下载 Country.mmdb 文件：</span></span><br><span class="line"><span class="comment">#    URL: https://cdn.jsdelivr.net/gh/Dreamacro/maxmind-geoip@release/Country.mmdb</span></span><br><span class="line"><span class="comment">#    将文件复制到 Clash 的配置目录：  ~/.config/clash/</span></span><br><span class="line"></span><br><span class="line">clash -v <span class="comment"># 查看是否成功安装</span></span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">clash <span class="comment"># 启动 Clash，生成 ~/.config/clash/config.yaml 文件</span></span><br><span class="line"><span class="built_in">cd</span> ~/.config/clash/ <span class="comment"># 进入目录配置文件</span></span><br><span class="line">wget -O config.yaml 订阅地址 <span class="comment"># 把订阅地址的配置文件导入本地配置文件</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;export http_proxy=http://127.0.0.1:7890\nexport https_proxy=http://127.0.0.1:7890&quot;</span> &gt;&gt; ~/.bashrc <span class="comment"># 配置环境变量</span></span><br></pre></td></tr></table></figure><h1 id="修改系统代理"><a href="#修改系统代理" class="headerlink" title="修改系统代理"></a>修改系统代理</h1><p><img src="/2024/12/16/windows_ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/Ubuntu%E8%A3%85clash/%E6%88%AA%E5%B1%8F2024-12-16%2019.04.22.jpg" alt="截屏2024-12-16 19.04.22"></p><h1 id="进入界面"><a href="#进入界面" class="headerlink" title="进入界面"></a>进入界面</h1><p>启动后在打开  <a href="http://clash.razord.top/#/settings">http://clash.razord.top/#/settings</a>  进入节点管理的 UI 页面。</p><p><img src="/2024/12/16/windows_ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/Ubuntu%E8%A3%85clash/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241216191308.jpg" alt="微信图片_20241216191308"></p><h1 id="可以科学上网了"><a href="#可以科学上网了" class="headerlink" title="可以科学上网了"></a>可以科学上网了</h1><p><img src="/2024/12/16/windows_ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/Ubuntu%E8%A3%85clash/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241216191357.jpg" alt="微信图片_20241216191357"></p><p>参考：<a href="https://eaglebear2002.github.io/%E6%8A%80%E6%9C%AF%E7%A7%91%E6%99%AE/Ubuntu%2022.04%20%E5%AE%89%E8%A3%85%20Clash/">https://eaglebear2002.github.io/%E6%8A%80%E6%9C%AF%E7%A7%91%E6%99%AE/Ubuntu%2022.04%20%E5%AE%89%E8%A3%85%20Clash/</a></p>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="windows_ubuntu双系统" scheme="http://example.com/categories/windows-ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="ubuntu" scheme="http://example.com/tags/ubuntu/"/>
    
    <category term="clash" scheme="http://example.com/tags/clash/"/>
    
  </entry>
  
  <entry>
    <title>pytorch的多GPU训练</title>
    <link href="http://example.com/2024/11/07/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/pytorch%E7%9A%84%E5%A4%9AGPU%E8%AE%AD%E7%BB%83/"/>
    <id>http://example.com/2024/11/07/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/pytorch%E7%9A%84%E5%A4%9AGPU%E8%AE%AD%E7%BB%83/</id>
    <published>2024-11-07T08:58:30.000Z</published>
    <updated>2024-11-11T00:46:05.047Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单机多卡"><a href="#单机多卡" class="headerlink" title="单机多卡"></a>单机多卡</h1><h2 id="DP（被淘汰）"><a href="#DP（被淘汰）" class="headerlink" title="DP（被淘汰）"></a>DP（被淘汰）</h2><p><strong>torch.nn.DataParallel</strong></p><ul><li>简单一行代码 ，封装model即可。<code>model = DataParallel(model.cuda(),device_ids=[0,1,23] ) </code>;</li><li>模型保存与加载；由于被封装以后，model已经是一个DataParallel，所以 torch.save 调用 <code>model.module.state_dict()</code> ,<code>torch.load </code>注意 <code>map_location </code>;</li><li>缺点-（单进程，效率低）；</li><li>缺点- （不支持多机器）；</li><li>缺点-（不支持模型并行）；</li><li><code>batch_size </code>改成每个GPU <code>batch_size</code> 总和；</li></ul><h2 id="DDP-推荐"><a href="#DDP-推荐" class="headerlink" title="DDP (推荐)"></a>DDP (推荐)</h2><p> **torch.nn.parallel.DistributedDataParallel **</p><ul><li><p>多进程</p></li><li><p>初始化进程组<code> torch.distributed.init_process_group(&quot;nccl&quot;,world_size=n_gpus,rank=args.local_rank)</code></p></li><li><p>指定当前进程使用哪一张 GPU 卡</p><p> <code>torch.cuda.set_device(args.local_rank)</code> 相当于 CUDA_VISIBLE_DEVICES 环境变量</p></li><li><p>模型封装<br>(模型先转移到某一张 GPU卡上，然后再被ddp封装，注意是<code>device_ids</code>指定一张卡就好了，一个进程一张卡。) <code>model = DistributedDataParallel(model.cuda(args.local_rank),device_ids=[args.local_rank])</code></p></li><li><p>将数据分布式分配到GPU上，给出一个训练顺序</p><p><code>train_sampler = DistributedSampler(train_dataset)</code><br>最好读一读 源码 <code>torch/util/data/distributed.py</code></p></li><li><p>每个周期开始前，调用<code>train_sampler.set_epoch(epoch)</code> 打乱数据</p></li><li><p>有了 <code>sampler</code> 就不需要在 <code>DataLoader </code>设置<code>shuffle=True</code></p></li><li><p>将<code>train_sampler</code>传入 <code>train_dataloader</code> 中</p><p><code>train_dataloader = DataLoader(...,sampler=train_sampler)</code></p></li><li><p>数据拷贝到GPU卡</p><p><code>data = data.cuda(args.local_rank)</code></p></li><li><p>执行命令</p><p>(定一个节点上用几张卡)</p><p><code>python -m torch.distributed.launch --nproc_per_node=n_gpus train.py</code></p><p><code>torch.distributed.launch</code> 会定多少个进程，根据前面传入的 节点内卡的数量,launch这个进程会向 每一个 train.py 传入  local_rank。</p></li><li><p>模型保存和加载</p><p><code>torch.save</code>在<code>local_rank=0</code> 的位置进行保存，同样注意调用<code> model.module.state_dict()</code></p><p><code>torch.load</code>注意<code>map_location</code></p></li><li><p>每一个进程所需要的 <code>batch_size</code> 应该是每一个 GPU所需要的 <code>batch_size</code>大小</p></li></ul><h1 id="DDP例子"><a href="#DDP例子" class="headerlink" title="DDP例子"></a>DDP例子</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> torch.distributed <span class="keyword">as</span> dist</span><br><span class="line"><span class="keyword">from</span> torch.nn.parallel <span class="keyword">import</span> DistributedDataParallel <span class="keyword">as</span> DDP</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset, DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.data.distributed <span class="keyword">import</span> DistributedSampler</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="comment"># torch.distributed: 用于分布式训练的主要模块</span></span><br><span class="line"><span class="comment"># DistributedDataParallel: 用于模型的分布式封装</span></span><br><span class="line"><span class="comment"># DistributedSampler: 用于数据的分布式采样</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里创建了一个模拟数据集：</span></span><br><span class="line"><span class="comment"># 生成随机的3通道32x32图像</span></span><br><span class="line"><span class="comment"># 生成0-9之间的随机标签</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomDataset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, size=<span class="number">1000</span></span>):</span><br><span class="line">        self.size = size</span><br><span class="line">        self.data = torch.randn(size, <span class="number">3</span>, <span class="number">32</span>, <span class="number">32</span>)  <span class="comment"># 模拟图像数据</span></span><br><span class="line">        self.labels = torch.randint(<span class="number">0</span>, <span class="number">10</span>, (size,))</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.size</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, idx</span>):</span><br><span class="line">        <span class="keyword">return</span> self.data[idx], self.labels[idx]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个简单的卷积神经网络：</span></span><br><span class="line"><span class="comment"># 特征提取部分：两个卷积层，每个后面跟ReLU和池化</span></span><br><span class="line"><span class="comment"># 分类器部分：两个全连接层</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConvNet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(ConvNet, self).__init__()</span><br><span class="line">        self.features = nn.Sequential(</span><br><span class="line">            nn.Conv2d(<span class="number">3</span>, <span class="number">64</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(<span class="number">64</span>, <span class="number">128</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>)</span><br><span class="line">        )</span><br><span class="line">        self.classifier = nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">128</span> * <span class="number">8</span> * <span class="number">8</span>, <span class="number">512</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(<span class="number">512</span>, <span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.features(x)</span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>), -<span class="number">1</span>)</span><br><span class="line">        x = self.classifier(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分布式设置函数:</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setup_distributed</span>(<span class="params">args</span>):</span><br><span class="line">    <span class="comment"># 可以通过环境变量设置 如果注释 就需要在 终端-m torch.distributed.launch 后指定端口号。</span></span><br><span class="line">    <span class="comment"># os.environ[&#x27;MASTER_PORT&#x27;] = &#x27;29500&#x27;  </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 初始化进程组</span></span><br><span class="line">    torch.distributed.init_process_group(</span><br><span class="line">        backend=<span class="string">&quot;nccl&quot;</span>,         <span class="comment"># 使用NCCL后端，专门优化用于GPU</span></span><br><span class="line">        world_size=args.n_gpus, <span class="comment"># 总GPU数量</span></span><br><span class="line">        rank=args.local_rank    <span class="comment"># 当前进程的rank</span></span><br><span class="line">    ) </span><br><span class="line">    torch.cuda.set_device(args.local_rank) <span class="comment"># 设置当前进程使用的GPU</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cleanup</span>():</span><br><span class="line">    dist.destroy_process_group()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型保存函数:</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_model</span>(<span class="params">model, epoch, optimizer, args</span>):</span><br><span class="line">    <span class="keyword">if</span> args.local_rank == <span class="number">0</span>:  <span class="comment"># 只在主进程保存</span></span><br><span class="line">        checkpoint = &#123;</span><br><span class="line">            <span class="string">&#x27;epoch&#x27;</span>: epoch,</span><br><span class="line">            <span class="string">&#x27;model_state_dict&#x27;</span>: model.module.state_dict(),<span class="comment"># 注意使用model.module获取原始模型参数</span></span><br><span class="line">            <span class="string">&#x27;optimizer_state_dict&#x27;</span>: optimizer.state_dict(),<span class="comment"># 保存优化器状态</span></span><br><span class="line">        &#125;</span><br><span class="line">        save_path = <span class="string">f&#x27;checkpoint_epoch_<span class="subst">&#123;epoch&#125;</span>.pt&#x27;</span></span><br><span class="line">        torch.save(checkpoint, save_path)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;Saved checkpoint to <span class="subst">&#123;save_path&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型加载函数:</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_model</span>(<span class="params">model, optimizer, checkpoint_path, args</span>):</span><br><span class="line">    map_location = &#123;<span class="string">&#x27;cuda:%d&#x27;</span> % <span class="number">0</span>: <span class="string">&#x27;cuda:%d&#x27;</span> % args.local_rank&#125; <span class="comment"># 保模型加载到正确的GPU</span></span><br><span class="line">    checkpoint = torch.load(checkpoint_path, map_location=map_location)</span><br><span class="line">    model.module.load_state_dict(checkpoint[<span class="string">&#x27;model_state_dict&#x27;</span>]) <span class="comment"># 加载模型状态</span></span><br><span class="line">    optimizer.load_state_dict(checkpoint[<span class="string">&#x27;optimizer_state_dict&#x27;</span>]) <span class="comment"># 加载优化器状态</span></span><br><span class="line">    <span class="keyword">return</span> checkpoint[<span class="string">&#x27;epoch&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">args</span>):</span><br><span class="line">    <span class="comment"># 1. 设置分布式环境</span></span><br><span class="line">    setup_distributed(args)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 2. 创建数据集和数据加载器</span></span><br><span class="line">    train_dataset = CustomDataset()</span><br><span class="line">    train_sampler = DistributedSampler(train_dataset)</span><br><span class="line">    </span><br><span class="line">    train_loader = DataLoader(</span><br><span class="line">        train_dataset,</span><br><span class="line">        batch_size=args.batch_size,  <span class="comment"># 这里的batch_size是每个GPU的batch_size</span></span><br><span class="line">        sampler=train_sampler,</span><br><span class="line">        num_workers=<span class="number">4</span>,</span><br><span class="line">        pin_memory=<span class="literal">True</span></span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 3. 创建模型和优化器</span></span><br><span class="line">    model = ConvNet()</span><br><span class="line">    model = model.cuda(args.local_rank)  <span class="comment"># 先移到对应GPU</span></span><br><span class="line">    model = DDP(</span><br><span class="line">        model,</span><br><span class="line">        device_ids=[args.local_rank],</span><br><span class="line">        output_device=args.local_rank</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    criterion = nn.CrossEntropyLoss()</span><br><span class="line">    optimizer = optim.Adam(model.parameters(), lr=<span class="number">0.001</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 4. 如果有检查点，加载模型</span></span><br><span class="line">    start_epoch = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> args.resume <span class="keyword">and</span> os.path.exists(args.checkpoint):</span><br><span class="line">        start_epoch = load_model(model, optimizer, args.checkpoint, args)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 5. 训练循环</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(start_epoch, args.epochs):</span><br><span class="line">        train_sampler.set_epoch(epoch)  <span class="comment"># 确保每个epoch数据被打乱</span></span><br><span class="line">        </span><br><span class="line">        model.train()</span><br><span class="line">        <span class="keyword">for</span> batch_idx, (data, target) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">            <span class="comment"># 数据移到对应GPU</span></span><br><span class="line">            data = data.cuda(args.local_rank, non_blocking=<span class="literal">True</span>)</span><br><span class="line">            target = target.cuda(args.local_rank, non_blocking=<span class="literal">True</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 前向传播</span></span><br><span class="line">            output = model(data)</span><br><span class="line">            loss = criterion(output, target)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 反向传播</span></span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 只在主进程打印信息</span></span><br><span class="line">            <span class="keyword">if</span> batch_idx % args.print_freq == <span class="number">0</span> <span class="keyword">and</span> args.local_rank == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;Epoch: <span class="subst">&#123;epoch&#125;</span>/<span class="subst">&#123;args.epochs&#125;</span>, &#x27;</span></span><br><span class="line">                      <span class="string">f&#x27;Batch: <span class="subst">&#123;batch_idx&#125;</span>/<span class="subst">&#123;<span class="built_in">len</span>(train_loader)&#125;</span>, &#x27;</span></span><br><span class="line">                      <span class="string">f&#x27;Loss: <span class="subst">&#123;loss.item():<span class="number">.4</span>f&#125;</span>&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 每个epoch结束后保存模型</span></span><br><span class="line">        save_model(model, epoch, optimizer, args)</span><br><span class="line">    </span><br><span class="line">    cleanup()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--local_rank&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=-<span class="number">1</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--n_gpus&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">4</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--batch_size&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">32</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--epochs&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">10</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--print_freq&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">10</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--resume&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--checkpoint&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    </span><br><span class="line">    train(args)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>在终端输入</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">python -m torch.distributed.launch \</span><br><span class="line">    --nproc_per_node=4 \</span><br><span class="line">    --master_port=29500 \</span><br><span class="line">    train.py \</span><br><span class="line">    --n_gpus=4 \</span><br><span class="line">    --batch_size=32 \</span><br><span class="line">    --epochs=10</span><br></pre></td></tr></table></figure><blockquote><p>找到 PyTorch 安装目录中的 distributed&#x2F;launch.py<br>执行这个启动器脚本<br>启动器会创建多个进程来运行 train.py<br><code>-m</code> 表示将一个模块作为脚本运行，python a.py arg1 b.py arg2 c.py arg3 经常这样用。</p><p>命令行参数解释：</p><ul><li><code>--nproc_per_node=4</code>: 使用4个GPU</li><li><code>--master_port=29500</code>: 指定主进程端口</li><li><code>--n_gpus=4</code>: 总GPU数量</li><li><code>--batch_size=32</code>: 每个GPU的batch size</li><li><code>--epochs=10</code>: 训练轮数</li></ul></blockquote><h1 id="一个我经常用的例子"><a href="#一个我经常用的例子" class="headerlink" title="一个我经常用的例子"></a>一个我经常用的例子</h1><p>这个是做 环境部署和GPU性能检测的。<img src="/2024/11/07/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/pytorch%E7%9A%84%E5%A4%9AGPU%E8%AE%AD%E7%BB%83/ddp.jpg" alt="ddp"></p><p><code>ddp5_env_check.py</code>  </p><blockquote><p>他会检测 驱动 torch conda等情况，并用此脚本文件夹中图片做多GPU测试。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> torch.distributed <span class="keyword">as</span> dist</span><br><span class="line"><span class="keyword">import</span> torch.multiprocessing <span class="keyword">as</span> mp</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> models, transforms</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torchvision.models <span class="keyword">import</span> ResNet50_Weights</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="comment"># from tqdm import tqdm</span></span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset, DataLoader, DistributedSampler</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查并安装 tqdm</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">install_tqdm</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">import</span> tqdm</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;tqdm 已安装，不需要重复安装。&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> ModuleNotFoundError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;tqdm 未安装，正在使用 pip 自动安装...&quot;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            subprocess.check_call([<span class="string">f&quot;<span class="subst">&#123;os.getenv(<span class="string">&#x27;CONDA_PREFIX&#x27;</span>)&#125;</span>/bin/pip&quot;</span>, <span class="string">&quot;install&quot;</span>, <span class="string">&quot;tqdm&quot;</span>, <span class="string">&quot;-i&quot;</span>, <span class="string">&quot;https://pypi.tuna.tsinghua.edu.cn/simple&quot;</span>])</span><br><span class="line">            <span class="keyword">import</span> tqdm</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;tqdm 安装成功！&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;tqdm 安装失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查系统信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">system_info</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;系统信息:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;操作系统: <span class="subst">&#123;platform.system()&#125;</span> <span class="subst">&#123;platform.release()&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> platform.system() == <span class="string">&#x27;Linux&#x27;</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/etc/os-release&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&quot;PRETTY_NAME&quot;</span> <span class="keyword">in</span> line:</span><br><span class="line">                        ubuntu_version = line.split(<span class="string">&quot;=&quot;</span>)[<span class="number">1</span>].strip().strip(<span class="string">&#x27;&quot;&#x27;</span>)</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">f&quot;Ubuntu 版本: <span class="subst">&#123;ubuntu_version&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;无法获取 Ubuntu 版本信息: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Ubuntu 版本: N/A&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Python 版本: <span class="subst">&#123;platform.python_version()&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Conda 虚拟环境: <span class="subst">&#123;os.getenv(<span class="string">&#x27;CONDA_DEFAULT_ENV&#x27;</span>, <span class="string">&#x27;Not in a conda environment&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 PyTorch 和 CUDA 信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pytorch_cuda_info</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;PyTorch 和 CUDA 信息:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;PyTorch 版本: <span class="subst">&#123;torch.__version__&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;CUDA 可用性: <span class="subst">&#123;torch.cuda.is_available()&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;CUDA 版本: <span class="subst">&#123;torch.version.cuda&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;cuDNN 版本: <span class="subst">&#123;torch.backends.cudnn.version()&#125;</span>&quot;</span>)</span><br><span class="line">        gpu_count = torch.cuda.device_count()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;检测到 <span class="subst">&#123;gpu_count&#125;</span> 个 GPU&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(gpu_count):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;GPU <span class="subst">&#123;i&#125;</span> 名称: <span class="subst">&#123;torch.cuda.get_device_name(i)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;CUDA 未启用，请检查 CUDA 安装&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 PyTorch 是否调用了虚拟环境中的版本</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_virtual_env</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在检查是否使用虚拟环境中的 PyTorch 版本...&quot;</span>)</span><br><span class="line">    conda_env = os.getenv(<span class="string">&#x27;CONDA_DEFAULT_ENV&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">if</span> conda_env:</span><br><span class="line">        pytorch_path = torch.__file__</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;PyTorch 安装路径: <span class="subst">&#123;pytorch_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> conda_env <span class="keyword">in</span> pytorch_path:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;PyTorch 来自虚拟环境 &#x27;<span class="subst">&#123;conda_env&#125;</span>&#x27;&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;警告: PyTorch 没有来自当前虚拟环境&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;未在 Conda 虚拟环境中运行&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ImageDataset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, img_paths, transform</span>):</span><br><span class="line">        self.img_paths = img_paths</span><br><span class="line">        self.transform = transform</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.img_paths)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, idx</span>):</span><br><span class="line">        img_path = self.img_paths[idx]</span><br><span class="line">        img = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line">        <span class="keyword">if</span> self.transform:</span><br><span class="line">            img = self.transform(img)</span><br><span class="line">        <span class="keyword">return</span> img, img_path</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">image_computation_test</span>(<span class="params">local_rank, args</span>):</span><br><span class="line">    <span class="comment"># 初始化进程组</span></span><br><span class="line">    torch.cuda.set_device(local_rank)</span><br><span class="line">    dist.init_process_group(backend=<span class="string">&quot;nccl&quot;</span>, </span><br><span class="line">                          init_method=<span class="string">f&quot;env://&quot;</span>,</span><br><span class="line">                          world_size=args.n_gpus,</span><br><span class="line">                          rank=local_rank)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Rank <span class="subst">&#123;local_rank&#125;</span>/<span class="subst">&#123;args.n_gpus&#125;</span> 开始工作...&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 初始化模型</span></span><br><span class="line">    model = models.resnet50(weights=ResNet50_Weights.DEFAULT).cuda(local_rank)</span><br><span class="line">    model = nn.parallel.DistributedDataParallel(model, device_ids=[local_rank])</span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 图片预处理</span></span><br><span class="line">    preprocess = transforms.Compose([</span><br><span class="line">        transforms.Resize(<span class="number">256</span>),</span><br><span class="line">        transforms.CenterCrop(<span class="number">224</span>),</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize(mean=[<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], std=[<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>]),</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建数据集和数据加载器</span></span><br><span class="line">    dataset = ImageDataset(args.img_paths, preprocess)</span><br><span class="line">    sampler = DistributedSampler(dataset)</span><br><span class="line">    dataloader = DataLoader(dataset, </span><br><span class="line">                          batch_size=args.batch_size,</span><br><span class="line">                          sampler=sampler,</span><br><span class="line">                          num_workers=args.num_workers,</span><br><span class="line">                          pin_memory=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    start_time = time.time()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(args.epochs):</span><br><span class="line">        <span class="keyword">if</span> local_rank == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;\nEpoch <span class="subst">&#123;epoch+<span class="number">1</span>&#125;</span>/<span class="subst">&#123;args.epochs&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        sampler.set_epoch(epoch)  <span class="comment"># 确保每个epoch的数据顺序不同</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> img_tensor, img_path <span class="keyword">in</span> dataloader:</span><br><span class="line">            img_tensor = img_tensor.cuda(local_rank)</span><br><span class="line">            iterations = args.iterations</span><br><span class="line">            success = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(iterations), </span><br><span class="line">                            desc=<span class="string">f&quot;Epoch <span class="subst">&#123;epoch+<span class="number">1</span>&#125;</span>, 处理 <span class="subst">&#123;img_path[<span class="number">0</span>]&#125;</span>&quot;</span>, </span><br><span class="line">                            disable=local_rank!=<span class="number">0</span>):</span><br><span class="line">                    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">                        output = model(img_tensor)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;运算失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">                success = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> success:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Rank <span class="subst">&#123;local_rank&#125;</span> 运算结束，处理了 <span class="subst">&#123;iterations&#125;</span> 次图片 &#x27;<span class="subst">&#123;img_path[<span class="number">0</span>]&#125;</span>&#x27;&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Rank <span class="subst">&#123;local_rank&#125;</span> 图片 &#x27;<span class="subst">&#123;img_path[<span class="number">0</span>]&#125;</span>&#x27; 运算失败&quot;</span>)</span><br><span class="line"></span><br><span class="line">    elapsed = time.time() - start_time</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Rank <span class="subst">&#123;local_rank&#125;</span> 总耗时: <span class="subst">&#123;elapsed:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 同步所有进程的时间</span></span><br><span class="line">    elapsed_tensor = torch.tensor([elapsed], device=<span class="string">f&quot;cuda:<span class="subst">&#123;local_rank&#125;</span>&quot;</span>)</span><br><span class="line">    gathered_times = [torch.zeros_like(elapsed_tensor) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(args.n_gpus)]</span><br><span class="line">    dist.all_gather(gathered_times, elapsed_tensor)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> local_rank == <span class="number">0</span>:</span><br><span class="line">        total_time = <span class="built_in">sum</span>(t.item() <span class="keyword">for</span> t <span class="keyword">in</span> gathered_times)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\n并行计算耗时: <span class="subst">&#123;elapsed:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;所有 GPU 总共耗时: <span class="subst">&#123;total_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> rank, time_val <span class="keyword">in</span> <span class="built_in">enumerate</span>(gathered_times):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Rank <span class="subst">&#123;rank&#125;</span> 耗时: <span class="subst">&#123;time_val.item():<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\n总共实际耗时: <span class="subst">&#123;elapsed:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line"></span><br><span class="line">    dist.destroy_process_group()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&#x27;多GPU分布式图像处理测试&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 分布式训练相关参数</span></span><br><span class="line">    <span class="comment"># parser.add_argument(&#x27;--local_rank&#x27;, type=int, default=-1,</span></span><br><span class="line">    <span class="comment">#                     help=&#x27;DDP参数，由torch.distributed.launch自动传入&#x27;)</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--n_gpus&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">1</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;使用的GPU数量&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 数据加载相关参数</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--batch_size&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">1</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;每个GPU的batch size&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--num_workers&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">4</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;数据加载的worker数量&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 训练相关参数</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--epochs&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">1</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;运行的epoch数量&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--iterations&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">8000</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;每张图片的处理迭代次数&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 其他参数</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--seed&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">42</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;随机种子&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    args.local_rank = <span class="built_in">int</span>(os.environ[<span class="string">&quot;LOCAL_RANK&quot;</span>])   <span class="comment"># 将环境变量中的 local_rank 添加到 args</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置随机种子</span></span><br><span class="line">    torch.manual_seed(args.seed)</span><br><span class="line">    <span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">        torch.cuda.manual_seed_all(args.seed)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.local_rank == <span class="number">0</span>:</span><br><span class="line">        install_tqdm()</span><br><span class="line">        system_info()</span><br><span class="line">        pytorch_cuda_info()</span><br><span class="line">        check_virtual_env()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> torch.cuda.is_available():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;没有可用的 GPU，退出。&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.local_rank == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;使用 GPU 数量: <span class="subst">&#123;args.n_gpus&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取所有图片路径</span></span><br><span class="line">    img_paths = glob.glob(<span class="string">&quot;*.jpg&quot;</span>) + glob.glob(<span class="string">&quot;*.png&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> img_paths:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;没有找到任何图片，请检查路径。&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    args.img_paths = img_paths</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 运行计算测试</span></span><br><span class="line">    image_computation_test(args.local_rank, args)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">【使用方法】</span></span><br><span class="line"><span class="string">(淘汰)</span></span><br><span class="line"><span class="string">python -m torch.distributed.launch \</span></span><br><span class="line"><span class="string">    --nproc_per_node=4 \</span></span><br><span class="line"><span class="string">    --master_port=29500 \</span></span><br><span class="line"><span class="string">    script_name.py \</span></span><br><span class="line"><span class="string">    --n_gpus=4 \</span></span><br><span class="line"><span class="string">    --batch_size=32 \</span></span><br><span class="line"><span class="string">    --epochs=10 \</span></span><br><span class="line"><span class="string">    --num_workers=4 \</span></span><br><span class="line"><span class="string">    --iterations=8000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">torchrun \</span></span><br><span class="line"><span class="string">    --nproc_per_node=4 \</span></span><br><span class="line"><span class="string">    --master_port=29500 \</span></span><br><span class="line"><span class="string">    script_name.py \</span></span><br><span class="line"><span class="string">    --n_gpus=4 \</span></span><br><span class="line"><span class="string">    --batch_size=32 \</span></span><br><span class="line"><span class="string">    --epochs=10 \</span></span><br><span class="line"><span class="string">    --num_workers=4 \</span></span><br><span class="line"><span class="string">    --iterations=8000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">实际上发生的是：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">整个脚本会被启动4次（假设使用4个GPU）</span></span><br><span class="line"><span class="string">每次启动都是完整的脚本</span></span><br><span class="line"><span class="string">每个进程都有不同的 local_rank 值（0,1,2,3）</span></span><br><span class="line"><span class="string">每个进程被分配到不同的 GPU</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><code>start_ddp.sh</code> 平时运行它、修改它就好了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------</span></span><br><span class="line"><span class="comment"># 分布式训练启动脚本</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># 当使用 torch.distributed.launch 启动时：</span></span><br><span class="line"><span class="comment"># 1. 这个命令会自动启动n个进程(n=nproc_per_node指定的数量)</span></span><br><span class="line"><span class="comment"># 2. 每个进程都会运行同一个Python脚本(multi_gpu_process.py)</span></span><br><span class="line"><span class="comment"># 3. 每个进程会被自动分配一个local_rank(0,1,2,3...)</span></span><br><span class="line"><span class="comment"># 4. 每个进程会被自动分配到对应的GPU上</span></span><br><span class="line"><span class="comment"># ---------------------------------------------</span></span><br><span class="line"></span><br><span class="line">torchrun \</span><br><span class="line">   --nproc_per_node=2 \</span><br><span class="line">   --master_port=29501 \</span><br><span class="line">   ddp5_env_check.py \</span><br><span class="line">   --n_gpus=2 \</span><br><span class="line">   --batch_size=32 \</span><br><span class="line">   --epochs=10 \</span><br><span class="line">   --num_workers=4 \</span><br><span class="line">   --iterations=800</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------</span></span><br><span class="line"><span class="comment"># 参数说明：</span></span><br><span class="line"><span class="comment"># --nproc_per_node: 要启动的进程数，通常等于GPU数量</span></span><br><span class="line"><span class="comment"># --master_port: 主进程的通信端口</span></span><br><span class="line"><span class="comment"># --n_gpus: 传递给Python脚本的GPU数量参数</span></span><br><span class="line"><span class="comment"># --batch_size: 每个GPU的批处理大小</span></span><br><span class="line"><span class="comment"># --epochs: 训练轮数</span></span><br><span class="line"><span class="comment"># --num_workers: 数据加载的工作进程数</span></span><br><span class="line"><span class="comment"># --iterations: 每张图片的处理迭代次数</span></span><br><span class="line"><span class="comment"># ---------------------------------------------</span></span><br></pre></td></tr></table></figure><p> 以上 例子 需要说明的是 ddp 方式 来做 多进程的 GPU 操作，是不存在主进程的，实际是 用 rank0 所在的进程兼职了主进程，它一边运行着自己的GPU训练一边兼职了主进程的活。所以 我们上面写的 统计 总共用时的写法 是不准确的，事实上也只会 体现出 rank0的 运行时间，但是 我没有想看那么精确 也就没有改了。</p>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="机器学习" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="GPU" scheme="http://example.com/tags/GPU/"/>
    
    <category term="torch" scheme="http://example.com/tags/torch/"/>
    
  </entry>
  
  <entry>
    <title>GPU服务器软件笔记</title>
    <link href="http://example.com/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/</id>
    <published>2024-10-30T06:40:24.000Z</published>
    <updated>2024-11-20T09:37:39.140Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、制作引导U盘"><a href="#一、制作引导U盘" class="headerlink" title="一、制作引导U盘"></a>一、制作引导U盘</h1><p>​在ubuntu官网下载服务器版本的ubuntu【Ubuntu 20.04.6 LTS】<a href="https://releases.ubuntu.com/20.04/">https://releases.ubuntu.com/20.04/</a></p><p><img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2024-09-26%2009.34.20.jpg" alt="截屏2024-09-26 09.34.20"></p><p>​然后使用Rufus或者其他工具，制作引导U盘。</p><h1 id="二、bios配置"><a href="#二、bios配置" class="headerlink" title="二、bios配置"></a>二、bios配置</h1><p>​在bios中关闭 网络引导，然后打开快速引导和 USB设备引导，在boot选项中把USB优先级提高，或者直接选择USB设备boot；</p><p><img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/image-20240926094301173.png" alt="image-20240926094301173"></p><p>​如遇到 辅助风扇报错可暂时不处理；</p><p><img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/image-20240926093920689.png" alt="image-20240926093920689"></p><h1 id="三、安装ubuntu"><a href="#三、安装ubuntu" class="headerlink" title="三、安装ubuntu"></a>三、安装ubuntu</h1><p>​<img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241120172957.jpg" alt="微信图片_20241120172957"></p><p>​配置的时候最好用AMT这个网口，Ubuntu 安装完毕以后 把网线再查回非AMT的网口，下面装Ubuntu的过程我们都是插在AMT口操作的。</p><p>选语言；</p><p><img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2024-09-26%2009.46.28.jpg" alt="截屏2024-09-26 09.46.28"></p><p>​选键盘布局</p><p><img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2024-09-26%2009.47.08.jpg" alt="截屏2024-09-26 09.47.08"></p><p>​选择手动还是DHCP动态分配IP；我这里选择的手动manual；</p><p><img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/image-20240926094918382.png" alt="image-20240926094918382"></p><p><img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/image-20240926094947415.png" alt="image-20240926094947415"></p><p>​如果您的Ubuntu服务器在代理服务器后面，则需要在此处输入代理服务器详细信息。否则，只需将其保留为空；</p><p><img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2024-09-26%2009.50.50.jpg" alt="截屏2024-09-26 09.50.50"></p><p>​需要配置Ubuntu存档镜像。系统会自动为你选择一个默认的镜像。如果您不希望使用默认镜像，请在此处输入“镜像地址”，这个可以配置阿里云(<a href="http://mirrors.aliyun.com/ubuntu/)%EF%BC%8C%E6%88%91%E8%BF%99%E9%87%8C%E4%BD%BF%E7%94%A8%E9%BB%98%E8%AE%A4%E7%9A%84%EF%BC%8C%E4%BD%86%E6%98%AF%E4%B8%8D%E4%BB%A3%E8%A1%A8%E9%BB%98%E8%AE%A4%E7%9A%84%E6%AF%8F%E6%AC%A1%E9%83%BD%E8%A1%8C%EF%BC%8C%E8%BF%99%E9%87%8C%E5%BC%BA%E7%83%88%E5%BB%BA%E8%AE%AE%E6%94%B9%E6%88%90%E6%B8%85%E5%8D%8E%E7%9A%84%E6%BA%90%EF%BC%9Ahttps://mirrors.tuna.tsinghua.edu.cn/ubuntu">http://mirrors.aliyun.com/ubuntu/)，我这里使用默认的，但是不代表默认的每次都行，这里强烈建议改成清华的源：https://mirrors.tuna.tsinghua.edu.cn/ubuntu</a>    ；</p><p><img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2024-09-26%2009.52.06.jpg" alt="截屏2024-09-26 09.52.06"></p><p>​配置磁盘布局，即对硬盘进行分区。您将获得两个选择。选择任何适合您的给定分区方法。</p><p>​使用整个磁盘：此方法将擦除整个硬盘并自动对驱动器进行分区。推荐给新手。如果选择此选项，则可以选择设置LVM并使用LUKS加密LVM配置。</p><p><img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2024-09-26%2009.53.57.jpg" alt="截屏2024-09-26 09.53.57"></p><p><img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/image-20240926095417330.png" alt="image-20240926095417330"></p><p>​continue之后 ，输入服务器系统的详细信息，例如您的名称，服务器名称，用户名及其密码，您将使用它们来登录服务器。（注意此时如果你设置了阿狗，那阿狗就具备root权限。）但是注意，此时 你想切root用户是做不到的，但是root用户又是实际存在的，要切root 用户，需要先<code>passwd root</code>给root用户定一个密码。<br>​<img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/image-20240926095714212.png" alt="image-20240926095714212"></p><p>​可以选择安装openSSH服务器，该服务器允许您从网络上的任何系统远程访问该服务器。<br><img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2024-09-26%2009.58.34.jpg" alt="截屏2024-09-26 09.58.34"></p><p><img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2024-09-26%2009.59.01.jpg" alt="截屏2024-09-26 09.59.01"></p><p>​Ubuntu 20.04 LTS安装将立即开始。需要一段时间，具体取决于软件包的选择和Internet的速度。</p><p><img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/image-20240926100005353.png" alt="image-20240926100005353"></p><p>​reboot，立刻拔出U盘。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/os-release <span class="comment"># 查看版本是不是正确了。</span></span><br></pre></td></tr></table></figure><h1 id="四、查看GPU型号"><a href="#四、查看GPU型号" class="headerlink" title="四、查看GPU型号"></a>四、查看GPU型号</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lspci | grep -i nvidia <span class="comment"># 如果只出现了2204 这样的编号没有 出现 像 GTX4090类似这样的具体型号，那就自己去网上搜 编号和具体型号的对应，像2204 对应就是 GTX3090。</span></span><br></pre></td></tr></table></figure><p>也能拆机看看 显卡上有没有贴着，直接明了就是拆机麻烦点。</p><h1 id="五、安装Nvidia驱动"><a href="#五、安装Nvidia驱动" class="headerlink" title="五、安装Nvidia驱动"></a>五、安装Nvidia驱动</h1><h2 id="五-0、兼容性知识的了解"><a href="#五-0、兼容性知识的了解" class="headerlink" title="五-0、兼容性知识的了解"></a>五-0、兼容性知识的了解</h2><p>​兼容性推荐看这个解释<br><a href="https://tianzhipeng-git.github.io/2023/11/21/cuda-version.html#%E5%8D%A1%E5%92%8Cdriver%E7%89%88%E6%9C%AC%E5%85%BC%E5%AE%B9">https://tianzhipeng-git.github.io/2023/11/21/cuda-version.html#%E5%8D%A1%E5%92%8Cdriver%E7%89%88%E6%9C%AC%E5%85%BC%E5%AE%B9</a></p><p>​有几个点要理解 </p><ul><li><p>GPU kernal-mode driver</p></li><li><p>CUDA user-mode driver</p></li><li><p>CUDA runtime</p><p>上面两个绑定在一起，在Nvidia驱动，cuda runtime 可以理解为 我们分析的cuda版本，nvidia驱动是向后兼容的，支持老版本，现在的Nvidia驱动对cuda 也有小版本兼容，如果Nvidia驱动最开始对应的12.0，则12.0 12.1 12.X都是兼容的。</p><p>torch安装起来直接考虑所安装的torch附带的cuda版本 , 如<code>torch-1.12.0+cu116-cp39</code>, 和机器的driver是否兼容即可</p><p><strong>另外需要强调的是，pytorch 自带了一个 cuda支持包 ，大部分时候不会调用 本地系统中的cuda，不需要安装本地的cuda服务</strong>。</p></li></ul><h2 id="五-1、下载"><a href="#五-1、下载" class="headerlink" title="五-1、下载"></a>五-1、下载</h2><p>​先进Nvidia官网看看这个显卡推荐的驱动，<a href="https://www.nvidia.com/en-us/drivers/">https://www.nvidia.com/en-us/drivers/</a>    。<br>​下面是Tesla V100GPU和GTX3090的例子；<br>​<img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2024-09-26%2010.48.17.jpg" alt="截屏2024-09-26 10.48.17"></p><p>​<img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2024-09-26%2010.53.02.jpg" alt="截屏2024-09-26 10.53.02"></p><p>​<img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2024-09-26%2010.57.57.jpg" alt="截屏2024-09-26 10.57.57"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 复制上图 Download 地址，在服务器中用wget下载。</span></span><br><span class="line">wget https://us.download.nvidia.com/XFree86/Linux-x86_64/550.120/NVIDIA-Linux-x86_64-550.120.run</span><br></pre></td></tr></table></figure><h2 id="五-2、安装"><a href="#五-2、安装" class="headerlink" title="五-2、安装"></a>五-2、安装</h2><p>​确保 nvidia驱动被 彻底卸载了，所以先尝试卸载一遍；</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># ——————————————————————————————————————  准备工作  ————————————————————————————————————————</span></span><br><span class="line">nvidia-smi <span class="comment"># 查看是否有安装 Nvidia 驱动；</span></span><br><span class="line">lspci | grep -i nvidia  <span class="comment"># 确认是否识别到设备：</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo systemctl stop lightdm</span><br><span class="line">sudo systemctl stop gdm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保禁用 Nouveau 驱动</span></span><br><span class="line">sudo vim /etc/modprobe.d/blacklist-nouveau.conf</span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line">blacklist nouveau</span><br><span class="line">options nouveau modeset=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新 initramfs： 执行以下命令以更新 initramfs，以确保系统在下次启动时禁用 Nouveau：</span></span><br><span class="line">sudo update-initramfs -u</span><br><span class="line">sudo reboot </span><br><span class="line"></span><br><span class="line"><span class="comment"># ——————————————————————————————————————  准备工作  ————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ——————————————————————————————————————  卸载  ————————————————————————————————————————</span></span><br><span class="line"><span class="comment"># 如果有安装Nvidia驱动，且可以确定是 run 文件安装的，则先额外添加以下一条命令，后面一样。</span></span><br><span class="line">sudo bash NVIDIA-XXX-XXX.XXX.run --uninstall </span><br><span class="line"><span class="comment"># 如果不是是 run 文件安装的，直接暴力全部卸载。</span></span><br><span class="line"><span class="comment"># 确保 nvidia驱动被有哪些。</span></span><br><span class="line">sudo dpkg -l | grep nvidia  </span><br><span class="line">sudo apt-get purge <span class="string">&#x27;^nvidia-.*&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># ¥ 若遇到以下错误 </span></span><br><span class="line">    Errors were encountered <span class="keyword">while</span> processing:</span><br><span class="line">     qemu-ga</span><br><span class="line">    <span class="comment"># ¥ 处理方法</span></span><br><span class="line">    sudo apt-get remove --purge qemu-ga</span><br><span class="line">    sudo apt-get autoremove</span><br><span class="line">    sudo apt-get clean</span><br><span class="line">    sudo apt-get update</span><br><span class="line">    sudo apt-get install qemu-ga 或者 sudo apt-get install qemu-guest-agent</span><br><span class="line">sudo apt-get purge <span class="string">&#x27;^nvidia-.*&#x27;</span></span><br><span class="line"></span><br><span class="line">sudo apt-get autoremove --purge</span><br><span class="line">sudo apt-get clean</span><br><span class="line"><span class="comment"># 查看 卸载干净没有</span></span><br><span class="line">sudo dpkg -l | grep nvidia  </span><br><span class="line">sudo reboot</span><br><span class="line"><span class="comment"># ——————————————————————————————————————  卸载  ————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ——————————————————————————————————————  安装  ————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># apt换源，先备份</span></span><br><span class="line">    sudo <span class="built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.backup</span><br><span class="line">    sudo vim /etc/apt/sources.list</span><br><span class="line">    <span class="comment"># 写入</span></span><br><span class="line">    deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">    deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">    deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">    deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line">    deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 情况一：下载的是 deb 文件。</span></span><br><span class="line">sudo dpkg -i nvidia-driver-local-repo-ubuntu2004-550.54.14_1.0-1_amd64.deb</span><br><span class="line">sudo <span class="built_in">cp</span> /var/nvidia-driver-local-repo-ubuntu2004-550.54.14/nvidia-driver-local-F9E6E988-keyring.gpg /usr/share/keyrings/</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -f install</span><br><span class="line">sudo apt install nvidia-driver-550</span><br><span class="line">sudo reboot </span><br><span class="line">nvidia-smi <span class="comment"># 可见安装成功，但不一定是550.54.14版本，可能是550.90.12。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 情况二：下载的是 run 文件。</span></span><br><span class="line">sudo bash NVIXXX.XXX.XXX install </span><br><span class="line"><span class="comment"># 可能需要安装gcc make等</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install gcc</span><br><span class="line">  sudo apt install make</span><br><span class="line"></span><br><span class="line"><span class="comment"># ——————————————————————————————————————  安装  ————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Nvidia驱动之后，不再安装系统的 cuda，而在 conda 中根据各自虚拟环境的的要求,安装对应的cuda 和pytorch即可。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="五-3、重启nvidia服务"><a href="#五-3、重启nvidia服务" class="headerlink" title="五-3、重启nvidia服务"></a>五-3、重启nvidia服务</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart nvidia-persistenced</span><br><span class="line"></span><br><span class="line">sudo reboot </span><br></pre></td></tr></table></figure><h1 id="六、安装cuda"><a href="#六、安装cuda" class="headerlink" title="六、安装cuda"></a>六、安装cuda</h1><p>​cuda 官网 <a href="https://developer.nvidia.com/cuda-12-4-0-download-archive?target_os=Linux&amp;target_arch=x86_64&amp;Distribution=Ubuntu&amp;target_version=20.04&amp;target_type=deb_local">https://developer.nvidia.com/cuda-12-4-0-download-archive?target_os=Linux&amp;target_arch=x86_64&amp;Distribution=Ubuntu&amp;target_version=20.04&amp;target_type=deb_local</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ——————————————————————————————————————  卸载  ————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line">sudo apt-get --purge remove <span class="string">&quot;*cublas*&quot;</span> <span class="string">&quot;cuda*&quot;</span> <span class="string">&quot;nsight*&quot;</span></span><br><span class="line"></span><br><span class="line">sudo <span class="built_in">rm</span> /etc/apt/sources.list.d/cuda*</span><br><span class="line">sudo <span class="built_in">rm</span> /etc/apt/sources.list.d/nvidia-ml.list</span><br><span class="line"></span><br><span class="line">sudo apt-get autoremove</span><br><span class="line">sudo apt-get autoclean</span><br><span class="line"></span><br><span class="line">sudo reboot</span><br><span class="line"></span><br><span class="line"><span class="comment"># ——————————————————————————————————————  卸载  ————————————————————————————————————————</span></span><br></pre></td></tr></table></figure><p>​</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ——————————————————————————————————————  安装  ————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把临时的管道文件夹设置在一个大点的磁盘内，这个文件夹挂着个大磁盘，并且这个是一次性的，下次开机就不生效了。</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /data/tmp</span><br><span class="line"><span class="built_in">export</span> TMPDIR=/data/tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">换源，先备份</span><br><span class="line">sudo <span class="built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.backup</span><br><span class="line"></span><br><span class="line">sudo vim /etc/apt/sources.list</span><br><span class="line"><span class="comment"># 写入</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"><span class="comment">### 官网内容 ###</span></span><br><span class="line">    wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin</span><br><span class="line">    sudo <span class="built_in">mv</span> cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600</span><br><span class="line">    wget https://developer.download.nvidia.com/compute/cuda/12.4.0/local_installers/cuda-repo-ubuntu2004-12-4-local_12.4.0-550.54.14-1_amd64.deb</span><br><span class="line">    sudo dpkg -i cuda-repo-ubuntu2004-12-4-local_12.4.0-550.54.14-1_amd64.deb</span><br><span class="line">    sudo <span class="built_in">cp</span> /var/cuda-repo-ubuntu2004-12-4-<span class="built_in">local</span>/cuda-*-keyring.gpg /usr/share/keyrings/</span><br><span class="line">    sudo apt-get update</span><br><span class="line">    sudo apt-get -y install cuda-toolkit-12-4</span><br><span class="line"><span class="comment">### 官网内容 ###</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 .bashrc 写入</span></span><br><span class="line"><span class="built_in">export</span> PATH=/usr/local/cuda/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/local/cuda/lib64:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line">nvcc --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># ——————————————————————————————————————  安装  ————————————————————————————————————————</span></span><br></pre></td></tr></table></figure><h1 id="七、安装conda"><a href="#七、安装conda" class="headerlink" title="七、安装conda"></a>七、安装conda</h1><p>​下载conda，我推荐使用miniconda，<a href="https://docs.conda.io/en/latest/miniconda.html#linux-installers%E3%80%82">https://docs.conda.io/en/latest/miniconda.html#linux-installers。</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加环境变量，然后再 source ~/.bashrc</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​兄弟改个国内源吧，不然贼慢。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> ~/.condarc ~/.condarc.bak</span><br><span class="line"></span><br><span class="line">vim  ~/.condarc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入以下内容 </span></span><br><span class="line">channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/pro</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span><br><span class="line">  - conda-forge</span><br><span class="line">  - defaults  </span><br></pre></td></tr></table></figure><p>使用 <code>pip</code> 命令安装 Jupyter Lab，同时确保安装在用户的本地目录中：</p><p><code>pip install --user jupyterlab</code></p><p>如果 <code>~/.local/bin</code> 没有看到，可以将其添加到 <code>~/.bashrc</code> 或 <code>~/.bash_profile</code> 中：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;$HOME/.local/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h1 id="八、虚拟环境内安装cuda及pytorch"><a href="#八、虚拟环境内安装cuda及pytorch" class="headerlink" title="八、虚拟环境内安装cuda及pytorch"></a>八、虚拟环境内安装cuda及pytorch</h1><p>conda update conda</p><p>注意：<a href="https://pytorch.org/get-started/locally/">https://pytorch.org/get-started/locally/</a> 查看 cuda和pytorch对应关系，nvidia-smi 中右上角的 cuda是Nvidia驱动最高支持到的cuda版本，之后下载的cuda不能高于这个版本。<img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2024-09-27%2021.16.11.jpg" alt="截屏2024-09-27 21.16.11"><img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/image-20240927211510343.png" alt="image-20240927211510343"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（重要）先把环境外的 pytorch都给卸载了，不然可能影响环境中调用 pytorch，可能调到外面的导致混乱。</span></span><br><span class="line">pip uninstall torch torchvision torchaudio</span><br><span class="line">conda remove pytorch torchvision torchaudio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入 自己环境，安装cudatoolkit，根据自己的Nvidia驱动支持的最高版本来选择。</span></span><br><span class="line">conda install cudatoolkit=11.8 -c https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line"><span class="comment"># 检查一下</span></span><br><span class="line">conda list cudatoolkit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入 自己环境，安装cudnn，根据前面的cudatoolkit的版本，conda search cudnn搜出可用版本来选择。</span></span><br><span class="line">conda search cudnn</span><br><span class="line">conda install cudnn=8.9.2.26 -c https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入 自己建立的环境如python3.8，然后（这一步conda可能要等待1-2个小时）。conda、pip安装二选一即可，推荐pip加 -i 清华源，快点。</span></span><br><span class="line"><span class="comment"># conda install pytorch==2.4.1 torchvision torchaudio pytorch-cuda=11.8 -c pytorch -c nvidia</span></span><br><span class="line">pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu124 -i https://pypi.tuna.tsinghua.edu.cn/simpleß</span><br><span class="line">pip install torch==2.4.0 torchvision==0.19.0 torchaudio==2.4.0 --index-url https://download.pytorch.org/whl/cu118 -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br><span class="line">pip install pyyaml</span><br><span class="line"><span class="comment"># 检查是否有依赖缺失</span></span><br><span class="line">pip check</span><br><span class="line">pip install pytz idna urllib3</span><br><span class="line">conda install cmake   </span><br><span class="line">...</span><br><span class="line"><span class="comment"># 解决完冲突再检查一下</span></span><br><span class="line">pip check </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">conda activate XXX  <span class="comment"># 激活conda中的虚拟环境</span></span><br><span class="line">conda install ipykernel  <span class="comment"># 安装丘比特核心。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把丘比特核心和conda 建立的环境关联上。</span></span><br><span class="line">python -m ipykernel install --user --name python3_8 --display-name <span class="string">&quot;Python 3.8 (conda)&quot;</span></span><br><span class="line">python -m ipykernel install --user --name python3_10 --display-name <span class="string">&quot;Python 3.10 (conda)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多加了或者 虚拟环境已经没有了，删除丘比特和虚拟环境的关联</span></span><br><span class="line">jupyter kernelspec uninstall python3.7 </span><br><span class="line"><span class="comment"># 看关联内核</span></span><br><span class="line">jupyter kernelspec list </span><br></pre></td></tr></table></figure><h1 id="九、成功配置案例"><a href="#九、成功配置案例" class="headerlink" title="九、成功配置案例"></a>九、成功配置案例</h1><p>​</p><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><ul><li>系统：Ubuntu 20.04.6 LTS （服务器版本）</li><li>python：Python 3.8.10</li><li>GPU：Tesla V100S-PCIE-32GB</li><li>Nvidia驱动：550.107.02</li><li>系统Cuda：cuda_12.4</li><li>conda：未安装</li><li>Pytorch：2.4.0+cu118</li></ul><p></p><p>​<img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/image-20240928172228211.png" alt="image-20240928172228211"></p><p><img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/image-20240928172257720.png" alt="image-20240928172257720"></p><p><img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/image-20240928172338819.png" alt="image-20240928172338819"></p><p><img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/image-20240928172404532.png" alt="image-20240928172404532"></p><h2 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h2><ul><li><p>系统：Ubuntu 20.04.6 LTS （服务器版本）</p></li><li><p>python：Python 3.8.19  （conda虚拟环境的python）</p></li><li><p>GPU：GRID V100S-16C</p></li><li><p>Nvidia驱动：470.82.01 （企业版run安装）</p></li><li><p>系统Cuda：V10.1.243</p></li><li><p>conda：miniconda 24.7.1</p></li><li><p>Pytorch： 1.10.0（conda虚拟环境内）</p></li><li><p>cuda：11.3（conda虚拟环境内）</p></li><li><p>cudatoolkit: 11.3.1 （conda虚拟环境内）</p></li><li><p>cudnn: 8200  （conda虚拟环境内）</p></li></ul><p><img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/image-20240928194018180.png" alt="image-20240928194018180"></p><p><img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/image-20240928194041646.png" alt="image-20240928194041646"></p><p><img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/image-20240928194100718.png" alt="image-20240928194100718"></p><p><img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/image-20240928194133870.png" alt="image-20240928194133870"></p><p><img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/image-20240928194603410.png" alt="image-20240928194603410"></p><p><img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/image-20240929110609679.png" alt="image-20240929110609679"></p><p><img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/image-20240929110633360.png" alt="image-20240929110633360"></p><p>​以上只是两个成功安装案例，实际上 安装只要注意 后向支持和小版本支持的匹配原则，是很容易搭配的。</p><h1 id="附加：可能遇到的问题"><a href="#附加：可能遇到的问题" class="headerlink" title="附加：可能遇到的问题"></a>附加：可能遇到的问题</h1><h2 id="1、死进程霸占显存"><a href="#1、死进程霸占显存" class="headerlink" title="1、死进程霸占显存"></a>1、死进程霸占显存</h2><p>​遇到死了很久的进程，却一直霸占着显存</p><p><img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/image-20240927222847362.png" alt="image-20240927222847362"></p><p>kill 这些进程，然后 torch.cuda.empty_cache() </p><h2 id="2、出过一次错误"><a href="#2、出过一次错误" class="headerlink" title="2、出过一次错误"></a>2、出过一次错误</h2><p><img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/image-20240928132029174.png" alt="image-20240928132029174"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重启Nvidia服务。</span></span><br><span class="line">sudo systemctl restart nvidia-persistenced</span><br><span class="line"></span><br><span class="line">sudo reboot </span><br></pre></td></tr></table></figure><p><img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/image-20240928132138895.png" alt="image-20240928132138895"></p><h2 id="3、安装遇到空间不够"><a href="#3、安装遇到空间不够" class="headerlink" title="3、安装遇到空间不够"></a>3、安装遇到空间不够</h2><p><img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/image-20240928133838486.png" alt="image-20240928133838486"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把临时的管道文件夹设置在一个大点的磁盘内，这个文件夹挂着个大磁盘，并且这个是一次性的，下次开机就不生效了。</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /data/tmp</span><br><span class="line"><span class="built_in">export</span> TMPDIR=/data/tmp</span><br></pre></td></tr></table></figure><h2 id="4、Nvidia驱动下载好了但是没有安装上，没有识别到硬件"><a href="#4、Nvidia驱动下载好了但是没有安装上，没有识别到硬件" class="headerlink" title="4、Nvidia驱动下载好了但是没有安装上，没有识别到硬件"></a>4、Nvidia驱动下载好了但是没有安装上，没有识别到硬件</h2><p>nvidia-smi 出现这样提示，且&#x2F;dev下面没有 nvidia相关文件。</p><p><code>ll /dev | grep nvidia </code> 显示空。</p><p><img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/image-20240928191836094.png" alt="image-20240928191836094"></p><p><img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/image-20240928191451148.png" alt="image-20240928191451148"></p><p>处理方法：</p><p>​关机，（有虚拟化管理）在虚拟化的管理平台 删除硬件，再 添加硬件；（直接有硬件显卡）拔了，再插上；</p><p><img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/image-20240928191700340.png" alt="image-20240928191700340"></p><p><img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/image-20240928192055059.png" alt="image-20240928192055059"></p><p><img src="/2024/10/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/GPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E7%AC%94%E8%AE%B0/image-20240928192116639.png" alt="image-20240928192116639"></p><p>如果还没有识别到，见 前面Nvidia驱动安装，巴拉巴拉再来一遍。</p>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="机器学习" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="cuda" scheme="http://example.com/tags/cuda/"/>
    
    <category term="pytorch" scheme="http://example.com/tags/pytorch/"/>
    
    <category term="Nvidia驱动" scheme="http://example.com/tags/Nvidia%E9%A9%B1%E5%8A%A8/"/>
    
    <category term="前向兼容-后向兼容-小版本兼容" scheme="http://example.com/tags/%E5%89%8D%E5%90%91%E5%85%BC%E5%AE%B9-%E5%90%8E%E5%90%91%E5%85%BC%E5%AE%B9-%E5%B0%8F%E7%89%88%E6%9C%AC%E5%85%BC%E5%AE%B9/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu双系统中boot找不到Windows</title>
    <link href="http://example.com/2024/10/28/windows_ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E4%B8%ADboot%E6%89%BE%E4%B8%8D%E5%88%B0Windows/"/>
    <id>http://example.com/2024/10/28/windows_ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E4%B8%ADboot%E6%89%BE%E4%B8%8D%E5%88%B0Windows/</id>
    <published>2024-10-28T15:15:36.000Z</published>
    <updated>2024-10-28T08:13:59.623Z</updated>
    
    <content type="html"><![CDATA[<p>简介 <span id="more"></span></p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p><strong>在 Ubuntu、Windows双系统，GNU GRUB 中看不见Windows的boot选项。</strong></p><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><p>进入ubuntu系统，Ubuntu 和别的系统组成了多系统，最好要以Ubuntu为主。</p><p>1、编辑 &#x2F;etc&#x2F;default&#x2F;grub </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GRUB DEFAULT=0</span><br><span class="line">GRUB TIMEOUT STYLE=menu      <span class="comment"># 改成 menu</span></span><br><span class="line">GRUB TIMEOUT=20              <span class="comment"># 时间改久一点</span></span><br><span class="line">GRUB DISTRIBUTOR=<span class="string">&#x27;lsb release -i -s 2&gt; /dev/null I I echo Debian&#x27;</span></span><br><span class="line">GRUB_ CMDLINE LINUX DEFAULT=<span class="string">&quot;quiet splash system.unified croup hierarchy=0&quot;</span></span><br><span class="line">GRUB CMDLINE LINUX=<span class="string">&quot;&quot;</span></span><br><span class="line">GRUB DISABLE OS PROBER=<span class="literal">false</span> <span class="comment"># 没有就添加</span></span><br></pre></td></tr></table></figure><p>2、sudo update-grub  更新引导菜单</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-grub  <span class="comment"># 运行完可见 found Windows boot manager on XXXXX ... done</span></span><br></pre></td></tr></table></figure><p>3、重新启动可见GNU GRUB 中多了一个Windows选项。</p>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="windows_ubuntu双系统" scheme="http://example.com/categories/windows-ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="boot" scheme="http://example.com/tags/boot/"/>
    
  </entry>
  
  <entry>
    <title>检查cuda_pytorch_nvidia安装情况脚本</title>
    <link href="http://example.com/2024/10/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%A3%80%E6%9F%A5cuda_pytorch_nvidia%E5%AE%89%E8%A3%85%E6%83%85%E5%86%B5%E8%84%9A%E6%9C%AC/"/>
    <id>http://example.com/2024/10/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%A3%80%E6%9F%A5cuda_pytorch_nvidia%E5%AE%89%E8%A3%85%E6%83%85%E5%86%B5%E8%84%9A%E6%9C%AC/</id>
    <published>2024-10-25T03:12:13.000Z</published>
    <updated>2024-11-11T00:45:40.419Z</updated>
    
    <content type="html"><![CDATA[<h1 id="测试版本"><a href="#测试版本" class="headerlink" title="测试版本"></a>测试版本</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> models, transforms</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torchvision.models <span class="keyword">import</span> ResNet50_Weights</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查并安装 tqdm</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">install_tqdm</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">import</span> tqdm</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;tqdm 已安装，不需要重复安装。&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> ModuleNotFoundError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;tqdm 未安装，正在使用 pip 自动安装...&quot;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            subprocess.check_call([<span class="string">f&quot;<span class="subst">&#123;os.getenv(<span class="string">&#x27;CONDA_PREFIX&#x27;</span>)&#125;</span>/bin/pip&quot;</span>, <span class="string">&quot;install&quot;</span>, <span class="string">&quot;tqdm&quot;</span>, <span class="string">&quot;-i&quot;</span>, <span class="string">&quot;https://pypi.tuna.tsinghua.edu.cn/simple&quot;</span>])</span><br><span class="line">            <span class="keyword">import</span> tqdm  <span class="comment"># 确保安装成功</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;tqdm 安装成功！&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;tqdm 安装失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查系统信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">system_info</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;系统信息:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;操作系统: <span class="subst">&#123;platform.system()&#125;</span> <span class="subst">&#123;platform.release()&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取 Ubuntu 版本</span></span><br><span class="line">    <span class="keyword">if</span> platform.system() == <span class="string">&#x27;Linux&#x27;</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/etc/os-release&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&quot;PRETTY_NAME&quot;</span> <span class="keyword">in</span> line:</span><br><span class="line">                        ubuntu_version = line.split(<span class="string">&quot;=&quot;</span>)[<span class="number">1</span>].strip().strip(<span class="string">&#x27;&quot;&#x27;</span>)</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">f&quot;Ubuntu 版本: <span class="subst">&#123;ubuntu_version&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;无法获取 Ubuntu 版本信息: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Ubuntu 版本: N/A&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Python 版本: <span class="subst">&#123;platform.python_version()&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Conda 虚拟环境: <span class="subst">&#123;os.getenv(<span class="string">&#x27;CONDA_DEFAULT_ENV&#x27;</span>, <span class="string">&#x27;Not in a conda environment&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 PyTorch 和 CUDA 信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pytorch_cuda_info</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;PyTorch 和 CUDA 信息:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;PyTorch 版本: <span class="subst">&#123;torch.__version__&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;CUDA 可用性: <span class="subst">&#123;torch.cuda.is_available()&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;CUDA 版本: <span class="subst">&#123;torch.version.cuda&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;cuDNN 版本: <span class="subst">&#123;torch.backends.cudnn.version()&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;GPU 名称: <span class="subst">&#123;torch.cuda.get_device_name(<span class="number">0</span>)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;CUDA 未启用，请检查 CUDA 安装&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试 PyTorch 是否调用了虚拟环境中的版本</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_virtual_env</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在检查是否使用虚拟环境中的 PyTorch 版本...&quot;</span>)</span><br><span class="line">    conda_env = os.getenv(<span class="string">&#x27;CONDA_DEFAULT_ENV&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">if</span> conda_env:</span><br><span class="line">        pytorch_path = torch.__file__</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;PyTorch 安装路径: <span class="subst">&#123;pytorch_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> conda_env <span class="keyword">in</span> pytorch_path:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;PyTorch 来自虚拟环境 &#x27;<span class="subst">&#123;conda_env&#125;</span>&#x27;&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;警告: PyTorch 没有来自当前虚拟环境&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;未在 Conda 虚拟环境中运行&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 大量图片运算测试函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">image_computation_test</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始大量图片运算测试...&quot;</span>)</span><br><span class="line">    device = <span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span></span><br><span class="line">    model = models.resnet50(weights=ResNet50_Weights.DEFAULT).to(device)</span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用本地图片</span></span><br><span class="line">    img_path = <span class="string">&quot;picture_env_check.jpg&quot;</span>  <span class="comment"># 本地图片的路径</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 图片预处理</span></span><br><span class="line">    preprocess = transforms.Compose([</span><br><span class="line">        transforms.Resize(<span class="number">256</span>),</span><br><span class="line">        transforms.CenterCrop(<span class="number">224</span>),</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize(mean=[<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], std=[<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>]),</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打开图片并处理</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(img_path):</span><br><span class="line">        img = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line">        img_tensor = preprocess(img).unsqueeze(<span class="number">0</span>).to(device)</span><br><span class="line"></span><br><span class="line">        start_time = time.time()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置迭代次数模拟大量计算</span></span><br><span class="line">        iterations = <span class="number">8000</span>  <span class="comment"># 修改迭代次数以控制测试的规模</span></span><br><span class="line">        success = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm  <span class="comment"># 在此处导入 tqdm，确保已经安装</span></span><br><span class="line">            <span class="comment"># 使用 tqdm 进度条</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(iterations), desc=<span class="string">&quot;图片运算中&quot;</span>):</span><br><span class="line">                <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">                    output = model(img_tensor)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;运算失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            success = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        end_time = time.time()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 输出结果</span></span><br><span class="line">        <span class="keyword">if</span> success:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;运算结束，处理了 <span class="subst">&#123;iterations&#125;</span> 次图片，耗时: <span class="subst">&#123;end_time - start_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;运算成功！&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;运算失败&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;图片 &#x27;<span class="subst">&#123;img_path&#125;</span>&#x27; 未找到，请检查路径。&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    install_tqdm()  <span class="comment"># 安装 tqdm</span></span><br><span class="line">    system_info()  <span class="comment"># 输出系统信息</span></span><br><span class="line">    pytorch_cuda_info()  <span class="comment"># 输出 PyTorch 和 CUDA 信息</span></span><br><span class="line">    check_virtual_env()  <span class="comment"># 检查 PyTorch 是否来自虚拟环境</span></span><br><span class="line">    image_computation_test()  <span class="comment"># 运行大量图片运算测试</span></span><br></pre></td></tr></table></figure><p><img src="/2024/10/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%A3%80%E6%9F%A5cuda_pytorch_nvidia%E5%AE%89%E8%A3%85%E6%83%85%E5%86%B5%E8%84%9A%E6%9C%AC/image-20240929085301281.png" alt="image-20240929085301281"></p><h1 id="通用版本"><a href="#通用版本" class="headerlink" title="通用版本"></a>通用版本</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> models, transforms</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torchvision.models <span class="keyword">import</span> ResNet50_Weights</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查并安装 tqdm</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">install_tqdm</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">import</span> tqdm</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;tqdm 已安装，不需要重复安装。&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> ModuleNotFoundError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;tqdm 未安装，正在使用 pip 自动安装...&quot;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            subprocess.check_call([<span class="string">f&quot;<span class="subst">&#123;os.getenv(<span class="string">&#x27;CONDA_PREFIX&#x27;</span>)&#125;</span>/bin/pip&quot;</span>, <span class="string">&quot;install&quot;</span>, <span class="string">&quot;tqdm&quot;</span>, <span class="string">&quot;-i&quot;</span>, <span class="string">&quot;https://pypi.tuna.tsinghua.edu.cn/simple&quot;</span>])</span><br><span class="line">            <span class="keyword">import</span> tqdm  <span class="comment"># 确保安装成功</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;tqdm 安装成功！&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;tqdm 安装失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查系统信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">system_info</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;系统信息:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;操作系统: <span class="subst">&#123;platform.system()&#125;</span> <span class="subst">&#123;platform.release()&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取 Ubuntu 版本</span></span><br><span class="line">    <span class="keyword">if</span> platform.system() == <span class="string">&#x27;Linux&#x27;</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/etc/os-release&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&quot;PRETTY_NAME&quot;</span> <span class="keyword">in</span> line:</span><br><span class="line">                        ubuntu_version = line.split(<span class="string">&quot;=&quot;</span>)[<span class="number">1</span>].strip().strip(<span class="string">&#x27;&quot;&#x27;</span>)</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">f&quot;Ubuntu 版本: <span class="subst">&#123;ubuntu_version&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;无法获取 Ubuntu 版本信息: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Ubuntu 版本: N/A&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Python 版本: <span class="subst">&#123;platform.python_version()&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Conda 虚拟环境: <span class="subst">&#123;os.getenv(<span class="string">&#x27;CONDA_DEFAULT_ENV&#x27;</span>, <span class="string">&#x27;Not in a conda environment&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 PyTorch 和 CUDA 信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pytorch_cuda_info</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;PyTorch 和 CUDA 信息:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;PyTorch 版本: <span class="subst">&#123;torch.__version__&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;CUDA 可用性: <span class="subst">&#123;torch.cuda.is_available()&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;CUDA 版本: <span class="subst">&#123;torch.version.cuda&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;cuDNN 版本: <span class="subst">&#123;torch.backends.cudnn.version()&#125;</span>&quot;</span>)</span><br><span class="line">        gpu_count = torch.cuda.device_count()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;检测到 <span class="subst">&#123;gpu_count&#125;</span> 个 GPU&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 无论 GPU 数量如何，都打印 GPU 名称</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(gpu_count):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;GPU <span class="subst">&#123;i&#125;</span> 名称: <span class="subst">&#123;torch.cuda.get_device_name(i)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;CUDA 未启用，请检查 CUDA 安装&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 PyTorch 是否调用了虚拟环境中的版本</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_virtual_env</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在检查是否使用虚拟环境中的 PyTorch 版本...&quot;</span>)</span><br><span class="line">    conda_env = os.getenv(<span class="string">&#x27;CONDA_DEFAULT_ENV&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">if</span> conda_env:</span><br><span class="line">        pytorch_path = torch.__file__</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;PyTorch 安装路径: <span class="subst">&#123;pytorch_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> conda_env <span class="keyword">in</span> pytorch_path:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;PyTorch 来自虚拟环境 &#x27;<span class="subst">&#123;conda_env&#125;</span>&#x27;&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;警告: PyTorch 没有来自当前虚拟环境&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;未在 Conda 虚拟环境中运行&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 大量图片运算测试函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">image_computation_test</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始大量图片运算测试...&quot;</span>)</span><br><span class="line">    device = <span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 检查 GPU 数量，使用多个 GPU</span></span><br><span class="line">    gpu_count = torch.cuda.device_count()</span><br><span class="line">    <span class="keyword">if</span> gpu_count &gt; <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;使用 <span class="subst">&#123;gpu_count&#125;</span> 个 GPU 进行并行运算&quot;</span>)</span><br><span class="line">        model = models.resnet50(weights=ResNet50_Weights.DEFAULT)</span><br><span class="line">        model = nn.DataParallel(model)  <span class="comment"># 使用多个 GPU</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;只有一个 GPU，使用单 GPU 运算&quot;</span>)</span><br><span class="line">        model = models.resnet50(weights=ResNet50_Weights.DEFAULT)</span><br><span class="line">    </span><br><span class="line">    model = model.to(device)</span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用本地图片</span></span><br><span class="line">    img_path = <span class="string">&quot;picture_env_check.jpg&quot;</span>  <span class="comment"># 本地图片的路径</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 图片预处理</span></span><br><span class="line">    preprocess = transforms.Compose([</span><br><span class="line">        transforms.Resize(<span class="number">256</span>),</span><br><span class="line">        transforms.CenterCrop(<span class="number">224</span>),</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize(mean=[<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], std=[<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>]),</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打开图片并处理</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(img_path):</span><br><span class="line">        img = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line">        img_tensor = preprocess(img).unsqueeze(<span class="number">0</span>).to(device)</span><br><span class="line"></span><br><span class="line">        start_time = time.time()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置迭代次数模拟大量计算</span></span><br><span class="line">        iterations = <span class="number">8000</span>  <span class="comment"># 修改迭代次数以控制测试的规模</span></span><br><span class="line">        success = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm  <span class="comment"># 在此处导入 tqdm，确保已经安装</span></span><br><span class="line">            <span class="comment"># 使用 tqdm 进度条</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(iterations), desc=<span class="string">&quot;图片运算中&quot;</span>):</span><br><span class="line">                <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">                    output = model(img_tensor)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;运算失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            success = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        end_time = time.time()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 输出结果</span></span><br><span class="line">        <span class="keyword">if</span> success:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;运算结束，处理了 <span class="subst">&#123;iterations&#125;</span> 次图片，耗时: <span class="subst">&#123;end_time - start_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;运算成功！&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;运算失败&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;图片 &#x27;<span class="subst">&#123;img_path&#125;</span>&#x27; 未找到，请检查路径。&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    install_tqdm()  <span class="comment"># 安装 tqdm</span></span><br><span class="line">    system_info()  <span class="comment"># 输出系统信息</span></span><br><span class="line">    pytorch_cuda_info()  <span class="comment"># 输出 PyTorch 和 CUDA 信息</span></span><br><span class="line">    check_virtual_env()  <span class="comment"># 检查 PyTorch 是否来自虚拟环境</span></span><br><span class="line">    image_computation_test()  <span class="comment"># 运行大量图片运算测试</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="改动总结："><a href="#改动总结：" class="headerlink" title="改动总结："></a>改动总结：</h2><ul><li>在 <code>pytorch_cuda_info</code> 函数中，无论检测到多少 GPU 都会打印 GPU 名称。</li><li>其他部分代码保持不变，确保可以在多 GPU 或单 GPU 情况下正常运行。</li></ul><p>以后如果要在其他脚本中加入类似的逻辑，只需在调用 GPU 相关的地方进行以下调整：</p><ol><li>使用 <code>torch.cuda.device_count()</code> 检查 GPU 数量。</li><li>在需要多个 GPU 并行运算时，使用 <code>nn.DataParallel()</code> 包装模型。</li><li>确保在任何情况下都打印出每个 GPU 的名称。</li></ol><h1 id="多GPU并行计算性能版本"><a href="#多GPU并行计算性能版本" class="headerlink" title="多GPU并行计算性能版本"></a>多GPU并行计算性能版本</h1><h2 id="一、pytorch下的GPU并行计算，举例两个标准方法"><a href="#一、pytorch下的GPU并行计算，举例两个标准方法" class="headerlink" title="一、pytorch下的GPU并行计算，举例两个标准方法"></a>一、pytorch下的GPU并行计算，举例两个标准方法</h2><h3 id="1-torch-multiprocessing-mp"><a href="#1-torch-multiprocessing-mp" class="headerlink" title="1. torch.multiprocessing (mp)"></a>1. <strong><code>torch.multiprocessing</code> (mp)</strong></h3><ul><li><strong>优点</strong>：<ul><li>支持多进程并行，可以在多个 GPU 上并行处理不同的数据。</li><li>每个进程有独立的 Python 解释器，这意味着每个进程可以独立地加载模型和数据，避免了全局解释器锁（GIL）的影响。</li><li>可以利用 NVIDIA NCCL 后端实现高效的跨 GPU 通信。</li></ul></li><li><strong>缺点</strong>：<ul><li>启动和管理多个进程的开销可能相对较高，特别是在小规模任务中。</li><li>需要处理进程间的通信，可能会增加代码的复杂性。</li></ul></li></ul><h3 id="2-Data-Parallelism数据并行-ddp"><a href="#2-Data-Parallelism数据并行-ddp" class="headerlink" title="2. Data Parallelism数据并行 (ddp)"></a>2. <strong>Data Parallelism数据并行 (ddp)</strong></h3><ul><li>使用 <code>torch.nn.DataParallel</code> 或 <code>torch.nn.parallel.DistributedDataParallel</code> 实现数据并行。</li><li><strong>优点</strong>：<ul><li><code>DataParallel</code> 在多个 GPU 上并行计算每个 mini-batch 的损失和梯度，使用简单。</li><li><code>DistributedDataParallel</code> 更加高效，适合大规模分布式训练，减少了跨 GPU 的通信开销。</li></ul></li><li><strong>缺点</strong>：<ul><li>在小型模型或小批量数据时，可能不会看到显著的性能提升。</li><li>在某些情况下，<code>DataParallel</code> 的效率较低，因为它在主 GPU 上聚合梯度，可能成为瓶颈。</li></ul></li></ul><h2 id="二、mp-精简逻辑"><a href="#二、mp-精简逻辑" class="headerlink" title="二、mp-精简逻辑"></a>二、mp-精简逻辑</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.distributed <span class="keyword">as</span> dist</span><br><span class="line"><span class="keyword">import</span> torch.multiprocessing <span class="keyword">as</span> mp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setup_ddp</span>(<span class="params">rank, world_size</span>):</span><br><span class="line">    os.environ[<span class="string">&#x27;MASTER_ADDR&#x27;</span>] = <span class="string">&#x27;localhost&#x27;</span>  <span class="comment"># 在本机运行。</span></span><br><span class="line">    os.environ[<span class="string">&#x27;MASTER_PORT&#x27;</span>] = <span class="string">&#x27;12355&#x27;</span>      <span class="comment"># 可以自己换端口，保证用一个空闲端口就行。</span></span><br><span class="line">    dist.init_process_group(<span class="string">&quot;nccl&quot;</span>, rank=rank, world_size=world_size)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">computation_function</span>(<span class="params">rank, world_size</span>):     </span><br><span class="line">    setup_ddp(rank, world_size)</span><br><span class="line">    <span class="comment"># 这里可以放置模型训练或推理的逻辑</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Rank <span class="subst">&#123;rank&#125;</span> 正在执行计算逻辑。&quot;</span>)</span><br><span class="line">    <span class="comment"># 其他计算逻辑...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    world_size = <span class="number">4</span>  <span class="comment"># 假设有4个进程</span></span><br><span class="line">    mp.spawn(computation_function, args=(world_size,), nprocs=world_size, join=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>**<code>setup_ddp</code>**：设置分布式处理环境。</p><p>rank在多个方法中传递并标识，在的计算方法调用 setup_ddp 来进行环境设置，mp.spawn会自动生成一个rank到 计算方法中。这样就能确保每个进程都能正确地进行分布式计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.multiprocessing <span class="keyword">as</span> mp</span><br><span class="line"><span class="keyword">import</span> torch.distributed <span class="keyword">as</span> dist</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setup_ddp</span>(<span class="params">rank, world_size</span>):</span><br><span class="line">    os.environ[<span class="string">&#x27;MASTER_ADDR&#x27;</span>] = <span class="string">&#x27;localhost&#x27;</span></span><br><span class="line">    os.environ[<span class="string">&#x27;MASTER_PORT&#x27;</span>] = <span class="string">&#x27;12355&#x27;</span></span><br><span class="line">    dist.init_process_group(<span class="string">&quot;nccl&quot;</span>, rank=rank, world_size=world_size)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">computation</span>(<span class="params">rank, world_size, elapsed_times, img_paths</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;具体计算函数，替换为所需的计算逻辑&quot;&quot;&quot;</span></span><br><span class="line">    setup_ddp(rank, world_size)</span><br><span class="line">    start_time = time.time()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理分配给该进程的图片</span></span><br><span class="line">    <span class="keyword">for</span> img_path <span class="keyword">in</span> img_paths:</span><br><span class="line">        <span class="comment"># 这里添加处理逻辑，例如加载图片并进行计算</span></span><br><span class="line">        <span class="keyword">pass</span>  <span class="comment"># 替换为你的计算逻辑</span></span><br><span class="line"></span><br><span class="line">    elapsed_times[rank] = time.time() - start_time</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Rank <span class="subst">&#123;rank&#125;</span> 耗时: <span class="subst">&#123;elapsed_times[rank]:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start_multiprocessing</span>(<span class="params">computation_func, img_paths</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;启动多进程并行计算&quot;&quot;&quot;</span></span><br><span class="line">    world_size = torch.cuda.device_count()</span><br><span class="line">    elapsed_times = mp.Manager().<span class="built_in">list</span>([<span class="number">0</span>] * world_size)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 任务划分</span></span><br><span class="line">    images_per_rank = <span class="built_in">len</span>(img_paths) // world_size</span><br><span class="line">    extra_images = <span class="built_in">len</span>(img_paths) % world_size</span><br><span class="line">    image_lists = [img_paths[i * images_per_rank + <span class="built_in">min</span>(i, extra_images):(i + <span class="number">1</span>) * images_per_rank + <span class="built_in">min</span>(i + <span class="number">1</span>, extra_images)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(world_size)]</span><br><span class="line"></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    mp.spawn(computation_func, args=(world_size, elapsed_times, image_lists), nprocs=world_size, join=<span class="literal">True</span>)</span><br><span class="line">    end_time = time.time()</span><br><span class="line"></span><br><span class="line">    total_time = <span class="built_in">sum</span>(elapsed_times)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;总共实际耗时: <span class="subst">&#123;end_time - start_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;所有 GPU 总共耗时: <span class="subst">&#123;total_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 示例图片路径列表</span></span><br><span class="line">    img_paths = [<span class="string">&quot;image1.jpg&quot;</span>, <span class="string">&quot;image2.jpg&quot;</span>, <span class="string">&quot;image3.jpg&quot;</span>, <span class="string">&quot;image4.jpg&quot;</span>]  <span class="comment"># 你可以根据需要填充图片路径</span></span><br><span class="line">    start_multiprocessing(computation, img_paths)</span><br></pre></td></tr></table></figure><ul><li><code>mp.spawn</code> 是 PyTorch 的多进程模块提供的一个函数，用于方便地启动多个子进程（workers）。这个函数会为每个子进程调用指定的目标函数，并传递相应的参数。</li></ul><p><strong><code>args=(world_size, elapsed_times) + args</code></strong>:</p><ul><li><p>这个参数定义了要传递给 <code>computation_func</code></p><p> 的参数。它由几个部分组成：</p><ul><li>**<code>world_size</code>**：当前可用的 GPU 数量，作为第一个参数传递给 <code>computation_func</code>。</li><li>**<code>elapsed_times</code>**：共享的列表，用于存储每个进程的计算耗时，也是作为第二个参数传递。</li><li>**<code>+ args</code>**：<code>args</code> 是一个可变参数列表，代表在调用 <code>start_multiprocessing</code> 时传递给函数的任何额外参数。这些参数会被附加到 <code>world_size</code> 和 <code>elapsed_times</code> 之后一起传递给 <code>computation_func</code>。</li></ul></li></ul><p><strong><code>nprocs=world_size</code></strong>:</p><ul><li>这个参数指定要启动的子进程数量。通常，<code>world_size</code> 是可用 GPU 的数量，所以这个参数表示我们希望在每个可用的 GPU 上启动一个进程，从而实现并行处理。</li></ul><p><strong><code>join=True</code></strong>:</p><ul><li>这个参数控制 <code>mp.spawn</code> 的行为。当设置为 <code>True</code> 时，主进程会等待所有的子进程完成后再继续执行后续代码。如果设置为 <code>False</code>，主进程将不会等待子进程的完成。</li><li>一般来说，建议设置为 <code>True</code>，以确保主进程在所有子进程完成后再进行后续处理，比如计算总耗时等。</li></ul><h2 id="三、mp-可用代码"><a href="#三、mp-可用代码" class="headerlink" title="三、mp-可用代码"></a>三、mp-可用代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> torch.distributed <span class="keyword">as</span> dist</span><br><span class="line"><span class="keyword">import</span> torch.multiprocessing <span class="keyword">as</span> mp</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> models, transforms</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torchvision.models <span class="keyword">import</span> ResNet50_Weights</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查并安装 tqdm</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">install_tqdm</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">import</span> tqdm</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;tqdm 已安装，不需要重复安装。&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> ModuleNotFoundError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;tqdm 未安装，正在使用 pip 自动安装...&quot;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            subprocess.check_call([<span class="string">f&quot;<span class="subst">&#123;os.getenv(<span class="string">&#x27;CONDA_PREFIX&#x27;</span>)&#125;</span>/bin/pip&quot;</span>, <span class="string">&quot;install&quot;</span>, <span class="string">&quot;tqdm&quot;</span>, <span class="string">&quot;-i&quot;</span>, <span class="string">&quot;https://pypi.tuna.tsinghua.edu.cn/simple&quot;</span>])</span><br><span class="line">            <span class="keyword">import</span> tqdm</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;tqdm 安装成功！&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;tqdm 安装失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查系统信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">system_info</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;系统信息:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;操作系统: <span class="subst">&#123;platform.system()&#125;</span> <span class="subst">&#123;platform.release()&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> platform.system() == <span class="string">&#x27;Linux&#x27;</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/etc/os-release&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&quot;PRETTY_NAME&quot;</span> <span class="keyword">in</span> line:</span><br><span class="line">                        ubuntu_version = line.split(<span class="string">&quot;=&quot;</span>)[<span class="number">1</span>].strip().strip(<span class="string">&#x27;&quot;&#x27;</span>)</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">f&quot;Ubuntu 版本: <span class="subst">&#123;ubuntu_version&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;无法获取 Ubuntu 版本信息: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Ubuntu 版本: N/A&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Python 版本: <span class="subst">&#123;platform.python_version()&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Conda 虚拟环境: <span class="subst">&#123;os.getenv(<span class="string">&#x27;CONDA_DEFAULT_ENV&#x27;</span>, <span class="string">&#x27;Not in a conda environment&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 PyTorch 和 CUDA 信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pytorch_cuda_info</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;PyTorch 和 CUDA 信息:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;PyTorch 版本: <span class="subst">&#123;torch.__version__&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;CUDA 可用性: <span class="subst">&#123;torch.cuda.is_available()&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;CUDA 版本: <span class="subst">&#123;torch.version.cuda&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;cuDNN 版本: <span class="subst">&#123;torch.backends.cudnn.version()&#125;</span>&quot;</span>)</span><br><span class="line">        gpu_count = torch.cuda.device_count()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;检测到 <span class="subst">&#123;gpu_count&#125;</span> 个 GPU&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(gpu_count):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;GPU <span class="subst">&#123;i&#125;</span> 名称: <span class="subst">&#123;torch.cuda.get_device_name(i)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;CUDA 未启用，请检查 CUDA 安装&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 PyTorch 是否调用了虚拟环境中的版本</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_virtual_env</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在检查是否使用虚拟环境中的 PyTorch 版本...&quot;</span>)</span><br><span class="line">    conda_env = os.getenv(<span class="string">&#x27;CONDA_DEFAULT_ENV&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">if</span> conda_env:</span><br><span class="line">        pytorch_path = torch.__file__</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;PyTorch 安装路径: <span class="subst">&#123;pytorch_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> conda_env <span class="keyword">in</span> pytorch_path:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;PyTorch 来自虚拟环境 &#x27;<span class="subst">&#123;conda_env&#125;</span>&#x27;&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;警告: PyTorch 没有来自当前虚拟环境&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;未在 Conda 虚拟环境中运行&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 DDP</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setup_ddp</span>(<span class="params">rank, world_size</span>):</span><br><span class="line">    os.environ[<span class="string">&#x27;MASTER_ADDR&#x27;</span>] = <span class="string">&#x27;localhost&#x27;</span></span><br><span class="line">    os.environ[<span class="string">&#x27;MASTER_PORT&#x27;</span>] = <span class="string">&#x27;12355&#x27;</span></span><br><span class="line">    dist.init_process_group(<span class="string">&quot;nccl&quot;</span>, rank=rank, world_size=world_size)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 任务划分</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">divide_images</span>(<span class="params">img_paths, world_size</span>):</span><br><span class="line">    total_images = <span class="built_in">len</span>(img_paths)</span><br><span class="line">    base_count = total_images // world_size</span><br><span class="line">    extra_count = total_images % world_size</span><br><span class="line">    </span><br><span class="line">    image_lists = []</span><br><span class="line">    start_index = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(world_size):</span><br><span class="line">        <span class="comment"># 每个 GPU 分配基本数量 + 可能的额外图片</span></span><br><span class="line">        end_index = start_index + base_count + (<span class="number">1</span> <span class="keyword">if</span> i &lt; extra_count <span class="keyword">else</span> <span class="number">0</span>)</span><br><span class="line">        image_lists.append(img_paths[start_index:end_index])</span><br><span class="line">        start_index = end_index</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> image_lists</span><br><span class="line"></span><br><span class="line"><span class="comment"># 大量图片运算测试函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">image_computation_test</span>(<span class="params">rank, world_size, img_paths, elapsed_times</span>):</span><br><span class="line">    setup_ddp(rank, world_size)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Rank <span class="subst">&#123;rank&#125;</span>/<span class="subst">&#123;world_size&#125;</span> 开始工作...&quot;</span>)</span><br><span class="line">    device = <span class="string">f&quot;cuda:<span class="subst">&#123;rank&#125;</span>&quot;</span>  <span class="comment"># 每个进程使用不同的 GPU</span></span><br><span class="line">    </span><br><span class="line">    model = models.resnet50(weights=ResNet50_Weights.DEFAULT).to(device)</span><br><span class="line">    model = nn.parallel.DistributedDataParallel(model, device_ids=[rank])</span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 图片预处理</span></span><br><span class="line">    preprocess = transforms.Compose([</span><br><span class="line">        transforms.Resize(<span class="number">256</span>),</span><br><span class="line">        transforms.CenterCrop(<span class="number">224</span>),</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize(mean=[<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], std=[<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>]),</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 分配给当前 rank 的图片</span></span><br><span class="line">    assigned_images = img_paths[rank]  <span class="comment"># 从分配的图片列表中获取</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> img_path <span class="keyword">in</span> assigned_images:</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(img_path):</span><br><span class="line">            img = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line">            img_tensor = preprocess(img).unsqueeze(<span class="number">0</span>).to(device)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 设置迭代次数模拟大量计算</span></span><br><span class="line">            iterations = <span class="number">8000</span></span><br><span class="line">            success = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(iterations), desc=<span class="string">f&quot;处理 <span class="subst">&#123;img_path&#125;</span>&quot;</span>):</span><br><span class="line">                    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">                        output = model(img_tensor)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;运算失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">                success = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> success:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Rank <span class="subst">&#123;rank&#125;</span> 运算结束，处理了 <span class="subst">&#123;iterations&#125;</span> 次图片 &#x27;<span class="subst">&#123;img_path&#125;</span>&#x27;&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Rank <span class="subst">&#123;rank&#125;</span> 图片 &#x27;<span class="subst">&#123;img_path&#125;</span>&#x27; 运算失败&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;图片 &#x27;<span class="subst">&#123;img_path&#125;</span>&#x27; 未找到，请检查路径。&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    elapsed = time.time() - start_time</span><br><span class="line">    elapsed_times[rank] = elapsed</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Rank <span class="subst">&#123;rank&#125;</span> 总耗时: <span class="subst">&#123;elapsed:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动多进程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start_multiprocessing</span>():</span><br><span class="line">    world_size = torch.cuda.device_count()</span><br><span class="line">    <span class="keyword">if</span> world_size &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;没有可用的 GPU，退出。&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;可用 GPU 数量: <span class="subst">&#123;world_size&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    img_paths = glob.glob(<span class="string">&quot;*.jpg&quot;</span>) + glob.glob(<span class="string">&quot;*.png&quot;</span>)  <span class="comment"># 获取所有图片</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> img_paths:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;没有找到任何图片，请检查路径。&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将图片划分为每个进程的任务</span></span><br><span class="line">    image_lists = divide_images(img_paths, world_size)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建一个共享列表来存储每个进程的耗时</span></span><br><span class="line">    elapsed_times = mp.Manager().<span class="built_in">list</span>([<span class="number">0</span>] * world_size)</span><br><span class="line">    </span><br><span class="line">    start_time = time.time()  <span class="comment"># 记录并行计算开始时间</span></span><br><span class="line">    mp.spawn(image_computation_test, args=(world_size, image_lists, elapsed_times), nprocs=world_size, join=<span class="literal">True</span>)</span><br><span class="line">    end_time = time.time()  <span class="comment"># 记录并行计算结束时间</span></span><br><span class="line"></span><br><span class="line">    total_time = <span class="built_in">sum</span>(elapsed_times)</span><br><span class="line">    parallel_elapsed_time = end_time - start_time  <span class="comment"># 计算并行计算的耗时</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n并行计算耗时: <span class="subst">&#123;parallel_elapsed_time:<span class="number">.2</span>f&#125;</span> 秒，（若仅有一个GPU，仅看Rank耗时即可，此项统计可忽略。）&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;所有 GPU 总共耗时: <span class="subst">&#123;total_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> rank, elapsed <span class="keyword">in</span> <span class="built_in">enumerate</span>(elapsed_times):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Rank <span class="subst">&#123;rank&#125;</span> 耗时: <span class="subst">&#123;elapsed:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line"></span><br><span class="line">    total_elapsed_time = end_time - start_time</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n总共实际耗时: <span class="subst">&#123;total_elapsed_time:<span class="number">.2</span>f&#125;</span> 秒； （若仅有一个GPU，仅看Rank耗时即可，此项统计可忽略。）&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    install_tqdm()  <span class="comment"># 安装 tqdm</span></span><br><span class="line">    system_info()  <span class="comment"># 输出系统信息</span></span><br><span class="line">    pytorch_cuda_info()  <span class="comment"># 输出 PyTorch 和 CUDA 信息</span></span><br><span class="line">    check_virtual_env()  <span class="comment"># 检查 PyTorch 是否来自虚拟环境</span></span><br><span class="line">    </span><br><span class="line">    start_multiprocessing()  <span class="comment"># 启动多进程运算</span></span><br></pre></td></tr></table></figure><h2 id="四、ddp精简逻辑"><a href="#四、ddp精简逻辑" class="headerlink" title="四、ddp精简逻辑"></a>四、ddp精简逻辑</h2><p>以下是精简的 DDP 结构示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.distributed <span class="keyword">as</span> dist</span><br><span class="line"><span class="keyword">import</span> torch.multiprocessing <span class="keyword">as</span> mp</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn.parallel <span class="keyword">import</span> DistributedDataParallel <span class="keyword">as</span> DDP</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader, DistributedSampler, TensorDataset</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化分布式训练环境</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setup</span>(<span class="params">rank, world_size</span>):</span><br><span class="line">    os.environ[<span class="string">&#x27;MASTER_ADDR&#x27;</span>] = <span class="string">&#x27;localhost&#x27;</span></span><br><span class="line">    os.environ[<span class="string">&#x27;MASTER_PORT&#x27;</span>] = <span class="string">&#x27;12355&#x27;</span></span><br><span class="line">    dist.init_process_group(<span class="string">&quot;nccl&quot;</span>, rank=rank, world_size=world_size)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 销毁进程组</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cleanup</span>():</span><br><span class="line">    dist.destroy_process_group()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义模型（替换成你自己的模型）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_model</span>():</span><br><span class="line">    <span class="keyword">return</span> nn.Linear(<span class="number">10</span>, <span class="number">2</span>)  <span class="comment"># 简单线性层示例</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义数据加载（替换成你自己的数据加载逻辑）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_dataloader</span>(<span class="params">rank, world_size</span>):</span><br><span class="line">    data = torch.randn(<span class="number">1000</span>, <span class="number">10</span>)  <span class="comment"># 假设 1000 个样本，每个 10 个特征</span></span><br><span class="line">    labels = torch.randint(<span class="number">0</span>, <span class="number">2</span>, (<span class="number">1000</span>,))  <span class="comment"># 假设二分类</span></span><br><span class="line">    dataset = TensorDataset(data, labels)</span><br><span class="line">    sampler = DistributedSampler(dataset, num_replicas=world_size, rank=rank)</span><br><span class="line">    <span class="keyword">return</span> DataLoader(dataset, batch_size=<span class="number">32</span>, sampler=sampler)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练逻辑（替换成你自己的训练逻辑）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">rank, world_size</span>):</span><br><span class="line">    setup(rank, world_size)</span><br><span class="line">    device = torch.device(<span class="string">f&quot;cuda:<span class="subst">&#123;rank&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化模型和数据</span></span><br><span class="line">    model = create_model().to(device)</span><br><span class="line">    model = DDP(model, device_ids=[rank])</span><br><span class="line">    dataloader = create_dataloader(rank, world_size)</span><br><span class="line">    criterion = nn.CrossEntropyLoss()</span><br><span class="line">    optimizer = torch.optim.SGD(model.parameters(), lr=<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练循环</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):  <span class="comment"># 假设 5 个训练轮次</span></span><br><span class="line">        <span class="keyword">for</span> inputs, labels <span class="keyword">in</span> dataloader:</span><br><span class="line">            inputs, labels = inputs.to(device), labels.to(device)</span><br><span class="line">            outputs = model(inputs)</span><br><span class="line">            loss = criterion(outputs, labels)</span><br><span class="line"></span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Rank <span class="subst">&#123;rank&#125;</span>, Epoch <span class="subst">&#123;epoch&#125;</span>, Loss: <span class="subst">&#123;loss.item():<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">    cleanup()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动多进程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    world_size = torch.cuda.device_count()</span><br><span class="line">    mp.spawn(train, args=(world_size,), nprocs=world_size, join=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="模块化的逻辑说明"><a href="#模块化的逻辑说明" class="headerlink" title="模块化的逻辑说明"></a>模块化的逻辑说明</h3><ol><li>**<code>setup</code> 和 <code>cleanup</code>**：用于初始化和销毁分布式进程组。</li><li>**<code>create_model</code>**：定义模型结构，直接替换成你自己的模型。</li><li>**<code>create_dataloader</code>**：创建数据加载器，使用 <code>DistributedSampler</code> 确保每个进程获得数据的不同部分。</li><li>**<code>train</code>**：封装训练逻辑。模型、数据、损失函数和优化器定义在此函数中。训练代码逻辑直接可以替换。</li></ol><p>这个结构方便修改模型和数据加载逻辑，同时保留 DDP 的核心初始化和训练逻辑。</p><p>以下是 DDP 在代码中的核心环节，以及实现效果的关键代码讲解：</p><h3 id="1-初始化分布式进程-setup-函数"><a href="#1-初始化分布式进程-setup-函数" class="headerlink" title="1. 初始化分布式进程 (setup 函数)"></a>1. 初始化分布式进程 (<code>setup</code> 函数)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">setup</span>(<span class="params">rank, world_size</span>):</span><br><span class="line">    os.environ[<span class="string">&#x27;MASTER_ADDR&#x27;</span>] = <span class="string">&#x27;localhost&#x27;</span>      <span class="comment"># 设置主节点地址</span></span><br><span class="line">    os.environ[<span class="string">&#x27;MASTER_PORT&#x27;</span>] = <span class="string">&#x27;12355&#x27;</span>          <span class="comment"># 设置主节点端口</span></span><br><span class="line">    dist.init_process_group(<span class="string">&quot;nccl&quot;</span>, rank=rank, world_size=world_size)  <span class="comment"># 初始化进程组</span></span><br></pre></td></tr></table></figure><ul><li>**<code>MASTER_ADDR</code> 和 <code>MASTER_PORT</code>**：指定主进程的地址和端口，以便所有 GPU 进程能通过这个主节点进行通信。这里设置为本地通信（<code>localhost</code>），适合单机多卡情况。</li><li>**<code>dist.init_process_group</code>**：初始化分布式进程组，指定使用 <code>&quot;nccl&quot;</code> 后端（针对 GPU 的高效通信框架）。这个过程会在每个 GPU 上创建一个进程，参与模型的同步。</li></ul><blockquote><p><strong>作用</strong>：在 DDP 中，必须在每个 GPU 进程上初始化一个分布式进程组。<code>nccl</code> 能更高效地处理 GPU 间通信。</p></blockquote><h3 id="2-模型的分布式封装-DDP-包装模型"><a href="#2-模型的分布式封装-DDP-包装模型" class="headerlink" title="2. 模型的分布式封装 (DDP 包装模型)"></a>2. 模型的分布式封装 (<code>DDP</code> 包装模型)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">device = torch.device(<span class="string">f&quot;cuda:<span class="subst">&#123;rank&#125;</span>&quot;</span>)</span><br><span class="line">model = create_model().to(device)</span><br><span class="line">model = DDP(model, device_ids=[rank])</span><br></pre></td></tr></table></figure><ul><li>**<code>to(device)</code>**：将模型移到指定的 GPU 上，确保每个进程在特定的 GPU（由 <code>rank</code> 指定）上执行。</li><li>**<code>DDP(model, device_ids=[rank])</code>**：通过 <code>DDP</code> 封装模型，以便在训练过程中自动处理梯度同步。每次反向传播后，DDP 会自动在每个 GPU 进程之间同步梯度。</li></ul><blockquote><p><strong>作用</strong>：封装后的模型会在每个 GPU 之间自动同步参数。每次 <code>backward()</code> 调用时，DDP 会收集所有 GPU 的梯度并计算平均值，再将平均后的梯度分发到每个 GPU，确保模型参数在所有设备上一致。</p></blockquote><h3 id="3-数据并行化-DistributedSampler"><a href="#3-数据并行化-DistributedSampler" class="headerlink" title="3. 数据并行化 (DistributedSampler)"></a>3. 数据并行化 (<code>DistributedSampler</code>)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sampler = DistributedSampler(dataset, num_replicas=world_size, rank=rank)</span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">32</span>, sampler=sampler)</span><br></pre></td></tr></table></figure><ul><li>**<code>DistributedSampler</code>**：数据加载器的采样器，确保每个 GPU 进程读取数据集的不同部分，避免数据重复。</li><li>**<code>num_replicas=world_size</code>**：指定进程数量，保证数据集分配给所有进程。</li><li>**<code>rank=rank</code>**：指定当前进程的 GPU ID，使每个 GPU 加载不同的样本。</li></ul><blockquote><p><strong>作用</strong>：确保每个进程处理数据集的不同部分，从而充分利用多 GPU 资源。同时避免多 GPU 处理相同数据的重复计算。</p></blockquote><h3 id="4-自动梯度同步和参数更新"><a href="#4-自动梯度同步和参数更新" class="headerlink" title="4. 自动梯度同步和参数更新"></a>4. 自动梯度同步和参数更新</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> inputs, labels <span class="keyword">in</span> dataloader:</span><br><span class="line">    inputs, labels = inputs.to(device), labels.to(device)</span><br><span class="line">    outputs = model(inputs)</span><br><span class="line">    loss = criterion(outputs, labels)</span><br><span class="line"></span><br><span class="line">    optimizer.zero_grad()</span><br><span class="line">    loss.backward()   <span class="comment"># 自动同步梯度</span></span><br><span class="line">    optimizer.step()   <span class="comment"># 参数更新</span></span><br></pre></td></tr></table></figure><ul><li>**<code>loss.backward()</code>**：反向传播时，DDP 会自动将各 GPU 进程的梯度同步并计算平均值。每个 GPU 上的模型参数通过梯度更新保持一致。</li><li>**<code>optimizer.step()</code>**：在所有进程中执行参数更新，确保下一步前参数保持同步。</li></ul><blockquote><p><strong>作用</strong>：在反向传播的同时完成梯度同步，确保各个 GPU 进程的模型更新一致，实现真正的分布式数据并行。</p></blockquote><h3 id="5-结束分布式训练-cleanup"><a href="#5-结束分布式训练-cleanup" class="headerlink" title="5. 结束分布式训练 (cleanup)"></a>5. 结束分布式训练 (<code>cleanup</code>)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cleanup</span>():</span><br><span class="line">    dist.destroy_process_group()</span><br></pre></td></tr></table></figure><ul><li>**<code>dist.destroy_process_group()</code>**：销毁进程组，释放 GPU 资源，结束分布式训练。</li></ul><blockquote><p><strong>作用</strong>：在训练完成后清理资源，避免 GPU 资源占用或潜在的内存泄漏。</p></blockquote><h1 id="一个我经常用的例子"><a href="#一个我经常用的例子" class="headerlink" title="一个我经常用的例子"></a>一个我经常用的例子</h1><p>这个是做 环境部署和GPU性能检测的。<img src="/2024/10/25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%A3%80%E6%9F%A5cuda_pytorch_nvidia%E5%AE%89%E8%A3%85%E6%83%85%E5%86%B5%E8%84%9A%E6%9C%AC/ddp.jpg" alt="ddp"></p><p><code>ddp5_env_check.py</code>  </p><blockquote><p>他会检测 驱动 torch conda等情况，并用此脚本文件夹中图片做多GPU测试。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> torch.distributed <span class="keyword">as</span> dist</span><br><span class="line"><span class="keyword">import</span> torch.multiprocessing <span class="keyword">as</span> mp</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> models, transforms</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torchvision.models <span class="keyword">import</span> ResNet50_Weights</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="comment"># from tqdm import tqdm</span></span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset, DataLoader, DistributedSampler</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查并安装 tqdm</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">install_tqdm</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">import</span> tqdm</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;tqdm 已安装，不需要重复安装。&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> ModuleNotFoundError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;tqdm 未安装，正在使用 pip 自动安装...&quot;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            subprocess.check_call([<span class="string">f&quot;<span class="subst">&#123;os.getenv(<span class="string">&#x27;CONDA_PREFIX&#x27;</span>)&#125;</span>/bin/pip&quot;</span>, <span class="string">&quot;install&quot;</span>, <span class="string">&quot;tqdm&quot;</span>, <span class="string">&quot;-i&quot;</span>, <span class="string">&quot;https://pypi.tuna.tsinghua.edu.cn/simple&quot;</span>])</span><br><span class="line">            <span class="keyword">import</span> tqdm</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;tqdm 安装成功！&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;tqdm 安装失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查系统信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">system_info</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;系统信息:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;操作系统: <span class="subst">&#123;platform.system()&#125;</span> <span class="subst">&#123;platform.release()&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> platform.system() == <span class="string">&#x27;Linux&#x27;</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/etc/os-release&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&quot;PRETTY_NAME&quot;</span> <span class="keyword">in</span> line:</span><br><span class="line">                        ubuntu_version = line.split(<span class="string">&quot;=&quot;</span>)[<span class="number">1</span>].strip().strip(<span class="string">&#x27;&quot;&#x27;</span>)</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">f&quot;Ubuntu 版本: <span class="subst">&#123;ubuntu_version&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;无法获取 Ubuntu 版本信息: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Ubuntu 版本: N/A&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Python 版本: <span class="subst">&#123;platform.python_version()&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Conda 虚拟环境: <span class="subst">&#123;os.getenv(<span class="string">&#x27;CONDA_DEFAULT_ENV&#x27;</span>, <span class="string">&#x27;Not in a conda environment&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 PyTorch 和 CUDA 信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pytorch_cuda_info</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;PyTorch 和 CUDA 信息:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;PyTorch 版本: <span class="subst">&#123;torch.__version__&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;CUDA 可用性: <span class="subst">&#123;torch.cuda.is_available()&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;CUDA 版本: <span class="subst">&#123;torch.version.cuda&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;cuDNN 版本: <span class="subst">&#123;torch.backends.cudnn.version()&#125;</span>&quot;</span>)</span><br><span class="line">        gpu_count = torch.cuda.device_count()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;检测到 <span class="subst">&#123;gpu_count&#125;</span> 个 GPU&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(gpu_count):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;GPU <span class="subst">&#123;i&#125;</span> 名称: <span class="subst">&#123;torch.cuda.get_device_name(i)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;CUDA 未启用，请检查 CUDA 安装&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 PyTorch 是否调用了虚拟环境中的版本</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_virtual_env</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在检查是否使用虚拟环境中的 PyTorch 版本...&quot;</span>)</span><br><span class="line">    conda_env = os.getenv(<span class="string">&#x27;CONDA_DEFAULT_ENV&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">if</span> conda_env:</span><br><span class="line">        pytorch_path = torch.__file__</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;PyTorch 安装路径: <span class="subst">&#123;pytorch_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> conda_env <span class="keyword">in</span> pytorch_path:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;PyTorch 来自虚拟环境 &#x27;<span class="subst">&#123;conda_env&#125;</span>&#x27;&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;警告: PyTorch 没有来自当前虚拟环境&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;未在 Conda 虚拟环境中运行&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ImageDataset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, img_paths, transform</span>):</span><br><span class="line">        self.img_paths = img_paths</span><br><span class="line">        self.transform = transform</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.img_paths)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, idx</span>):</span><br><span class="line">        img_path = self.img_paths[idx]</span><br><span class="line">        img = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line">        <span class="keyword">if</span> self.transform:</span><br><span class="line">            img = self.transform(img)</span><br><span class="line">        <span class="keyword">return</span> img, img_path</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">image_computation_test</span>(<span class="params">local_rank, args</span>):</span><br><span class="line">    <span class="comment"># 初始化进程组</span></span><br><span class="line">    torch.cuda.set_device(local_rank)</span><br><span class="line">    dist.init_process_group(backend=<span class="string">&quot;nccl&quot;</span>, </span><br><span class="line">                          init_method=<span class="string">f&quot;env://&quot;</span>,</span><br><span class="line">                          world_size=args.n_gpus,</span><br><span class="line">                          rank=local_rank)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Rank <span class="subst">&#123;local_rank&#125;</span>/<span class="subst">&#123;args.n_gpus&#125;</span> 开始工作...&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 初始化模型</span></span><br><span class="line">    model = models.resnet50(weights=ResNet50_Weights.DEFAULT).cuda(local_rank)</span><br><span class="line">    model = nn.parallel.DistributedDataParallel(model, device_ids=[local_rank])</span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 图片预处理</span></span><br><span class="line">    preprocess = transforms.Compose([</span><br><span class="line">        transforms.Resize(<span class="number">256</span>),</span><br><span class="line">        transforms.CenterCrop(<span class="number">224</span>),</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize(mean=[<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], std=[<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>]),</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建数据集和数据加载器</span></span><br><span class="line">    dataset = ImageDataset(args.img_paths, preprocess)</span><br><span class="line">    sampler = DistributedSampler(dataset)</span><br><span class="line">    dataloader = DataLoader(dataset, </span><br><span class="line">                          batch_size=args.batch_size,</span><br><span class="line">                          sampler=sampler,</span><br><span class="line">                          num_workers=args.num_workers,</span><br><span class="line">                          pin_memory=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    start_time = time.time()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(args.epochs):</span><br><span class="line">        <span class="keyword">if</span> local_rank == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;\nEpoch <span class="subst">&#123;epoch+<span class="number">1</span>&#125;</span>/<span class="subst">&#123;args.epochs&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        sampler.set_epoch(epoch)  <span class="comment"># 确保每个epoch的数据顺序不同</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> img_tensor, img_path <span class="keyword">in</span> dataloader:</span><br><span class="line">            img_tensor = img_tensor.cuda(local_rank)</span><br><span class="line">            iterations = args.iterations</span><br><span class="line">            success = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(iterations), </span><br><span class="line">                            desc=<span class="string">f&quot;Epoch <span class="subst">&#123;epoch+<span class="number">1</span>&#125;</span>, 处理 <span class="subst">&#123;img_path[<span class="number">0</span>]&#125;</span>&quot;</span>, </span><br><span class="line">                            disable=local_rank!=<span class="number">0</span>):</span><br><span class="line">                    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">                        output = model(img_tensor)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;运算失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">                success = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> success:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Rank <span class="subst">&#123;local_rank&#125;</span> 运算结束，处理了 <span class="subst">&#123;iterations&#125;</span> 次图片 &#x27;<span class="subst">&#123;img_path[<span class="number">0</span>]&#125;</span>&#x27;&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Rank <span class="subst">&#123;local_rank&#125;</span> 图片 &#x27;<span class="subst">&#123;img_path[<span class="number">0</span>]&#125;</span>&#x27; 运算失败&quot;</span>)</span><br><span class="line"></span><br><span class="line">    elapsed = time.time() - start_time</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Rank <span class="subst">&#123;local_rank&#125;</span> 总耗时: <span class="subst">&#123;elapsed:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 同步所有进程的时间</span></span><br><span class="line">    elapsed_tensor = torch.tensor([elapsed], device=<span class="string">f&quot;cuda:<span class="subst">&#123;local_rank&#125;</span>&quot;</span>)</span><br><span class="line">    gathered_times = [torch.zeros_like(elapsed_tensor) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(args.n_gpus)]</span><br><span class="line">    dist.all_gather(gathered_times, elapsed_tensor)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> local_rank == <span class="number">0</span>:</span><br><span class="line">        total_time = <span class="built_in">sum</span>(t.item() <span class="keyword">for</span> t <span class="keyword">in</span> gathered_times)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\n并行计算耗时: <span class="subst">&#123;elapsed:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;所有 GPU 总共耗时: <span class="subst">&#123;total_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> rank, time_val <span class="keyword">in</span> <span class="built_in">enumerate</span>(gathered_times):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Rank <span class="subst">&#123;rank&#125;</span> 耗时: <span class="subst">&#123;time_val.item():<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\n总共实际耗时: <span class="subst">&#123;elapsed:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line"></span><br><span class="line">    dist.destroy_process_group()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&#x27;多GPU分布式图像处理测试&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 分布式训练相关参数</span></span><br><span class="line">    <span class="comment"># parser.add_argument(&#x27;--local_rank&#x27;, type=int, default=-1,</span></span><br><span class="line">    <span class="comment">#                     help=&#x27;DDP参数，由torch.distributed.launch自动传入&#x27;)</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--n_gpus&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">1</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;使用的GPU数量&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 数据加载相关参数</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--batch_size&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">1</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;每个GPU的batch size&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--num_workers&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">4</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;数据加载的worker数量&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 训练相关参数</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--epochs&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">1</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;运行的epoch数量&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--iterations&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">8000</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;每张图片的处理迭代次数&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 其他参数</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--seed&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">42</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;随机种子&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    args.local_rank = <span class="built_in">int</span>(os.environ[<span class="string">&quot;LOCAL_RANK&quot;</span>])   <span class="comment"># 将环境变量中的 local_rank 添加到 args</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置随机种子</span></span><br><span class="line">    torch.manual_seed(args.seed)</span><br><span class="line">    <span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">        torch.cuda.manual_seed_all(args.seed)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.local_rank == <span class="number">0</span>:</span><br><span class="line">        install_tqdm()</span><br><span class="line">        system_info()</span><br><span class="line">        pytorch_cuda_info()</span><br><span class="line">        check_virtual_env()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> torch.cuda.is_available():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;没有可用的 GPU，退出。&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.local_rank == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;使用 GPU 数量: <span class="subst">&#123;args.n_gpus&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取所有图片路径</span></span><br><span class="line">    img_paths = glob.glob(<span class="string">&quot;*.jpg&quot;</span>) + glob.glob(<span class="string">&quot;*.png&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> img_paths:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;没有找到任何图片，请检查路径。&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    args.img_paths = img_paths</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 运行计算测试</span></span><br><span class="line">    image_computation_test(args.local_rank, args)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">【使用方法】</span></span><br><span class="line"><span class="string">(淘汰)</span></span><br><span class="line"><span class="string">python -m torch.distributed.launch \</span></span><br><span class="line"><span class="string">    --nproc_per_node=4 \</span></span><br><span class="line"><span class="string">    --master_port=29500 \</span></span><br><span class="line"><span class="string">    script_name.py \</span></span><br><span class="line"><span class="string">    --n_gpus=4 \</span></span><br><span class="line"><span class="string">    --batch_size=32 \</span></span><br><span class="line"><span class="string">    --epochs=10 \</span></span><br><span class="line"><span class="string">    --num_workers=4 \</span></span><br><span class="line"><span class="string">    --iterations=8000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">torchrun \</span></span><br><span class="line"><span class="string">    --nproc_per_node=4 \</span></span><br><span class="line"><span class="string">    --master_port=29500 \</span></span><br><span class="line"><span class="string">    script_name.py \</span></span><br><span class="line"><span class="string">    --n_gpus=4 \</span></span><br><span class="line"><span class="string">    --batch_size=32 \</span></span><br><span class="line"><span class="string">    --epochs=10 \</span></span><br><span class="line"><span class="string">    --num_workers=4 \</span></span><br><span class="line"><span class="string">    --iterations=8000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">实际上发生的是：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">整个脚本会被启动4次（假设使用4个GPU）</span></span><br><span class="line"><span class="string">每次启动都是完整的脚本</span></span><br><span class="line"><span class="string">每个进程都有不同的 local_rank 值（0,1,2,3）</span></span><br><span class="line"><span class="string">每个进程被分配到不同的 GPU</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><code>start_ddp.sh</code> 平时运行它、修改它就好了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------</span></span><br><span class="line"><span class="comment"># 分布式训练启动脚本</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># 当使用 torch.distributed.launch 启动时：</span></span><br><span class="line"><span class="comment"># 1. 这个命令会自动启动n个进程(n=nproc_per_node指定的数量)</span></span><br><span class="line"><span class="comment"># 2. 每个进程都会运行同一个Python脚本(multi_gpu_process.py)</span></span><br><span class="line"><span class="comment"># 3. 每个进程会被自动分配一个local_rank(0,1,2,3...)</span></span><br><span class="line"><span class="comment"># 4. 每个进程会被自动分配到对应的GPU上</span></span><br><span class="line"><span class="comment"># ---------------------------------------------</span></span><br><span class="line"></span><br><span class="line">torchrun \</span><br><span class="line">   --nproc_per_node=2 \</span><br><span class="line">   --master_port=29501 \</span><br><span class="line">   ddp5_env_check.py \</span><br><span class="line">   --n_gpus=2 \</span><br><span class="line">   --batch_size=32 \</span><br><span class="line">   --epochs=10 \</span><br><span class="line">   --num_workers=4 \</span><br><span class="line">   --iterations=800</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------</span></span><br><span class="line"><span class="comment"># 参数说明：</span></span><br><span class="line"><span class="comment"># --nproc_per_node: 要启动的进程数，通常等于GPU数量</span></span><br><span class="line"><span class="comment"># --master_port: 主进程的通信端口</span></span><br><span class="line"><span class="comment"># --n_gpus: 传递给Python脚本的GPU数量参数</span></span><br><span class="line"><span class="comment"># --batch_size: 每个GPU的批处理大小</span></span><br><span class="line"><span class="comment"># --epochs: 训练轮数</span></span><br><span class="line"><span class="comment"># --num_workers: 数据加载的工作进程数</span></span><br><span class="line"><span class="comment"># --iterations: 每张图片的处理迭代次数</span></span><br><span class="line"><span class="comment"># ---------------------------------------------</span></span><br></pre></td></tr></table></figure><p> 以上 例子 需要说明的是 ddp 方式 来做 多进程的 GPU 操作，是不存在主进程的，实际是 用 rank0 所在的进程兼职了主进程，它一边运行着自己的GPU训练一边兼职了主进程的活。所以 我们上面写的 统计 总共用时的写法 是不准确的，事实上也只会 体现出 rank0的 运行时间，但是 我没有想看那么精确 也就没有改了。</p>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="机器学习" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="cuda" scheme="http://example.com/tags/cuda/"/>
    
    <category term="pytorch" scheme="http://example.com/tags/pytorch/"/>
    
    <category term="Nvidia驱动" scheme="http://example.com/tags/Nvidia%E9%A9%B1%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>两个20T硬盘做raid</title>
    <link href="http://example.com/2024/10/21/%E8%A3%85%E6%9C%BA/%E4%B8%A4%E4%B8%AA20T%E7%A1%AC%E7%9B%98%E5%81%9Araid/"/>
    <id>http://example.com/2024/10/21/%E8%A3%85%E6%9C%BA/%E4%B8%A4%E4%B8%AA20T%E7%A1%AC%E7%9B%98%E5%81%9Araid/</id>
    <published>2024-10-21T15:12:18.000Z</published>
    <updated>2024-10-21T07:18:12.653Z</updated>
    
    <content type="html"><![CDATA[<h1 id="先说结论"><a href="#先说结论" class="headerlink" title="先说结论"></a>先说结论</h1><p>不推荐这样在系统层面作raid，因为性能发挥不出来。以下所有都是自娱自乐，干活还得是在bios层面先做好raid，系统直接识别成一个盘，性能才能发挥出来。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="识别"><a href="#识别" class="headerlink" title="识别"></a>识别</h2><p>拿到硬盘以后，首先还是要识别一下硬盘。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lsblk</span><br><span class="line"></span><br><span class="line">lsblk -f</span><br><span class="line"></span><br><span class="line">sudo blkid</span><br></pre></td></tr></table></figure><p>一般可以看见多了一个 sda 或者sdb 的磁盘，我的两块磁盘都是20T的比较大。</p><h2 id="创建分区"><a href="#创建分区" class="headerlink" title="创建分区"></a>创建分区</h2><p>依次对两个磁盘创建分区</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gdisk <span class="comment"># 这里不用fdisk了，创建新的 GPT 分区表 所以用gdisk（2T分界线）。</span></span><br><span class="line"></span><br><span class="line">sudo gdisk /dev/sda <span class="comment"># 和fdisk类似，跟着提示来就行，n ... w </span></span><br></pre></td></tr></table></figure><h2 id="格式化分区"><a href="#格式化分区" class="headerlink" title="格式化分区"></a>格式化分区</h2><p>依次对两个磁盘的新分区格式化</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 16T单个文件分界线，大盘推荐 xfs 格式。</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install xfsprogs</span><br><span class="line">sudo mkfs.xfs /dev/sda1 <span class="comment"># 你的磁盘下的分区如sda1 sda2 或者 sdb1、sdc1等等。</span></span><br></pre></td></tr></table></figure><p>此时 <code>lsblk -f</code> 可见 sda磁盘的下面多了一个 sda1的分区，而且格式为 xfs；sdb磁盘的下面多了一个 sdb1的分区，而且格式为 xfs。</p><p><img src="/2024/10/21/%E8%A3%85%E6%9C%BA/%E4%B8%A4%E4%B8%AA20T%E7%A1%AC%E7%9B%98%E5%81%9Araid/1729002987963.jpg" alt="1729002987963"></p><h1 id="raid"><a href="#raid" class="headerlink" title="raid"></a>raid</h1><h2 id="制作raid设备"><a href="#制作raid设备" class="headerlink" title="制作raid设备"></a>制作raid设备</h2><p>在你创建 RAID  阵列时，新的 RAID 阵列会覆盖原有的数据，这样所有多个磁盘上的数据都会被清理干净。</p><h3 id="（一）选择制作做raid1"><a href="#（一）选择制作做raid1" class="headerlink" title="（一）选择制作做raid1"></a>（一）选择制作做raid1</h3><p>20T 和20T作 raid1是一个备份，可以防止数据丢失，但是空间只用的上20T了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install mdadm</span><br><span class="line"></span><br><span class="line"><span class="comment">#  /dev/md0 是 RAID 设备的名称。</span></span><br><span class="line"><span class="comment">#  --level=1 指定 RAID 级别为 1。</span></span><br><span class="line"><span class="comment">#  --raid-devices=2 指定 RAID 中的设备数量。</span></span><br><span class="line">sudo mdadm --create --verbose /dev/md0 --level=1 --raid-devices=2 /dev/sda1 /dev/sdb1</span><br></pre></td></tr></table></figure><h3 id="（二）选择制作做raid0"><a href="#（二）选择制作做raid0" class="headerlink" title="（二）选择制作做raid0"></a>（二）选择制作做raid0</h3><p>20T 和20T作 raid0是纯粹的扩大空间，空间40T了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install mdadm</span><br><span class="line"></span><br><span class="line"><span class="comment">#  /dev/md0 是 RAID 设备的名称。</span></span><br><span class="line"><span class="comment">#  --level=0 指定 RAID 级别为 0。</span></span><br><span class="line"><span class="comment">#  --raid-devices=2 指定 RAID 中的设备数量。</span></span><br><span class="line">sudo mdadm --create --verbose /dev/md0 --level=0 --raid-devices=2 /dev/sda1 /dev/sdb1</span><br></pre></td></tr></table></figure><h3 id="（三）选择制作做raid5"><a href="#（三）选择制作做raid5" class="headerlink" title="（三）选择制作做raid5"></a>（三）选择制作做raid5</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install mdadm</span><br><span class="line"></span><br><span class="line"><span class="comment">#  /dev/md0 是 RAID 设备的名称。</span></span><br><span class="line"><span class="comment">#  --level=0 指定 RAID 级别为 5。</span></span><br><span class="line"><span class="comment">#  --raid-devices=4 指定 RAID 中的设备数量。</span></span><br><span class="line">sudo mdadm --create /dev/md0 --level=5 --raid-devices=4 /dev/sda1 /dev/sdb1 /dev/sdc1 /dev/sdd1</span><br></pre></td></tr></table></figure><h2 id="格式化raid设备"><a href="#格式化raid设备" class="headerlink" title="格式化raid设备"></a>格式化raid设备</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkfs.xfs /dev/md0</span><br></pre></td></tr></table></figure><h2 id="创建挂载点"><a href="#创建挂载点" class="headerlink" title="创建挂载点"></a>创建挂载点</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /data_raid</span><br></pre></td></tr></table></figure><h2 id="1、选择临时挂载"><a href="#1、选择临时挂载" class="headerlink" title="1、选择临时挂载"></a>1、选择临时挂载</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo mount /dev/md0 /data_raid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果出现 </span></span><br><span class="line"><span class="comment"># mount: /data_raid: can&#x27;t read superblock on /dev/md0.</span></span><br><span class="line">sudo mdadm --detail /dev/md0 <span class="comment"># 看state 状态：是不是在 recovering</span></span><br><span class="line"><span class="built_in">cat</span> /proc/mdstat <span class="comment"># 看恢复进度</span></span><br><span class="line"><span class="comment"># 等恢复进度 100% ，再去挂载。恢复可能会很久。</span></span><br></pre></td></tr></table></figure><h2 id="2、选择永久性挂载"><a href="#2、选择永久性挂载" class="headerlink" title="2、选择永久性挂载"></a>2、选择永久性挂载</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">sudo blkid /dev/md0 <span class="comment"># 获取raid设备的uuid。</span></span><br><span class="line"></span><br><span class="line">sudo vim /etc/fstab</span><br><span class="line"><span class="comment"># 加入 如下行</span></span><br><span class="line">UUID=98fae9c1-4ea5-4b4c-9b98-d81d4d5e3c44 /data_raid xfs defaults,nofail 0 0</span><br><span class="line"><span class="comment">#  raid设备的uuid </span></span><br><span class="line"><span class="comment">#  挂载点</span></span><br><span class="line"><span class="comment">#  xfs  为raid设备的格式</span></span><br><span class="line"><span class="comment">#  defaults：这是挂载选项的组合，表示使用系统的默认设置，包括读写权限、自动挂载等。</span></span><br><span class="line"><span class="comment">#  nofail：允许在启动时，如果这个挂载点无法挂载（例如设备不存在），系统仍然能够正常启动。没有这个选项，系统可能会在挂载失败时停止启动。</span></span><br><span class="line"><span class="comment">#  第一个 0 表示该文件系统不应该被 dump 工具备份。</span></span><br><span class="line"><span class="comment">#  第二个 0 指定该文件系统在启动时的检查顺序。0 表示不进行检查。值为 1 表示在启动时优先检查该文件系统，值为 2 表示依次检查。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新挂载所有文件系统</span></span><br><span class="line">sudo mount -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果出现 </span></span><br><span class="line"><span class="comment"># mount: /data_raid: can&#x27;t read superblock on /dev/md0.</span></span><br><span class="line">sudo mdadm --detail /dev/md0 <span class="comment"># 看state 状态：是不是在 recovering</span></span><br><span class="line"><span class="built_in">cat</span> /proc/mdstat <span class="comment"># 看恢复进度</span></span><br><span class="line"><span class="comment"># 等恢复进度 100% ，再去挂载。恢复可能会很久。</span></span><br></pre></td></tr></table></figure><h2 id="检查-RAID-阵列的状态"><a href="#检查-RAID-阵列的状态" class="headerlink" title="检查 RAID 阵列的状态"></a>检查 RAID 阵列的状态</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /proc/mdstat <span class="comment"># 如果创建成功，会看到 /dev/md0（raid设备） 的信息</span></span><br></pre></td></tr></table></figure><p><img src="/2024/10/21/%E8%A3%85%E6%9C%BA/%E4%B8%A4%E4%B8%AA20T%E7%A1%AC%E7%9B%98%E5%81%9Araid/daa382604b1efef131d4b878318c935.png" alt="daa382604b1efef131d4b878318c935"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsblk -f</span><br></pre></td></tr></table></figure><p><img src="/2024/10/21/%E8%A3%85%E6%9C%BA/%E4%B8%A4%E4%B8%AA20T%E7%A1%AC%E7%9B%98%E5%81%9Araid/1729002280504.jpg" alt="1729002280504"></p><p><img src="/2024/10/21/%E8%A3%85%E6%9C%BA/%E4%B8%A4%E4%B8%AA20T%E7%A1%AC%E7%9B%98%E5%81%9Araid/1729004340071.jpg" alt="1729004340071"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo blkid /dev/md0 <span class="comment"># 查看挂载情况</span></span><br></pre></td></tr></table></figure><p><img src="/2024/10/21/%E8%A3%85%E6%9C%BA/%E4%B8%A4%E4%B8%AA20T%E7%A1%AC%E7%9B%98%E5%81%9Araid/1729002433599.jpg" alt="1729002433599"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span> -h </span><br></pre></td></tr></table></figure><p><img src="/2024/10/21/%E8%A3%85%E6%9C%BA/%E4%B8%A4%E4%B8%AA20T%E7%A1%AC%E7%9B%98%E5%81%9Araid/1729002547062.jpg" alt="1729002547062"></p><p><img src="/2024/10/21/%E8%A3%85%E6%9C%BA/%E4%B8%A4%E4%B8%AA20T%E7%A1%AC%E7%9B%98%E5%81%9Araid/1729004403164.jpg" alt="1729004403164"></p><h1 id="删除raid设备"><a href="#删除raid设备" class="headerlink" title="删除raid设备"></a>删除raid设备</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 看看 有没有md0</span></span><br><span class="line">lsblk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查当前RAID阵列</span></span><br><span class="line">sudo mdadm --detail /dev/md0 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止现有的RAID阵列（这一步会停止现有的 RAID 阵列。如果阵列正在运行，数据访问会中断。）</span></span><br><span class="line">sudo mdadm --stop /dev/md0</span><br><span class="line"></span><br><span class="line"><span class="comment">#  删除现有的RAID阵列（这一步会将 RAID 阵列从系统中移除，这意味着系统不再识别该 RAID 阵列。）</span></span><br><span class="line">sudo mdadm --remove /dev/md0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除设备上的RAID元数据</span></span><br><span class="line"><span class="comment"># （由于 RAID 阵列的破坏，阵列上的数据将不可访问。即使物理数据可能仍然存在于磁盘分区中，但由于没有 RAID 的支持，无法直接访问和恢复这些数据。）</span></span><br><span class="line">sudo mdadm --zero-superblock /dev/sda1</span><br><span class="line">sudo mdadm --zero-superblock /dev/sdb1</span><br><span class="line">sudo mdadm --zero-superblock /dev/sdc1</span><br><span class="line">sudo mdadm --zero-superblock /dev/sdd1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="期间可能遇到的问题"><a href="#期间可能遇到的问题" class="headerlink" title="期间可能遇到的问题"></a>期间可能遇到的问题</h1><p>遇到 <code>  wrong fs type, bad option, bad superblock on /dev/vdc1</code> 等等类似的 xfs 挂载失败 的问题，</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p><strong>参考</strong>：</p><p>中间出处：<a href="https://armstrong.viyf.org/articles/2023/08/mount-wrong-fs-type-bad-option-bad-superblock.shtml">https://armstrong.viyf.org/articles/2023/08/mount-wrong-fs-type-bad-option-bad-superblock.shtml</a></p><p>源出处：<a href="https://serverfault.com/questions/948408/mount-wrong-fs-type-bad-option-bad-superblock-on-dev-xvdf1-missing-codepage">https://serverfault.com/questions/948408/mount-wrong-fs-type-bad-option-bad-superblock-on-dev-xvdf1-missing-codepage</a></p><p><strong>原因</strong>：XFS 为了防止同一个文件系统被多次挂载，在格式化硬盘并创建文件系统时会给文件系统打上 UUID。挂载分区时，XFS 检测到当前挂载了相同 UUID 的分区，就会拒绝执行挂载。</p><p><strong>结论</strong>，解决方法就是 不用uuid挂载。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 临时挂载</span></span><br><span class="line">sudo mount -o defaults,nouuid /dev/vdc1 /data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 永久挂载</span></span><br><span class="line"><span class="comment"># 在 /etc/fstab 中写入</span></span><br><span class="line">/dev/vdc1   /data   xfs   defaults,nouuid   0   0</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="装机" scheme="http://example.com/categories/%E8%A3%85%E6%9C%BA/"/>
    
    
    <category term="raid" scheme="http://example.com/tags/raid/"/>
    
    <category term="挂载" scheme="http://example.com/tags/%E6%8C%82%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>bios内作raid</title>
    <link href="http://example.com/2024/10/21/%E8%A3%85%E6%9C%BA/bios%E5%86%85%E4%BD%9Craid/"/>
    <id>http://example.com/2024/10/21/%E8%A3%85%E6%9C%BA/bios%E5%86%85%E4%BD%9Craid/</id>
    <published>2024-10-21T12:52:20.000Z</published>
    <updated>2024-10-21T13:42:53.507Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、bios内设置raid"><a href="#一、bios内设置raid" class="headerlink" title="一、bios内设置raid"></a>一、bios内设置raid</h1><p>1.开机连续点击 F10 进入 BIOS，选择【UEFI Drivers】。如果硬盘连接的是 SATA</p><p>接口，选择【intel(R)RSTe SATA Controller】选项。如果连接的是 Ssata 接口选择</p><p>【inter(R)RSTe Ssata Controller】选项</p><p><img src="/2024/10/21/%E8%A3%85%E6%9C%BA/bios%E5%86%85%E4%BD%9Craid/1.jpg" alt="1"></p><p>2.进入后选择【Create RAID Volume】，可以创建新的 RAID。</p><p><img src="/2024/10/21/%E8%A3%85%E6%9C%BA/bios%E5%86%85%E4%BD%9Craid/2.jpg" alt="2"></p><p>3.【RAID Level】处选择需要设置的 RAID 级别</p><p><img src="/2024/10/21/%E8%A3%85%E6%9C%BA/bios%E5%86%85%E4%BD%9Craid/3.jpg" alt="3"></p><p>4.在硬盘信息下方，可选择想要创建新 RAID 的硬盘。</p><p><img src="/2024/10/21/%E8%A3%85%E6%9C%BA/bios%E5%86%85%E4%BD%9Craid/4.jpg" alt="4"></p><p>5.如果需要使用哪块硬盘，就将哪块硬盘下方选框中改成【X】。</p><p><img src="/2024/10/21/%E8%A3%85%E6%9C%BA/bios%E5%86%85%E4%BD%9Craid/5.jpg" alt="5"></p><p>6.点击硬盘信息后面的【问号】，可以查看对应硬盘的详细信息</p><p><img src="/2024/10/21/%E8%A3%85%E6%9C%BA/bios%E5%86%85%E4%BD%9Craid/6.jpg" alt="6"></p><p>7.选择完需要组成 RAID 的硬盘后，点击下方【Create Volume】创建 RAID</p><p><img src="/2024/10/21/%E8%A3%85%E6%9C%BA/bios%E5%86%85%E4%BD%9Craid/7.jpg" alt="7"></p><p>8.创建完成后会自动返回到上一级界面，在创建 RAID 下面会多出来一行刚刚创建的 RAID 信息</p><p><img src="/2024/10/21/%E8%A3%85%E6%9C%BA/bios%E5%86%85%E4%BD%9Craid/8.jpg" alt="8"></p><h1 id="二、磁盘格式化、挂载"><a href="#二、磁盘格式化、挂载" class="headerlink" title="二、磁盘格式化、挂载"></a>二、磁盘格式化、挂载</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsblk -f <span class="comment"># 查看</span></span><br></pre></td></tr></table></figure><p><img src="/2024/10/21/%E8%A3%85%E6%9C%BA/bios%E5%86%85%E4%BD%9Craid/pp.jpg" alt="pp"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo mkfs.xfs /dev/mdXXXXX <span class="comment"># 格式化</span></span><br><span class="line"></span><br><span class="line">sudo <span class="built_in">mkdir</span> -p XXXXX <span class="comment"># 建挂载点文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时挂载</span></span><br><span class="line">sudo mount /mdXXXXX /XXXXX</span><br><span class="line"><span class="comment"># 永久挂载</span></span><br><span class="line">sudo vim /etc/fstab </span><br><span class="line">/dev/mdXXXXX /data_raid xfs defaults,nofail 0 0 <span class="comment"># 写入这个</span></span><br></pre></td></tr></table></figure><p><img src="/2024/10/21/%E8%A3%85%E6%9C%BA/bios%E5%86%85%E4%BD%9Craid/pp2.png" alt="pp2"></p><h1 id="三、期间可能遇到的问题"><a href="#三、期间可能遇到的问题" class="headerlink" title="三、期间可能遇到的问题"></a>三、期间可能遇到的问题</h1><p>遇到 <code>  wrong fs type, bad option, bad superblock on /dev/vdc1</code> 等等类似的 xfs 挂载失败 的问题，</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p><strong>参考</strong>：</p><p>中间出处：<a href="https://armstrong.viyf.org/articles/2023/08/mount-wrong-fs-type-bad-option-bad-superblock.shtml">https://armstrong.viyf.org/articles/2023/08/mount-wrong-fs-type-bad-option-bad-superblock.shtml</a></p><p>源出处：<a href="https://serverfault.com/questions/948408/mount-wrong-fs-type-bad-option-bad-superblock-on-dev-xvdf1-missing-codepage">https://serverfault.com/questions/948408/mount-wrong-fs-type-bad-option-bad-superblock-on-dev-xvdf1-missing-codepage</a></p><p><strong>原因</strong>：XFS 为了防止同一个文件系统被多次挂载，在格式化硬盘并创建文件系统时会给文件系统打上 UUID。挂载分区时，XFS 检测到当前挂载了相同 UUID 的分区，就会拒绝执行挂载。</p><p><strong>结论</strong>，解决方法就是 不用uuid挂载。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 临时挂载</span></span><br><span class="line">sudo mount -o defaults,nouuid /dev/vdc1 /data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 永久挂载</span></span><br><span class="line"><span class="comment"># 在 /etc/fstab 中写入</span></span><br><span class="line">/dev/vdc1   /data   xfs   defaults,nouuid   0   0</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="装机" scheme="http://example.com/categories/%E8%A3%85%E6%9C%BA/"/>
    
    
    <category term="raid" scheme="http://example.com/tags/raid/"/>
    
  </entry>
  
  <entry>
    <title>服务器集群添加GPU</title>
    <link href="http://example.com/2024/10/20/%E8%A3%85%E6%9C%BA/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4%E6%B7%BB%E5%8A%A0GPU/"/>
    <id>http://example.com/2024/10/20/%E8%A3%85%E6%9C%BA/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4%E6%B7%BB%E5%8A%A0GPU/</id>
    <published>2024-10-20T12:32:28.000Z</published>
    <updated>2024-10-20T12:50:42.360Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>我加了一台服务器到服务器集群中，服务器中有两张GPU卡，我需要将这两张卡添入服务器下的两个虚拟机中使用。</p><h1 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h1><p><strong>vGPU</strong>： 虚拟化了一堆Nvidia的卡给一群机器用，就需要英伟达要授权，死贵的。</p><p><strong>GPU</strong> ：仅仅能给自己机器上用，比如服务器下有两个虚拟机，两张显卡，这两张显卡就只能被这两个虚拟机用，服务器之外的别的服务器是用不了这两GPU的。</p><p><strong>iommu</strong> ：I0MMU是一个内存管理单元Q机制，它可以实现把设备访问的虚拟地址(VA)转化成物理地址(PA);说人话就是开了它虚拟机才能访问到物理机的硬件，如显卡。</p><h1 id="网页版实操"><a href="#网页版实操" class="headerlink" title="网页版实操"></a>网页版实操</h1><p>如有看见了ECC开启了要先关闭ECC，没有就跳过。</p><p><img src="/2024/10/20/%E8%A3%85%E6%9C%BA/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4%E6%B7%BB%E5%8A%A0GPU/%E8%A6%81%E5%9C%A8%E6%B7%BB%E5%8A%A0%E5%AE%8C%E7%A1%AC%E4%BB%B6%E5%86%8D%E5%90%AF%E5%8A%A8ECC.jpg" alt="要在添加完硬件再启动ECC"></p><p>在物理机设置打开 iommu，让虚拟机可以访问到GPU。</p><p><img src="/2024/10/20/%E8%A3%85%E6%9C%BA/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4%E6%B7%BB%E5%8A%A0GPU/%E9%AB%98%E7%BA%A7%E8%AE%BE%E7%BD%AE.jpg" alt="高级设置"> </p><p>保存、重启。</p><p><img src="/2024/10/20/%E8%A3%85%E6%9C%BA/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4%E6%B7%BB%E5%8A%A0GPU/%E5%8A%A0GPU%E7%A1%AC%E4%BB%B6.jpg" alt="加GPU硬件"></p><p><img src="/2024/10/20/%E8%A3%85%E6%9C%BA/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4%E6%B7%BB%E5%8A%A0GPU/%E5%8A%A02.jpg" alt="加2"></p><p><img src="/2024/10/20/%E8%A3%85%E6%9C%BA/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4%E6%B7%BB%E5%8A%A0GPU/%E5%8A%A03.jpg" alt="加3"></p><p><img src="/2024/10/20/%E8%A3%85%E6%9C%BA/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4%E6%B7%BB%E5%8A%A0GPU/%E5%8A%A04.jpg" alt="加4"></p><p><img src="/2024/10/20/%E8%A3%85%E6%9C%BA/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4%E6%B7%BB%E5%8A%A0GPU/%E5%8A%A05.jpg" alt="加5"></p><p><img src="/2024/10/20/%E8%A3%85%E6%9C%BA/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4%E6%B7%BB%E5%8A%A0GPU/%E5%8A%A06.jpg" alt="加6"></p><p><img src="/2024/10/20/%E8%A3%85%E6%9C%BA/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4%E6%B7%BB%E5%8A%A0GPU/%E5%8A%A07.jpg" alt="加7"></p><p>检查</p><p><img src="/2024/10/20/%E8%A3%85%E6%9C%BA/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4%E6%B7%BB%E5%8A%A0GPU/%E6%A3%80%E6%9F%A5.jpg" alt="检查"></p>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="装机" scheme="http://example.com/categories/%E8%A3%85%E6%9C%BA/"/>
    
    
    <category term="GPU" scheme="http://example.com/tags/GPU/"/>
    
  </entry>
  
  <entry>
    <title>服务器集群配置共享存储的过程</title>
    <link href="http://example.com/2024/10/19/%E8%A3%85%E6%9C%BA/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
    <id>http://example.com/2024/10/19/%E8%A3%85%E6%9C%BA/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8%E7%9A%84%E8%BF%87%E7%A8%8B/</id>
    <published>2024-10-19T14:32:10.000Z</published>
    <updated>2024-10-19T14:35:56.090Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>记录服务器集群添加新机器后，这台新机器是找不到共享存储的，以下就是让它找到共享存储的过程。</p><h1 id="总体逻辑"><a href="#总体逻辑" class="headerlink" title="总体逻辑"></a>总体逻辑</h1><ol><li><strong>服务器HBA卡连接到FC交换机上</strong>    </li><li><strong>FC交换机上配置zone</strong>    </li><li><strong>存储上添加主机LUN映射</strong>   </li><li><strong>超融合平台添加新主机 这个在存储设备中 添加 新主机的LUN 映射</strong></li></ol><p>​</p><p>​在存储设备中添加新主机的LUN（逻辑单元号）映射是指将存储设备中的特定存储卷（LUN）分配给特定主机，以便该主机可以访问这些存储资源。这一过程通常用于存储区域网络（SAN）中，以实现主机与存储设备之间的有效通信和数据存取。</p><h3 id="1-服务器HBA卡连接到FC交换机上"><a href="#1-服务器HBA卡连接到FC交换机上" class="headerlink" title="1. 服务器HBA卡连接到FC交换机上"></a>1. 服务器HBA卡连接到FC交换机上</h3><p><strong>HBA（Host Bus Adapter）卡</strong>是连接服务器与存储网络的重要组件。HBA卡将服务器的SCSI或SATA接口转换为光纤通道（FC）信号，使服务器能够通过FC网络访问存储设备。</p><ul><li><p><strong>连接目的</strong>：通过HBA卡，服务器可以将数据发送到FC交换机，从而与存储设备进行通信。</p></li><li><p><strong>操作要求</strong>：确保HBA卡正确安装在服务器中，并通过光纤线缆与FC交换机相连。</p><p><img src="/2024/10/19/%E8%A3%85%E6%9C%BA/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8%E7%9A%84%E8%BF%87%E7%A8%8B/image-20241019204901472.png" alt="image-20241019204901472"></p></li></ul><p><img src="/2024/10/19/%E8%A3%85%E6%9C%BA/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8%E7%9A%84%E8%BF%87%E7%A8%8B/image-20241019204934143.png" alt="image-20241019204934143"></p><h3 id="2-FC交换机上配置zone"><a href="#2-FC交换机上配置zone" class="headerlink" title="2. FC交换机上配置zone"></a>2. FC交换机上配置zone</h3><p><strong>Zone</strong>是FC交换机中的一种配置，旨在控制设备之间的访问权限。</p><ul><li><p><strong>配置目的</strong>：通过将特定的HBA卡和存储设备分配到同一个zone中，可以实现它们之间的通信。相应地，将不在同一zone中的设备隔离，以提高安全性。</p></li><li><p><strong>操作要求</strong>：通常需要在FC交换机的管理界面中，创建一个zone，并将服务器的HBA和相应的存储LUN添加到该zone中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 先进入连接存储和服务器 FC交换机 ；</span><br><span class="line"># 可以通过 FC交换机的console控制口 在笔记本用一根 console 转 USB口的线连接；</span><br><span class="line"># 以Windows为例</span><br><span class="line"># 进入 【我的电脑】【管理】【设备管理器】【端口】看看 带serial的是哪一个口，比如说COM3等；</span><br><span class="line"># 进入 笔记本中的 xshell 或者其他远程工具，【串口】选择刚才的端口如 COM3，【波特率】用默认的9600，【协议】不用ssh改用serial；</span><br><span class="line"># 用 光交换机的 账号密码登录；</span><br></pre></td></tr></table></figure></li></ul><p>先通过 <code>switchshow</code> 命令看看 新加的服务器是不是在端口识别出来了，注意是从 0 开始计数，16 就是 第17个端口显示了连接。</p><p><img src="/2024/10/19/%E8%A3%85%E6%9C%BA/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8%E7%9A%84%E8%BF%87%E7%A8%8B/image-20241019210336106.png" alt="image-20241019210336106"></p><p>用 <code>cfgshwo</code> 命令查看 zone的情况；</p><p>注意：  每一个 zone，  例如 【server10_cf5010】 是一个的zone名称，是自定义命名的只是为了方便自己记忆理解，下面的 【cf5010】是存储，【server10】是服务器，它们都是自定义的下面有解释；</p><p><img src="/2024/10/19/%E8%A3%85%E6%9C%BA/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8%E7%9A%84%E8%BF%87%E7%A8%8B/image-20241019210402111.png" alt="image-20241019210402111"></p><p>可见 alias（别名）解释了上面的 命名，如 【cf5010】是交换机ID为1的20号、21号、22号、23号四个端口的别名；【server10】其实就是 FC交换机的 ID为1 的9号端口的别名。 </p><p><img src="/2024/10/19/%E8%A3%85%E6%9C%BA/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8%E7%9A%84%E8%BF%87%E7%A8%8B/%E6%88%AA%E5%B1%8F2024-10-19%2021.22.07.jpg" alt="截屏2024-10-19 21.22.07"></p><p>说的糙一点就是一个zone 就是把两个端口的通信建立起来；</p><h3 id="3-存储上添加主机LUN映射"><a href="#3-存储上添加主机LUN映射" class="headerlink" title="3. 存储上添加主机LUN映射"></a>3. 存储上添加主机LUN映射</h3><p><strong>LUN（Logical Unit Number）映射</strong>是将存储设备中的逻辑单元（如硬盘卷）分配给特定主机的过程。</p><ul><li><strong>映射目的</strong>：使特定的服务器能够访问某个存储卷（LUN）。这可以确保只有授权的主机可以访问敏感数据，并优化存储资源的使用。</li><li><strong>操作要求</strong>：在存储设备的管理界面中，选择要映射的LUN，并将其与前面配置的主机进行关联。可能还需设置访问权限。</li></ul><p>我这里是通过 web的管理页面进去</p><p>在这个【Data Access】建立一个 host对象（就是服务器），对象内属性【initiators】（发起者）就是服务器中的HAB口，属性【volumes】5 对应存储中的卷的数量，意思是1号主机节点对象，对应了存储中划好的5个卷；</p><p><img src="/2024/10/19/%E8%A3%85%E6%9C%BA/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8%E7%9A%84%E8%BF%87%E7%A8%8B/%E6%88%AA%E5%B1%8F2024-10-19%2021.39.18.jpg" alt="截屏2024-10-19 21.39.18"></p><h4 id="3-1、设置主机对象"><a href="#3-1、设置主机对象" class="headerlink" title="3-1、设置主机对象"></a>3-1、设置主机对象</h4><p>在存储上要为新服务器 设置一个 host对象。点【Data Access】上的➕，这里的名字也是自定义的方便自己看，target port All 指的是 存储作为目标 开放所有端口，【initiators】 发起人 当然是 HBA卡啦，我们只有一张HBA卡的话，为了方便记忆，就可以写成initiators1，【WWPN】 就是 在FC交换机中 <code>switchshow</code> 命令中看到的 protol 对应的 服务器的 一长串 10:XX:XX:XX… 的编号。</p><p><img src="/2024/10/19/%E8%A3%85%E6%9C%BA/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8%E7%9A%84%E8%BF%87%E7%A8%8B/%E6%88%AA%E5%B1%8F2024-10-19%2021.48.32.jpg" alt="截屏2024-10-19 21.48.32"></p><h4 id="3-2、作卷到主机对象的映射"><a href="#3-2、作卷到主机对象的映射" class="headerlink" title="3-2、作卷到主机对象的映射"></a>3-2、作卷到主机对象的映射</h4><p>在【Data Storage】 存储中一个一个编辑 volume卷的内容，点 笔的图标；</p><p><img src="/2024/10/19/%E8%A3%85%E6%9C%BA/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8%E7%9A%84%E8%BF%87%E7%A8%8B/%E6%88%AA%E5%B1%8F2024-10-19%2021.57.36.jpg" alt="截屏2024-10-19 21.57.36"></p><p>一步一步 next ，找到 出现添加主机的页面，为这个卷 添加 前面设置的 主机节点对象；</p><p><img src="/2024/10/19/%E8%A3%85%E6%9C%BA/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8%E7%9A%84%E8%BF%87%E7%A8%8B/%E6%88%AA%E5%B1%8F2024-10-19%2021.59.38.jpg" alt="截屏2024-10-19 21.59.38"></p><p><img src="/2024/10/19/%E8%A3%85%E6%9C%BA/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8%E7%9A%84%E8%BF%87%E7%A8%8B/%E6%88%AA%E5%B1%8F2024-10-19%2022.01.56.jpg" alt="截屏2024-10-19 22.01.56"></p><p>记得save保存。</p><h3 id="4-超融合平台添加新主机"><a href="#4-超融合平台添加新主机" class="headerlink" title="4. 超融合平台添加新主机"></a>4. 超融合平台添加新主机</h3><p><strong>超融合平台</strong>是一种将计算、存储和网络资源整合到单一系统中的解决方案，通常用于简化数据中心的管理。</p><ul><li><strong>添加目的</strong>：在超融合平台上注册新的主机，以便它可以利用存储和计算资源。这通常涉及将新主机纳入集群，使其能够访问共享存储。</li><li><strong>操作要求</strong>：在超融合平台的管理界面中，选择“添加主机”或类似选项，输入新主机的相关信息（如IP地址、访问凭证等），并确保它能够访问之前配置的存储和网络资源。</li></ul><p>在主机集群的【存储】栏，一个卷一个卷的 去【发现主机】</p><p><img src="/2024/10/19/%E8%A3%85%E6%9C%BA/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8%E7%9A%84%E8%BF%87%E7%A8%8B/%E6%88%AA%E5%B1%8F2024-10-19%2022.06.47.jpg" alt="截屏2024-10-19 22.06.47"></p><p><img src="/2024/10/19/%E8%A3%85%E6%9C%BA/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8%E7%9A%84%E8%BF%87%E7%A8%8B/%E6%88%AA%E5%B1%8F2024-10-19%2022.08.57.jpg" alt="截屏2024-10-19 22.08.57"></p>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="装机" scheme="http://example.com/categories/%E8%A3%85%E6%9C%BA/"/>
    
    
    <category term="LUN映射" scheme="http://example.com/tags/LUN%E6%98%A0%E5%B0%84/"/>
    
    <category term="交换机" scheme="http://example.com/tags/%E4%BA%A4%E6%8D%A2%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>在服务器安装华三castools工具遇到的问题</title>
    <link href="http://example.com/2024/10/16/%E8%A3%85%E6%9C%BA/%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E5%8D%8E%E4%B8%89castools%E5%B7%A5%E5%85%B7%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2024/10/16/%E8%A3%85%E6%9C%BA/%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E5%8D%8E%E4%B8%89castools%E5%B7%A5%E5%85%B7%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2024-10-16T07:32:10.000Z</published>
    <updated>2024-10-18T01:05:02.794Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>正常情况下，我在登录虚拟机并且在网页前端登录用户，挂载光驱之后，df -h 可以看见出现一个光驱文件夹。</p><p><img src="/2024/10/16/%E8%A3%85%E6%9C%BA/%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E5%8D%8E%E4%B8%89castools%E5%B7%A5%E5%85%B7%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/1729043550725.jpg" alt="1729043550725"></p><p><img src="/2024/10/16/%E8%A3%85%E6%9C%BA/%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E5%8D%8E%E4%B8%89castools%E5%B7%A5%E5%85%B7%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/1729043674042.jpg" alt="1729043674042"></p><p>当然，如果你的系统是server版本可能没有前端显示，就需要手动挂载一下光驱，方法就和挂载磁盘一样的就是添加一个设备而已。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>进入这个目录 ，安装 CAStools 工具，遇到报错</p><p><code>sudo bash CAS_tools_install.sh Selecting previously unselected package qemu-ga.(Reading database ... 175535 files and directories currently installed.)Preparing to unpack .../qemu-ga-10.1.6.2-0ubuntu13_amd64.deb ...Unpacking qemu-ga (10.1.6.2) ...dpkg: error processing archive /media/jlsf/agenttools/linux/x86/castools/qemu-ga-10.1.6.2-0ubuntu13_amd64.deb (--install): trying to overwrite &#39;/usr/sbin/qemu-ga&#39;, which is also in package qemu-guest-agent 1:4.2-3ubuntu6.29dpkg-deb: error: paste subprocess was killed by signal (Broken pipe)Processing triggers for systemd (245.4-4ubuntu3.20) ...Errors were encountered while processing: /media/jlsf/agenttools/linux/x86/castools/qemu-ga-10.1.6.2-0ubuntu13_amd64.deb</code></p><p><img src="/2024/10/16/%E8%A3%85%E6%9C%BA/%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E5%8D%8E%E4%B8%89castools%E5%B7%A5%E5%85%B7%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/12.png" alt="12"></p><p>这个报错说 qemu-ga 包和 这个脚本里面的包冲突了，我们不能再用原来的 卸载 qemu-ga 再apt-get更新以后装一个解决 ，因为这个脚本用的只能是旧的版本。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove --purge qemu-guest-agent <span class="comment"># 或者 sudo apt-get remove --purge qemu-ga</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果想强制安装 qemu-ga 而不卸载 qemu-guest-agent，可以使用 dpkg 的 --force-overwrite 选项来强制覆盖冲突的文件，但是我是先卸载了，然后再强制安装解决问题的。</span></span><br><span class="line">sudo dpkg -i --force-overwrite /media/jlsf/agenttools/linux/x86/castools/qemu-ga-10.1.6.2-0ubuntu13_amd64.deb</span><br><span class="line"></span><br><span class="line">sudo bash CAS_tools_install.sh</span><br></pre></td></tr></table></figure><p><img src="/2024/10/16/%E8%A3%85%E6%9C%BA/%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E5%8D%8E%E4%B8%89castools%E5%B7%A5%E5%85%B7%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/1.png" alt="1"></p>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="装机" scheme="http://example.com/categories/%E8%A3%85%E6%9C%BA/"/>
    
    
    <category term="castools" scheme="http://example.com/tags/castools/"/>
    
    <category term="包冲突" scheme="http://example.com/tags/%E5%8C%85%E5%86%B2%E7%AA%81/"/>
    
  </entry>
  
  <entry>
    <title>clonezilla使用案例</title>
    <link href="http://example.com/2024/10/15/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/"/>
    <id>http://example.com/2024/10/15/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/</id>
    <published>2024-10-15T03:32:10.000Z</published>
    <updated>2024-10-15T04:04:55.244Z</updated>
    
    <content type="html"><![CDATA[<p>clonezilla 是个好东西，可以克隆硬盘、制作镜像等等。</p><h1 id="克隆硬盘步骤（简单版）"><a href="#克隆硬盘步骤（简单版）" class="headerlink" title="克隆硬盘步骤（简单版）"></a>克隆硬盘步骤（简单版）</h1><p>1、我用一个 64g的u盘制作了一个 ventoy 工具盘，空余空间为12g，clonezilla的ISO文件是放在 这个u盘中的。开机选择 这个u盘启动，注意格式。</p><p><img src="/2024/10/15/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/111.jpg" alt="111"></p><p>2、选择 语言</p><p>3、选择使用“重生龙”</p><p>4、选择 “从硬盘&#x2F;分区克隆到硬盘&#x2F;分区”</p><p>5、初级模式</p><p>6、是否保留原分区形式，选是。</p><p>7、y…y…y…y y 一路确认。</p><p>8、选择 克隆完成以后 reboot 还是 poweroff，我一般选了reboot。</p><p>9、我一个nvme 的512g的硬盘 克隆到 另一个nvme的512g硬盘中，ventoy的U盘64g，12g空余，一共耗时4小时。</p><h1 id="一个失败案例"><a href="#一个失败案例" class="headerlink" title="一个失败案例"></a>一个失败案例</h1><p><img src="/2024/10/15/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/aaaebb506391433eaca83d403765733.jpg" alt="aaaebb506391433eaca83d403765733"></p><p>如果出现 上面这样的显示，说明不仅仅是 分辨率的问题，很有可能是对u盘中的 clonezilla 读取出现啦一些问题。我在遇到这样的显示之后，克隆的过程中遇到了 下面的报错。</p><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><p>克隆的过程中 速度非常非常慢。预计要30小时，我就发现了又问题，然后在克隆5%时候报出如下错误：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">报错 /usr/share/brb1/sbin/ocs-functions: line 15141: 41591 killed.  partclone.dd -z 10485760 -N -L /var/log/partclone.log -s /dev/sdc3 -0 /dev/sdd3  Failed to <span class="built_in">clone</span> /dev/sdc3 to /dev/sdd3 press <span class="string">&quot;Enter&quot;</span> to <span class="built_in">continue</span>... </span><br></pre></td></tr></table></figure><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>这样的报错 可能是 U盘读写性能出现了问题，也可能是 两块硬盘中出现了坏块等等问题，我很难锁定具体问题。</p><p>于是我换了一台电脑，在这台电脑上插上 ventoy的U盘和 源、目的两个硬盘，重新操作了一遍，这次没有报错。</p><p><img src="/2024/10/15/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/fd0cc1352fd4e95595041bf384d48ce.jpg" alt="fd0cc1352fd4e95595041bf384d48ce"></p><p>预计4小时完成，2G&#x2F;min 克隆速度 属于正常的水平。于是成功克隆。</p>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="装机" scheme="http://example.com/categories/%E8%A3%85%E6%9C%BA/"/>
    
    
    <category term="ventoy" scheme="http://example.com/tags/ventoy/"/>
    
    <category term="clonezilla" scheme="http://example.com/tags/clonezilla/"/>
    
  </entry>
  
  <entry>
    <title>Ventoy工具</title>
    <link href="http://example.com/2024/10/13/%E8%A3%85%E6%9C%BA/ventoy%E5%B7%A5%E5%85%B7/"/>
    <id>http://example.com/2024/10/13/%E8%A3%85%E6%9C%BA/ventoy%E5%B7%A5%E5%85%B7/</id>
    <published>2024-10-13T03:32:10.000Z</published>
    <updated>2024-10-13T14:30:34.311Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>​我之前用的rufu 工具一个u盘只能制作一个 系统启动盘，我买了一堆u盘，挺搞笑的。</p><p>​其实用这个 ventoy 工具 制作u盘就可以让一个u盘制作成多系统安装工具，一个u盘就可以进入多个不同的系统，像什么 clonezilla Windows7 Windows10 Windows11 ubuntu centos 等等啦。</p><h1 id="下载使用"><a href="#下载使用" class="headerlink" title="下载使用"></a>下载使用</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>​下载网址：      (<a href="https://www.ventoy.net/cn/">https://www.ventoy.net/cn/</a>)</p><p><img src="/2024/10/13/%E8%A3%85%E6%9C%BA/ventoy%E5%B7%A5%E5%85%B7/%E6%88%AA%E5%B1%8F2024-10-13%2021.37.30.jpg" alt="截屏2024-10-13 21.37.30"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><img src="/2024/10/13/%E8%A3%85%E6%9C%BA/ventoy%E5%B7%A5%E5%85%B7/1728826068849.jpg" alt="1728826068849"></p><p>右边 <code>设备内部Ventoy</code> 指的是 你准备做成 系统启动盘的u盘。</p><p><img src="/2024/10/13/%E8%A3%85%E6%9C%BA/ventoy%E5%B7%A5%E5%85%B7/2b3b9696779f971f80a659446915fb0.jpg" alt="2b3b9696779f971f80a659446915fb0"></p><p>有的老机器 是 用 MBR，但是这里推荐都用 GPT把，在 启动设备的 bios 中选择 UEFI标注的的那个U盘启动，这个挺重要的。</p><p><img src="/2024/10/13/%E8%A3%85%E6%9C%BA/ventoy%E5%B7%A5%E5%85%B7/6db4e84b7ae6384f692166a62ba773a.png" alt="6db4e84b7ae6384f692166a62ba773a"></p><p>推荐把U盘做成 exfat格式，这样通用性好很多，方便除了作系统以外 存储文件。</p><p>然后u盘制作好啦，仅仅需要把ISO文件放进u盘就好啦。</p><p>以下是 通过 ventoy启动的u盘例子</p><p><img src="/2024/10/13/%E8%A3%85%E6%9C%BA/ventoy%E5%B7%A5%E5%85%B7/111.jpg" alt="111"></p><h1 id="典型案例"><a href="#典型案例" class="headerlink" title="典型案例"></a>典型案例</h1><p>出现的问题  <code>“Windows 无法安装到这个磁盘，选中的 磁盘采用 GPT 分区形式 ”</code></p><p>磁盘是 GPT 分区形式，就要用UEFI来启动u盘，此时开机的bios 要打开 UEFI选项，然后bios 的boot 中也可能有两个 u盘选项，我们记得选 EFI 或者 UEFI前缀的那个u盘。</p><h1 id="补充-：clonezilla"><a href="#补充-：clonezilla" class="headerlink" title="补充 ：clonezilla"></a>补充 ：clonezilla</h1><p>推荐一下 一个有用的工具  ，可以克隆磁盘a到磁盘b、 恢复磁盘巴拉巴拉等等 很多事情。</p><p><strong>Clonezilla</strong></p><p>(<a href="https://clonezilla.org/downloads.php">https://clonezilla.org/downloads.php</a>)</p><p><img src="/2024/10/13/%E8%A3%85%E6%9C%BA/ventoy%E5%B7%A5%E5%85%B7/baad0f58040d1cbfca98fa20a827a1f.png" alt="baad0f58040d1cbfca98fa20a827a1f"></p><p>这里推荐 基于ubuntu或者 debian 开发的 stable稳定版。</p><p>(<a href="https://clonezilla.org/downloads/download.php?branch=alternative">https://clonezilla.org/downloads/download.php?branch=alternative</a>)</p><p><img src="/2024/10/13/%E8%A3%85%E6%9C%BA/ventoy%E5%B7%A5%E5%85%B7/af3c243f051f31c65e236318e470135.png" alt="af3c243f051f31c65e236318e470135"></p><p>这里记得选 ISO格式的文件，这样它就能被扔进 ventoy 制作的u盘中使用啦。</p>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="装机" scheme="http://example.com/categories/%E8%A3%85%E6%9C%BA/"/>
    
    
    <category term="ventoy" scheme="http://example.com/tags/ventoy/"/>
    
    <category term="clonezilla" scheme="http://example.com/tags/clonezilla/"/>
    
  </entry>
  
  <entry>
    <title>切分excel单元格形成更多的行（利用chatgpt开发案例）</title>
    <link href="http://example.com/2024/10/10/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%88%87%E5%88%86excel%E5%8D%95%E5%85%83%E6%A0%BC%E5%BD%A2%E6%88%90%E6%9B%B4%E5%A4%9A%E7%9A%84%E8%A1%8C%EF%BC%88%E5%88%A9%E7%94%A8chatgpt%E5%BC%80%E5%8F%91%E6%A1%88%E4%BE%8B%EF%BC%89/"/>
    <id>http://example.com/2024/10/10/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%88%87%E5%88%86excel%E5%8D%95%E5%85%83%E6%A0%BC%E5%BD%A2%E6%88%90%E6%9B%B4%E5%A4%9A%E7%9A%84%E8%A1%8C%EF%BC%88%E5%88%A9%E7%94%A8chatgpt%E5%BC%80%E5%8F%91%E6%A1%88%E4%BE%8B%EF%BC%89/</id>
    <published>2024-10-10T02:35:24.000Z</published>
    <updated>2024-10-10T02:36:33.052Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h1><p>我想实现这样的效果<br>（原始）</p><p><img src="/2024/10/10/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%88%87%E5%88%86excel%E5%8D%95%E5%85%83%E6%A0%BC%E5%BD%A2%E6%88%90%E6%9B%B4%E5%A4%9A%E7%9A%84%E8%A1%8C%EF%BC%88%E5%88%A9%E7%94%A8chatgpt%E5%BC%80%E5%8F%91%E6%A1%88%E4%BE%8B%EF%BC%89/58e2c3c89ef9df119d685e8fee77bdf.png" alt="58e2c3c89ef9df119d685e8fee77bdf"></p><p>（处理后）</p><p><img src="/2024/10/10/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%88%87%E5%88%86excel%E5%8D%95%E5%85%83%E6%A0%BC%E5%BD%A2%E6%88%90%E6%9B%B4%E5%A4%9A%E7%9A%84%E8%A1%8C%EF%BC%88%E5%88%A9%E7%94%A8chatgpt%E5%BC%80%E5%8F%91%E6%A1%88%E4%BE%8B%EF%BC%89/bc587e457de3aa64435646efb6fc2fa.png" alt="bc587e457de3aa64435646efb6fc2fa"></p><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><p>利用chatgpt缩短开发时间</p><h2 id="向chatpgt提问"><a href="#向chatpgt提问" class="headerlink" title="向chatpgt提问"></a>向chatpgt提问</h2><h3 id="1、不可用阶段"><a href="#1、不可用阶段" class="headerlink" title="1、不可用阶段"></a>1、不可用阶段</h3><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">咱们一步一步来，<span class="keyword">python</span>实现，先运行这个脚本，命令端口 要求输入 excel 文件位置（包括文件名），以及待处理的 字段名称。</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_excel</span>(<span class="params">file_path, column_name</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 读取 Excel 文件</span></span><br><span class="line">        df = pd.read_excel(file_path)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 检查字段是否存在</span></span><br><span class="line">        <span class="keyword">if</span> column_name <span class="keyword">in</span> df.columns:</span><br><span class="line">            <span class="comment"># 打印指定字段的内容</span></span><br><span class="line">            <span class="built_in">print</span>(df[column_name])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;字段 &#x27;<span class="subst">&#123;column_name&#125;</span>&#x27; 不存在于文件中。&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;处理文件时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 从命令行输入 Excel 文件路径和待处理的字段名称</span></span><br><span class="line">    file_path = <span class="built_in">input</span>(<span class="string">&quot;请输入 Excel 文件位置（包括文件名）：&quot;</span>)</span><br><span class="line">    column_name = <span class="built_in">input</span>(<span class="string">&quot;请输入待处理的字段名称：&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 处理 Excel 文件</span></span><br><span class="line">    process_excel(file_path, column_name)</span><br></pre></td></tr></table></figure><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用转csv格式再变回 excel的方法处理。把那个指定的字段，看看存不存在，如果存在，再按照这个字段中的元素 按照 <span class="string">\n</span> 来分割，去除空格，分成更多的行，实现行的扩充，由一个元素拆出的多个新的元素，前面对应的每个字段的值都是一样的。其中有可能 有的字段的元素会是空，要考虑这种情况</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_excel_to_csv</span>(<span class="params">file_path, column_name</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 读取 Excel 文件</span></span><br><span class="line">        df = pd.read_excel(file_path)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查字段是否存在</span></span><br><span class="line">        <span class="keyword">if</span> column_name <span class="keyword">in</span> df.columns:</span><br><span class="line">            <span class="comment"># 创建一个新的 DataFrame 用于扩充行</span></span><br><span class="line">            expanded_rows = []</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 遍历指定字段的每一行</span></span><br><span class="line">            <span class="keyword">for</span> index, value <span class="keyword">in</span> df[column_name].iteritems():</span><br><span class="line">                <span class="keyword">if</span> pd.notna(value):  <span class="comment"># 确保值不是 NaN</span></span><br><span class="line">                    <span class="comment"># 按 \n 分割，并去除空格</span></span><br><span class="line">                    split_values = [elem.strip() <span class="keyword">for</span> elem <span class="keyword">in</span> value.split(<span class="string">&#x27;\n&#x27;</span>) <span class="keyword">if</span> elem.strip()]</span><br><span class="line">                    <span class="comment"># 将分割后的值添加到新行中</span></span><br><span class="line">                    <span class="keyword">for</span> item <span class="keyword">in</span> split_values:</span><br><span class="line">                        new_row = df.iloc[index].copy()  <span class="comment"># 复制当前行</span></span><br><span class="line">                        new_row[column_name] = item  <span class="comment"># 替换字段的值</span></span><br><span class="line">                        expanded_rows.append(new_row)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 如果字段值为空，则添加当前行</span></span><br><span class="line">                    expanded_rows.append(df.iloc[index].copy())</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 创建新的 DataFrame</span></span><br><span class="line">            expanded_df = pd.DataFrame(expanded_rows)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;字段 &#x27;<span class="subst">&#123;column_name&#125;</span>&#x27; 不存在于文件中。&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 生成新的文件名</span></span><br><span class="line">        base, ext = os.path.splitext(file_path)</span><br><span class="line">        new_file_name = <span class="string">f&quot;<span class="subst">&#123;base&#125;</span>（脚本处理生成）.csv&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存为 CSV 文件</span></span><br><span class="line">        expanded_df.to_csv(new_file_name, index=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;文件已保存为: <span class="subst">&#123;new_file_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取 CSV 文件并转换回 Excel</span></span><br><span class="line">        new_excel_name = <span class="string">f&quot;<span class="subst">&#123;base&#125;</span>（脚本处理生成）.xlsx&quot;</span></span><br><span class="line">        expanded_df.to_excel(new_excel_name, index=<span class="literal">False</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;文件已转换为 Excel 并保存为: <span class="subst">&#123;new_excel_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;处理文件时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 从命令行输入 Excel 文件路径和待处理的字段名称</span></span><br><span class="line">    file_path = <span class="built_in">input</span>(<span class="string">&quot;请输入 Excel 文件位置（包括文件名）：&quot;</span>)</span><br><span class="line">    column_name = <span class="built_in">input</span>(<span class="string">&quot;请输入待处理的字段名称（目前不输出）：&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理 Excel 文件</span></span><br><span class="line">    process_excel_to_csv(file_path, column_name)</span><br></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">处理文件时出错: <span class="string">&#x27;Series&#x27;</span> <span class="keyword">object</span> has <span class="keyword">no</span> <span class="keyword">attribute</span> <span class="string">&#x27;iteritems&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_excel_to_csv</span>(<span class="params">file_path, column_name</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 读取 Excel 文件</span></span><br><span class="line">        df = pd.read_excel(file_path)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查字段是否存在</span></span><br><span class="line">        <span class="keyword">if</span> column_name <span class="keyword">in</span> df.columns:</span><br><span class="line">            <span class="comment"># 创建一个新的 DataFrame 用于扩充行</span></span><br><span class="line">            expanded_rows = []</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 遍历指定字段的每一行</span></span><br><span class="line">            <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(df)):</span><br><span class="line">                value = df.at[index, column_name]</span><br><span class="line">                <span class="keyword">if</span> pd.notna(value):  <span class="comment"># 确保值不是 NaN</span></span><br><span class="line">                    <span class="comment"># 按 \n 分割，并去除空格</span></span><br><span class="line">                    split_values = [elem.strip() <span class="keyword">for</span> elem <span class="keyword">in</span> value.split(<span class="string">&#x27;\n&#x27;</span>) <span class="keyword">if</span> elem.strip()]</span><br><span class="line">                    <span class="comment"># 将分割后的值添加到新行中</span></span><br><span class="line">                    <span class="keyword">for</span> item <span class="keyword">in</span> split_values:</span><br><span class="line">                        new_row = df.iloc[index].copy()  <span class="comment"># 复制当前行</span></span><br><span class="line">                        new_row[column_name] = item  <span class="comment"># 替换字段的值</span></span><br><span class="line">                        expanded_rows.append(new_row)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 如果字段值为空，则添加当前行</span></span><br><span class="line">                    expanded_rows.append(df.iloc[index].copy())</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 创建新的 DataFrame</span></span><br><span class="line">            expanded_df = pd.DataFrame(expanded_rows)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;字段 &#x27;<span class="subst">&#123;column_name&#125;</span>&#x27; 不存在于文件中。&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 生成新的文件名</span></span><br><span class="line">        base, ext = os.path.splitext(file_path)</span><br><span class="line">        new_file_name = <span class="string">f&quot;<span class="subst">&#123;base&#125;</span>（脚本处理生成）.csv&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存为 CSV 文件</span></span><br><span class="line">        expanded_df.to_csv(new_file_name, index=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;文件已保存为: <span class="subst">&#123;new_file_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取 CSV 文件并转换回 Excel</span></span><br><span class="line">        new_excel_name = <span class="string">f&quot;<span class="subst">&#123;base&#125;</span>（脚本处理生成）.xlsx&quot;</span></span><br><span class="line">        expanded_df.to_excel(new_excel_name, index=<span class="literal">False</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;文件已转换为 Excel 并保存为: <span class="subst">&#123;new_excel_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;处理文件时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 从命令行输入 Excel 文件路径和待处理的字段名称</span></span><br><span class="line">    file_path = <span class="built_in">input</span>(<span class="string">&quot;请输入 Excel 文件位置（包括文件名）：&quot;</span>)</span><br><span class="line">    column_name = <span class="built_in">input</span>(<span class="string">&quot;请输入待处理的字段名称（目前不输出）：&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理 Excel 文件</span></span><br><span class="line">    process_excel_to_csv(file_path, column_name)</span><br></pre></td></tr></table></figure><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">很好，最后生成的<span class="built_in">csv</span> 文件 再转成excel文件 </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_excel_to_csv</span>(<span class="params">file_path, column_name</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 读取 Excel 文件</span></span><br><span class="line">        df = pd.read_excel(file_path)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查字段是否存在</span></span><br><span class="line">        <span class="keyword">if</span> column_name <span class="keyword">in</span> df.columns:</span><br><span class="line">            <span class="comment"># 创建一个新的 DataFrame 用于扩充行</span></span><br><span class="line">            expanded_rows = []</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 遍历指定字段的每一行</span></span><br><span class="line">            <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(df)):</span><br><span class="line">                value = df.at[index, column_name]</span><br><span class="line">                <span class="keyword">if</span> pd.notna(value):  <span class="comment"># 确保值不是 NaN</span></span><br><span class="line">                    <span class="comment"># 按 \n 分割，并去除空格</span></span><br><span class="line">                    split_values = [elem.strip() <span class="keyword">for</span> elem <span class="keyword">in</span> value.split(<span class="string">&#x27;\n&#x27;</span>) <span class="keyword">if</span> elem.strip()]</span><br><span class="line">                    <span class="comment"># 将分割后的值添加到新行中</span></span><br><span class="line">                    <span class="keyword">for</span> item <span class="keyword">in</span> split_values:</span><br><span class="line">                        new_row = df.iloc[index].copy()  <span class="comment"># 复制当前行</span></span><br><span class="line">                        new_row[column_name] = item  <span class="comment"># 替换字段的值</span></span><br><span class="line">                        expanded_rows.append(new_row)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 如果字段值为空，则添加当前行</span></span><br><span class="line">                    expanded_rows.append(df.iloc[index].copy())</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 创建新的 DataFrame</span></span><br><span class="line">            expanded_df = pd.DataFrame(expanded_rows)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;字段 &#x27;<span class="subst">&#123;column_name&#125;</span>&#x27; 不存在于文件中。&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 生成新的文件名</span></span><br><span class="line">        base, ext = os.path.splitext(file_path)</span><br><span class="line">        new_file_name = <span class="string">f&quot;<span class="subst">&#123;base&#125;</span>（脚本处理生成）.csv&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存为 CSV 文件</span></span><br><span class="line">        expanded_df.to_csv(new_file_name, index=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;CSV 文件已保存为: <span class="subst">&#123;new_file_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取 CSV 文件并转换回 Excel</span></span><br><span class="line">        new_excel_name = <span class="string">f&quot;<span class="subst">&#123;base&#125;</span>（脚本处理生成）.xlsx&quot;</span></span><br><span class="line">        expanded_df.to_excel(new_excel_name, index=<span class="literal">False</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Excel 文件已保存为: <span class="subst">&#123;new_excel_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;处理文件时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 从命令行输入 Excel 文件路径和待处理的字段名称</span></span><br><span class="line">    file_path = <span class="built_in">input</span>(<span class="string">&quot;请输入 Excel 文件位置（包括文件名）：&quot;</span>)</span><br><span class="line">    column_name = <span class="built_in">input</span>(<span class="string">&quot;请输入待处理的字段名称（目前不输出）：&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理 Excel 文件</span></span><br><span class="line">    process_excel_to_csv(file_path, column_name)</span><br></pre></td></tr></table></figure><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">很好，再加上一个功能，把上面按照  <span class="string">\n</span> 换行符号分割，改为在运行脚本先问用户需要用什么字符串分割，然后按照这个字符串分割。如果是 用户输入 <span class="string">\n</span> 就按照这个分割，如果 <span class="string">\t</span> 或者 abc 也按照这样的分割，以此类推</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_excel_to_csv</span>(<span class="params">file_path, column_name, delimiter</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 读取 Excel 文件</span></span><br><span class="line">        df = pd.read_excel(file_path)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查字段是否存在</span></span><br><span class="line">        <span class="keyword">if</span> column_name <span class="keyword">in</span> df.columns:</span><br><span class="line">            <span class="comment"># 创建一个新的 DataFrame 用于扩充行</span></span><br><span class="line">            expanded_rows = []</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 遍历指定字段的每一行</span></span><br><span class="line">            <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(df)):</span><br><span class="line">                value = df.at[index, column_name]</span><br><span class="line">                <span class="keyword">if</span> pd.notna(value):  <span class="comment"># 确保值不是 NaN</span></span><br><span class="line">                    <span class="comment"># 按指定分割符分割，并去除空格</span></span><br><span class="line">                    split_values = [elem.strip() <span class="keyword">for</span> elem <span class="keyword">in</span> value.split(delimiter) <span class="keyword">if</span> elem.strip()]</span><br><span class="line">                    <span class="comment"># 将分割后的值添加到新行中</span></span><br><span class="line">                    <span class="keyword">for</span> item <span class="keyword">in</span> split_values:</span><br><span class="line">                        new_row = df.iloc[index].copy()  <span class="comment"># 复制当前行</span></span><br><span class="line">                        new_row[column_name] = item  <span class="comment"># 替换字段的值</span></span><br><span class="line">                        expanded_rows.append(new_row)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 如果字段值为空，则添加当前行</span></span><br><span class="line">                    expanded_rows.append(df.iloc[index].copy())</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 创建新的 DataFrame</span></span><br><span class="line">            expanded_df = pd.DataFrame(expanded_rows)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;字段 &#x27;<span class="subst">&#123;column_name&#125;</span>&#x27; 不存在于文件中。&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 生成新的文件名</span></span><br><span class="line">        base, ext = os.path.splitext(file_path)</span><br><span class="line">        new_file_name = <span class="string">f&quot;<span class="subst">&#123;base&#125;</span>（脚本处理生成）.csv&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存为 CSV 文件</span></span><br><span class="line">        expanded_df.to_csv(new_file_name, index=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;CSV 文件已保存为: <span class="subst">&#123;new_file_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取 CSV 文件并转换回 Excel</span></span><br><span class="line">        new_excel_name = <span class="string">f&quot;<span class="subst">&#123;base&#125;</span>（脚本处理生成）.xlsx&quot;</span></span><br><span class="line">        expanded_df.to_excel(new_excel_name, index=<span class="literal">False</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Excel 文件已保存为: <span class="subst">&#123;new_excel_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;处理文件时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 从命令行输入 Excel 文件路径和待处理的字段名称</span></span><br><span class="line">    file_path = <span class="built_in">input</span>(<span class="string">&quot;请输入 Excel 文件位置（包括文件名）：&quot;</span>)</span><br><span class="line">    column_name = <span class="built_in">input</span>(<span class="string">&quot;请输入待处理的字段名称（目前不输出）：&quot;</span>)</span><br><span class="line">    delimiter = <span class="built_in">input</span>(<span class="string">&quot;请输入分割字符串（例如：\\n、\\t、abc等）：&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理 Excel 文件</span></span><br><span class="line">    process_excel_to_csv(file_path, column_name, delimiter)</span><br></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">delimiter = <span class="keyword">delimiter</span>.replace(<span class="string">&#x27;\\n&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">能不能把所有特殊转义字符都处理一下 像\t之类的</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_excel_to_csv</span>(<span class="params">file_path, column_name, delimiter</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 转换用户输入的转义字符</span></span><br><span class="line">        escape_mapping = &#123;</span><br><span class="line">            <span class="string">&#x27;\\n&#x27;</span>: <span class="string">&#x27;\n&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;\\t&#x27;</span>: <span class="string">&#x27;\t&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;\\r&#x27;</span>: <span class="string">&#x27;\r&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;\\f&#x27;</span>: <span class="string">&#x27;\f&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;\\v&#x27;</span>: <span class="string">&#x27;\v&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;\\b&#x27;</span>: <span class="string">&#x27;\b&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;\\a&#x27;</span>: <span class="string">&#x27;\a&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;\\0&#x27;</span>: <span class="string">&#x27;\0&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> escape_seq, actual_char <span class="keyword">in</span> escape_mapping.items():</span><br><span class="line">            delimiter = delimiter.replace(escape_seq, actual_char)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取 Excel 文件</span></span><br><span class="line">        df = pd.read_excel(file_path)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查字段是否存在</span></span><br><span class="line">        <span class="keyword">if</span> column_name <span class="keyword">in</span> df.columns:</span><br><span class="line">            <span class="comment"># 创建一个新的 DataFrame 用于扩充行</span></span><br><span class="line">            expanded_rows = []</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 遍历指定字段的每一行</span></span><br><span class="line">            <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(df)):</span><br><span class="line">                value = df.at[index, column_name]</span><br><span class="line">                <span class="keyword">if</span> pd.notna(value):  <span class="comment"># 确保值不是 NaN</span></span><br><span class="line">                    <span class="comment"># 按用户指定的分隔符分割，并去除空格</span></span><br><span class="line">                    split_values = [elem.strip() <span class="keyword">for</span> elem <span class="keyword">in</span> value.split(delimiter) <span class="keyword">if</span> elem.strip()]</span><br><span class="line">                    <span class="comment"># 将分割后的值添加到新行中</span></span><br><span class="line">                    <span class="keyword">for</span> item <span class="keyword">in</span> split_values:</span><br><span class="line">                        new_row = df.iloc[index].copy()  <span class="comment"># 复制当前行</span></span><br><span class="line">                        new_row[column_name] = item  <span class="comment"># 替换字段的值</span></span><br><span class="line">                        expanded_rows.append(new_row)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 如果字段值为空，则添加当前行</span></span><br><span class="line">                    expanded_rows.append(df.iloc[index].copy())</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 创建新的 DataFrame</span></span><br><span class="line">            expanded_df = pd.DataFrame(expanded_rows)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;字段 &#x27;<span class="subst">&#123;column_name&#125;</span>&#x27; 不存在于文件中。&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 生成新的文件名</span></span><br><span class="line">        base, ext = os.path.splitext(file_path)</span><br><span class="line">        new_file_name = <span class="string">f&quot;<span class="subst">&#123;base&#125;</span>（脚本处理生成）.csv&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存为 CSV 文件</span></span><br><span class="line">        expanded_df.to_csv(new_file_name, index=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;CSV 文件已保存为: <span class="subst">&#123;new_file_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取 CSV 文件并转换回 Excel</span></span><br><span class="line">        new_excel_name = <span class="string">f&quot;<span class="subst">&#123;base&#125;</span>（脚本处理生成）.xlsx&quot;</span></span><br><span class="line">        expanded_df.to_excel(new_excel_name, index=<span class="literal">False</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Excel 文件已保存为: <span class="subst">&#123;new_excel_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;处理文件时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 从命令行输入 Excel 文件路径和待处理的字段名称</span></span><br><span class="line">    file_path = <span class="built_in">input</span>(<span class="string">&quot;请输入 Excel 文件位置（包括文件名）：&quot;</span>)</span><br><span class="line">    column_name = <span class="built_in">input</span>(<span class="string">&quot;请输入待处理的字段名称（目前不输出）：&quot;</span>)</span><br><span class="line">    delimiter = <span class="built_in">input</span>(<span class="string">&quot;请输入分隔符（如果使用换行符请直接输入 \\n，使用制表符请直接输入 \\t）：&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理 Excel 文件</span></span><br><span class="line">    process_excel_to_csv(file_path, column_name, delimiter)</span><br></pre></td></tr></table></figure><h3 id="2、可用阶段"><a href="#2、可用阶段" class="headerlink" title="2、可用阶段"></a>2、可用阶段</h3><h4 id="2-0-有py环境可用"><a href="#2-0-有py环境可用" class="headerlink" title="2-0.有py环境可用"></a>2-0.有py环境可用</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">很好，但是要把新表中 此指定字段为空 或者内容为多个或者单个空格的 行删除。加上这样的逻辑</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_excel_to_csv</span>(<span class="params">file_path, column_name, delimiter</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 转换用户输入的转义字符</span></span><br><span class="line">        escape_mapping = &#123;</span><br><span class="line">            <span class="string">&#x27;\\n&#x27;</span>: <span class="string">&#x27;\n&#x27;</span>,  <span class="comment"># 换行符</span></span><br><span class="line">            <span class="string">&#x27;\\t&#x27;</span>: <span class="string">&#x27;\t&#x27;</span>,  <span class="comment"># 制表符</span></span><br><span class="line">            <span class="string">&#x27;\\r&#x27;</span>: <span class="string">&#x27;\r&#x27;</span>,  <span class="comment"># 回车符</span></span><br><span class="line">            <span class="string">&#x27;\\f&#x27;</span>: <span class="string">&#x27;\f&#x27;</span>,  <span class="comment"># 换页符</span></span><br><span class="line">            <span class="string">&#x27;\\v&#x27;</span>: <span class="string">&#x27;\v&#x27;</span>,  <span class="comment"># 垂直制表符</span></span><br><span class="line">            <span class="string">&#x27;\\b&#x27;</span>: <span class="string">&#x27;\b&#x27;</span>,  <span class="comment"># 退格符</span></span><br><span class="line">            <span class="string">&#x27;\\a&#x27;</span>: <span class="string">&#x27;\a&#x27;</span>,  <span class="comment"># 响铃符</span></span><br><span class="line">            <span class="string">&#x27;\\0&#x27;</span>: <span class="string">&#x27;\0&#x27;</span>   <span class="comment"># 空字符</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> escape_seq, actual_char <span class="keyword">in</span> escape_mapping.items():</span><br><span class="line">            delimiter = delimiter.replace(escape_seq, actual_char)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取 Excel 文件</span></span><br><span class="line">        df = pd.read_excel(file_path)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查字段是否存在</span></span><br><span class="line">        <span class="keyword">if</span> column_name <span class="keyword">in</span> df.columns:</span><br><span class="line">            <span class="comment"># 创建一个新的 DataFrame 用于扩充行</span></span><br><span class="line">            expanded_rows = []</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 遍历指定字段的每一行</span></span><br><span class="line">            <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(df)):</span><br><span class="line">                value = df.at[index, column_name]</span><br><span class="line">                <span class="keyword">if</span> pd.notna(value):  <span class="comment"># 确保值不是 NaN</span></span><br><span class="line">                    <span class="comment"># 按用户指定的分隔符分割，并去除空格</span></span><br><span class="line">                    split_values = [elem.strip() <span class="keyword">for</span> elem <span class="keyword">in</span> value.split(delimiter) <span class="keyword">if</span> elem.strip()]</span><br><span class="line">                    <span class="comment"># 将分割后的值添加到新行中</span></span><br><span class="line">                    <span class="keyword">for</span> item <span class="keyword">in</span> split_values:</span><br><span class="line">                        new_row = df.iloc[index].copy()  <span class="comment"># 复制当前行</span></span><br><span class="line">                        new_row[column_name] = item  <span class="comment"># 替换字段的值</span></span><br><span class="line">                        expanded_rows.append(new_row)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 创建新的 DataFrame</span></span><br><span class="line">            expanded_df = pd.DataFrame(expanded_rows)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 删除指定字段为空或仅包含空格的行</span></span><br><span class="line">            expanded_df = expanded_df[expanded_df[column_name].<span class="built_in">str</span>.strip().astype(<span class="built_in">bool</span>)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;字段 &#x27;<span class="subst">&#123;column_name&#125;</span>&#x27; 不存在于文件中。&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 生成新的文件名</span></span><br><span class="line">        base, ext = os.path.splitext(file_path)</span><br><span class="line">        new_file_name = <span class="string">f&quot;<span class="subst">&#123;base&#125;</span>（脚本处理生成）.csv&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存为 CSV 文件</span></span><br><span class="line">        expanded_df.to_csv(new_file_name, index=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;CSV 文件已保存为: <span class="subst">&#123;new_file_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取 CSV 文件并转换回 Excel</span></span><br><span class="line">        new_excel_name = <span class="string">f&quot;<span class="subst">&#123;base&#125;</span>（脚本处理生成）.xlsx&quot;</span></span><br><span class="line">        expanded_df.to_excel(new_excel_name, index=<span class="literal">False</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Excel 文件已保存为: <span class="subst">&#123;new_excel_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;处理文件时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 从命令行输入 Excel 文件路径和待处理的字段名称</span></span><br><span class="line">    file_path = <span class="built_in">input</span>(<span class="string">&quot;请输入 Excel 文件位置（包括文件名）：&quot;</span>)</span><br><span class="line">    column_name = <span class="built_in">input</span>(<span class="string">&quot;请输入待处理的字段名称（目前不输出）：&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 改进后的输入提示，支持任意字符串作为分隔符</span></span><br><span class="line">    delimiter = <span class="built_in">input</span>(</span><br><span class="line">        <span class="string">&quot;请输入分隔符：\n&quot;</span></span><br><span class="line">        <span class="string">&quot;例如：\n&quot;</span></span><br><span class="line">        <span class="string">&quot;  - 使用换行符请直接输入 \\n\n&quot;</span></span><br><span class="line">        <span class="string">&quot;  - 使用制表符请直接输入 \\t\n&quot;</span></span><br><span class="line">        <span class="string">&quot;  - 使用回车符请直接输入 \\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;  - 使用换页符请直接输入 \\f\n&quot;</span></span><br><span class="line">        <span class="string">&quot;  - 使用垂直制表符请直接输入 \\v\n&quot;</span></span><br><span class="line">        <span class="string">&quot;  - 使用退格符请直接输入 \\b\n&quot;</span></span><br><span class="line">        <span class="string">&quot;  - 使用响铃符请直接输入 \\a\n&quot;</span></span><br><span class="line">        <span class="string">&quot;  - 使用空字符请直接输入 \\0\n&quot;</span></span><br><span class="line">        <span class="string">&quot;  - 或者可以输入任意其他字符串作为分隔符\n&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理 Excel 文件</span></span><br><span class="line">    process_excel_to_csv(file_path, column_name, delimiter)</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">很好，请把上面代码 改成 优先从 脚本的同意目录去寻找 要处理的文件。输入改成只输入文件名，</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_excel_to_csv</span>(<span class="params">file_name, column_name, delimiter</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 获取当前脚本的目录</span></span><br><span class="line">        script_dir = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">        file_path = os.path.join(script_dir, file_name)  <span class="comment"># 构建完整的文件路径</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 转换用户输入的转义字符</span></span><br><span class="line">        escape_mapping = &#123;</span><br><span class="line">            <span class="string">&#x27;\\n&#x27;</span>: <span class="string">&#x27;\n&#x27;</span>,  <span class="comment"># 换行符</span></span><br><span class="line">            <span class="string">&#x27;\\t&#x27;</span>: <span class="string">&#x27;\t&#x27;</span>,  <span class="comment"># 制表符</span></span><br><span class="line">            <span class="string">&#x27;\\r&#x27;</span>: <span class="string">&#x27;\r&#x27;</span>,  <span class="comment"># 回车符</span></span><br><span class="line">            <span class="string">&#x27;\\f&#x27;</span>: <span class="string">&#x27;\f&#x27;</span>,  <span class="comment"># 换页符</span></span><br><span class="line">            <span class="string">&#x27;\\v&#x27;</span>: <span class="string">&#x27;\v&#x27;</span>,  <span class="comment"># 垂直制表符</span></span><br><span class="line">            <span class="string">&#x27;\\b&#x27;</span>: <span class="string">&#x27;\b&#x27;</span>,  <span class="comment"># 退格符</span></span><br><span class="line">            <span class="string">&#x27;\\a&#x27;</span>: <span class="string">&#x27;\a&#x27;</span>,  <span class="comment"># 响铃符</span></span><br><span class="line">            <span class="string">&#x27;\\0&#x27;</span>: <span class="string">&#x27;\0&#x27;</span>   <span class="comment"># 空字符</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> escape_seq, actual_char <span class="keyword">in</span> escape_mapping.items():</span><br><span class="line">            delimiter = delimiter.replace(escape_seq, actual_char)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取 Excel 文件</span></span><br><span class="line">        df = pd.read_excel(file_path)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查字段是否存在</span></span><br><span class="line">        <span class="keyword">if</span> column_name <span class="keyword">in</span> df.columns:</span><br><span class="line">            <span class="comment"># 创建一个新的 DataFrame 用于扩充行</span></span><br><span class="line">            expanded_rows = []</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 遍历指定字段的每一行</span></span><br><span class="line">            <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(df)):</span><br><span class="line">                value = df.at[index, column_name]</span><br><span class="line">                <span class="keyword">if</span> pd.notna(value):  <span class="comment"># 确保值不是 NaN</span></span><br><span class="line">                    <span class="comment"># 按用户指定的分隔符分割，并去除空格</span></span><br><span class="line">                    split_values = [elem.strip() <span class="keyword">for</span> elem <span class="keyword">in</span> value.split(delimiter) <span class="keyword">if</span> elem.strip()]</span><br><span class="line">                    <span class="comment"># 将分割后的值添加到新行中</span></span><br><span class="line">                    <span class="keyword">for</span> item <span class="keyword">in</span> split_values:</span><br><span class="line">                        new_row = df.iloc[index].copy()  <span class="comment"># 复制当前行</span></span><br><span class="line">                        new_row[column_name] = item  <span class="comment"># 替换字段的值</span></span><br><span class="line">                        expanded_rows.append(new_row)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 创建新的 DataFrame</span></span><br><span class="line">            expanded_df = pd.DataFrame(expanded_rows)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 删除指定字段为空或仅包含空格的行</span></span><br><span class="line">            expanded_df = expanded_df[expanded_df[column_name].<span class="built_in">str</span>.strip().astype(<span class="built_in">bool</span>)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;字段 &#x27;<span class="subst">&#123;column_name&#125;</span>&#x27; 不存在于文件中。&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 生成新的文件名</span></span><br><span class="line">        base, ext = os.path.splitext(file_path)</span><br><span class="line">        new_file_name = <span class="string">f&quot;<span class="subst">&#123;base&#125;</span>（脚本处理生成）.csv&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存为 CSV 文件</span></span><br><span class="line">        expanded_df.to_csv(new_file_name, index=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;CSV 文件已保存为: <span class="subst">&#123;new_file_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取 CSV 文件并转换回 Excel</span></span><br><span class="line">        new_excel_name = <span class="string">f&quot;<span class="subst">&#123;base&#125;</span>（脚本处理生成）.xlsx&quot;</span></span><br><span class="line">        expanded_df.to_excel(new_excel_name, index=<span class="literal">False</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Excel 文件已保存为: <span class="subst">&#123;new_excel_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;处理文件时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 从命令行输入要处理的文件名和待处理的字段名称</span></span><br><span class="line">    file_name = <span class="built_in">input</span>(<span class="string">&quot;请输入要处理的 Excel 文件名（包括扩展名，例如：data.xlsx）：&quot;</span>)</span><br><span class="line">    column_name = <span class="built_in">input</span>(<span class="string">&quot;请输入待处理的字段名称（目前不输出）：&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 改进后的输入提示，支持任意字符串作为分隔符</span></span><br><span class="line">    delimiter = <span class="built_in">input</span>(</span><br><span class="line">        <span class="string">&quot;请输入分隔符：\n&quot;</span></span><br><span class="line">        <span class="string">&quot;例如：\n&quot;</span></span><br><span class="line">        <span class="string">&quot;  - 使用换行符请直接输入 \\n\n&quot;</span></span><br><span class="line">        <span class="string">&quot;  - 使用制表符请直接输入 \\t\n&quot;</span></span><br><span class="line">        <span class="string">&quot;  - 使用回车符请直接输入 \\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;  - 使用换页符请直接输入 \\f\n&quot;</span></span><br><span class="line">        <span class="string">&quot;  - 使用垂直制表符请直接输入 \\v\n&quot;</span></span><br><span class="line">        <span class="string">&quot;  - 使用退格符请直接输入 \\b\n&quot;</span></span><br><span class="line">        <span class="string">&quot;  - 使用响铃符请直接输入 \\a\n&quot;</span></span><br><span class="line">        <span class="string">&quot;  - 使用空字符请直接输入 \\0\n&quot;</span></span><br><span class="line">        <span class="string">&quot;  - 或者可以输入任意其他字符串作为分隔符\n&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理 Excel 文件</span></span><br><span class="line">    process_excel_to_csv(file_name, column_name, delimiter)</span><br></pre></td></tr></table></figure><h4 id="2-1-无py环境，移植到Windows中。"><a href="#2-1-无py环境，移植到Windows中。" class="headerlink" title="2-1.无py环境，移植到Windows中。"></a>2-1.无py环境，移植到Windows中。</h4><h5 id="2-1-0-不可用阶段"><a href="#2-1-0-不可用阶段" class="headerlink" title="2-1-0.不可用阶段"></a>2-1-0.不可用阶段</h5><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果不确定 用户是否 安装 <span class="keyword">python</span>，如何 在一个Windows电脑上 能够直接用这个脚本呢？</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此时把 Mac中的 脚本复制到Windows中，在Windows中安装配套的环境需要的包。</span></span><br><span class="line">pip install pyinstaller</span><br><span class="line">pyinstaller --onefile your_script.py</span><br><span class="line">...</span><br><span class="line">会在 dist文件夹内生成 .exe Windows可执行文件。双击 .exe可以执行。</span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我把上面的文件 在 Windows 运行生成啦 一个 <span class="keyword">exe</span>文件，但是 由于 我有 <span class="keyword">python</span> 运行时很多个 <span class="built_in">input</span>输入，我该怎么运行 </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 Tkinter 创建一个 GUI 来输入文件名、字段名称和分隔符：</span></span><br><span class="line">sudo apt-get install python3-tk</span><br><span class="line"></span><br><span class="line">在 pyinstaller --onefile your_script.py 后，</span><br><span class="line">我在Windows 可以 弹出一个对话窗口 交互式 方式 把 用什么分割等输入进去 </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_excel_to_csv</span>(<span class="params">file_name, column_name, delimiter</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        script_dir = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">        file_path = os.path.join(script_dir, file_name)</span><br><span class="line"></span><br><span class="line">        escape_mapping = &#123;</span><br><span class="line">            <span class="string">&#x27;\\n&#x27;</span>: <span class="string">&#x27;\n&#x27;</span>,  <span class="comment"># 换行符</span></span><br><span class="line">            <span class="string">&#x27;\\t&#x27;</span>: <span class="string">&#x27;\t&#x27;</span>,  <span class="comment"># 制表符</span></span><br><span class="line">            <span class="string">&#x27;\\r&#x27;</span>: <span class="string">&#x27;\r&#x27;</span>,  <span class="comment"># 回车符</span></span><br><span class="line">            <span class="string">&#x27;\\f&#x27;</span>: <span class="string">&#x27;\f&#x27;</span>,  <span class="comment"># 换页符</span></span><br><span class="line">            <span class="string">&#x27;\\v&#x27;</span>: <span class="string">&#x27;\v&#x27;</span>,  <span class="comment"># 垂直制表符</span></span><br><span class="line">            <span class="string">&#x27;\\b&#x27;</span>: <span class="string">&#x27;\b&#x27;</span>,  <span class="comment"># 退格符</span></span><br><span class="line">            <span class="string">&#x27;\\a&#x27;</span>: <span class="string">&#x27;\a&#x27;</span>,  <span class="comment"># 响铃符</span></span><br><span class="line">            <span class="string">&#x27;\\0&#x27;</span>: <span class="string">&#x27;\0&#x27;</span>   <span class="comment"># 空字符</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> escape_seq, actual_char <span class="keyword">in</span> escape_mapping.items():</span><br><span class="line">            delimiter = delimiter.replace(escape_seq, actual_char)</span><br><span class="line"></span><br><span class="line">        df = pd.read_excel(file_path)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> column_name <span class="keyword">in</span> df.columns:</span><br><span class="line">            expanded_rows = []</span><br><span class="line">            <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(df)):</span><br><span class="line">                value = df.at[index, column_name]</span><br><span class="line">                <span class="keyword">if</span> pd.notna(value):</span><br><span class="line">                    split_values = [elem.strip() <span class="keyword">for</span> elem <span class="keyword">in</span> value.split(delimiter) <span class="keyword">if</span> elem.strip()]</span><br><span class="line">                    <span class="keyword">for</span> item <span class="keyword">in</span> split_values:</span><br><span class="line">                        new_row = df.iloc[index].copy()</span><br><span class="line">                        new_row[column_name] = item</span><br><span class="line">                        expanded_rows.append(new_row)</span><br><span class="line"></span><br><span class="line">            expanded_df = pd.DataFrame(expanded_rows)</span><br><span class="line">            expanded_df = expanded_df[expanded_df[column_name].<span class="built_in">str</span>.strip().astype(<span class="built_in">bool</span>)]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            messagebox.showerror(<span class="string">&quot;错误&quot;</span>, <span class="string">f&quot;字段 &#x27;<span class="subst">&#123;column_name&#125;</span>&#x27; 不存在于文件中。&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        base, ext = os.path.splitext(file_path)</span><br><span class="line">        new_file_name = <span class="string">f&quot;<span class="subst">&#123;base&#125;</span>（脚本处理生成）.csv&quot;</span></span><br><span class="line">        expanded_df.to_csv(new_file_name, index=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        messagebox.showinfo(<span class="string">&quot;成功&quot;</span>, <span class="string">f&quot;CSV 文件已保存为: <span class="subst">&#123;new_file_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        new_excel_name = <span class="string">f&quot;<span class="subst">&#123;base&#125;</span>（脚本处理生成）.xlsx&quot;</span></span><br><span class="line">        expanded_df.to_excel(new_excel_name, index=<span class="literal">False</span>)</span><br><span class="line">        messagebox.showinfo(<span class="string">&quot;成功&quot;</span>, <span class="string">f&quot;Excel 文件已保存为: <span class="subst">&#123;new_excel_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        messagebox.showerror(<span class="string">&quot;错误&quot;</span>, <span class="string">f&quot;处理文件时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_submit</span>():</span><br><span class="line">    file_name = entry_file.get()</span><br><span class="line">    column_name = entry_column.get()</span><br><span class="line">    delimiter = entry_delimiter.get()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> file_name <span class="keyword">or</span> <span class="keyword">not</span> column_name:</span><br><span class="line">        messagebox.showerror(<span class="string">&quot;错误&quot;</span>, <span class="string">&quot;文件名和字段名称不能为空！&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    process_excel_to_csv(file_name, column_name, delimiter)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建主窗口</span></span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">&quot;Excel 处理工具&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建输入框和标签</span></span><br><span class="line">tk.Label(root, text=<span class="string">&quot;Excel 文件名（包括扩展名）：&quot;</span>).pack()</span><br><span class="line">entry_file = tk.Entry(root)</span><br><span class="line">entry_file.pack()</span><br><span class="line"></span><br><span class="line">tk.Label(root, text=<span class="string">&quot;字段名称：&quot;</span>).pack()</span><br><span class="line">entry_column = tk.Entry(root)</span><br><span class="line">entry_column.pack()</span><br><span class="line"></span><br><span class="line">tk.Label(root, text=<span class="string">&quot;分隔符：&quot;</span>).pack()</span><br><span class="line">entry_delimiter = tk.Entry(root)</span><br><span class="line">entry_delimiter.pack()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提供详细的输入提示</span></span><br><span class="line">delimiter_info = (</span><br><span class="line">    <span class="string">&quot;输入分隔符的示例：\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  - 使用换行符请直接输入 \\n\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  - 使用制表符请直接输入 \\t\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  - 使用回车符请直接输入 \\r\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  - 使用换页符请直接输入 \\f\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  - 使用垂直制表符请直接输入 \\v\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  - 使用退格符请直接输入 \\b\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  - 使用响铃符请直接输入 \\a\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  - 使用空字符请直接输入 \\0\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  - 或者可以输入任意其他字符串作为分隔符&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">tk.Label(root, text=delimiter_info, justify=<span class="string">&#x27;left&#x27;</span>).pack(pady=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建提交按钮</span></span><br><span class="line">btn_submit = tk.Button(root, text=<span class="string">&quot;处理文件&quot;</span>, command=on_submit)</span><br><span class="line">btn_submit.pack()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动主循环</span></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><p>​我在 cmd 或者 powershell 中运行 此.exe文件，可以查看真实闪退报错信息。根据提示修改，可能是 Windows 中环境的包缺失要下载等等</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不再闪退啦，但是这是不是 从 <span class="keyword">exe</span>文件 同目录下找 exel文件来处理呢？我运行一下，总是找不到文件</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_excel_to_csv</span>(<span class="params">file_name, column_name, delimiter</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 获取当前工作目录</span></span><br><span class="line">        current_dir = os.getcwd()</span><br><span class="line">        file_path = os.path.join(current_dir, file_name)</span><br><span class="line"></span><br><span class="line">        escape_mapping = &#123;</span><br><span class="line">            <span class="string">&#x27;\\n&#x27;</span>: <span class="string">&#x27;\n&#x27;</span>,  <span class="comment"># 换行符</span></span><br><span class="line">            <span class="string">&#x27;\\t&#x27;</span>: <span class="string">&#x27;\t&#x27;</span>,  <span class="comment"># 制表符</span></span><br><span class="line">            <span class="string">&#x27;\\r&#x27;</span>: <span class="string">&#x27;\r&#x27;</span>,  <span class="comment"># 回车符</span></span><br><span class="line">            <span class="string">&#x27;\\f&#x27;</span>: <span class="string">&#x27;\f&#x27;</span>,  <span class="comment"># 换页符</span></span><br><span class="line">            <span class="string">&#x27;\\v&#x27;</span>: <span class="string">&#x27;\v&#x27;</span>,  <span class="comment"># 垂直制表符</span></span><br><span class="line">            <span class="string">&#x27;\\b&#x27;</span>: <span class="string">&#x27;\b&#x27;</span>,  <span class="comment"># 退格符</span></span><br><span class="line">            <span class="string">&#x27;\\a&#x27;</span>: <span class="string">&#x27;\a&#x27;</span>,  <span class="comment"># 响铃符</span></span><br><span class="line">            <span class="string">&#x27;\\0&#x27;</span>: <span class="string">&#x27;\0&#x27;</span>   <span class="comment"># 空字符</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> escape_seq, actual_char <span class="keyword">in</span> escape_mapping.items():</span><br><span class="line">            delimiter = delimiter.replace(escape_seq, actual_char)</span><br><span class="line"></span><br><span class="line">        df = pd.read_excel(file_path)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> column_name <span class="keyword">in</span> df.columns:</span><br><span class="line">            expanded_rows = []</span><br><span class="line">            <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(df)):</span><br><span class="line">                value = df.at[index, column_name]</span><br><span class="line">                <span class="keyword">if</span> pd.notna(value):</span><br><span class="line">                    split_values = [elem.strip() <span class="keyword">for</span> elem <span class="keyword">in</span> value.split(delimiter) <span class="keyword">if</span> elem.strip()]</span><br><span class="line">                    <span class="keyword">for</span> item <span class="keyword">in</span> split_values:</span><br><span class="line">                        new_row = df.iloc[index].copy()</span><br><span class="line">                        new_row[column_name] = item</span><br><span class="line">                        expanded_rows.append(new_row)</span><br><span class="line"></span><br><span class="line">            expanded_df = pd.DataFrame(expanded_rows)</span><br><span class="line">            expanded_df = expanded_df[expanded_df[column_name].<span class="built_in">str</span>.strip().astype(<span class="built_in">bool</span>)]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            messagebox.showerror(<span class="string">&quot;错误&quot;</span>, <span class="string">f&quot;字段 &#x27;<span class="subst">&#123;column_name&#125;</span>&#x27; 不存在于文件中。&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        base, ext = os.path.splitext(file_path)</span><br><span class="line">        new_file_name = <span class="string">f&quot;<span class="subst">&#123;base&#125;</span>（脚本处理生成）.csv&quot;</span></span><br><span class="line">        expanded_df.to_csv(new_file_name, index=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        messagebox.showinfo(<span class="string">&quot;成功&quot;</span>, <span class="string">f&quot;CSV 文件已保存为: <span class="subst">&#123;new_file_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        new_excel_name = <span class="string">f&quot;<span class="subst">&#123;base&#125;</span>（脚本处理生成）.xlsx&quot;</span></span><br><span class="line">        expanded_df.to_excel(new_excel_name, index=<span class="literal">False</span>)</span><br><span class="line">        messagebox.showinfo(<span class="string">&quot;成功&quot;</span>, <span class="string">f&quot;Excel 文件已保存为: <span class="subst">&#123;new_excel_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        messagebox.showerror(<span class="string">&quot;错误&quot;</span>, <span class="string">f&quot;处理文件时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_submit</span>():</span><br><span class="line">    file_name = entry_file.get()</span><br><span class="line">    column_name = entry_column.get()</span><br><span class="line">    delimiter = entry_delimiter.get()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> file_name <span class="keyword">or</span> <span class="keyword">not</span> column_name:</span><br><span class="line">        messagebox.showerror(<span class="string">&quot;错误&quot;</span>, <span class="string">&quot;文件名和字段名称不能为空！&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理文件</span></span><br><span class="line">    process_excel_to_csv(file_name, column_name, delimiter)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建主窗口</span></span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">&quot;Excel 处理工具&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建输入框和标签</span></span><br><span class="line">tk.Label(root, text=<span class="string">&quot;Excel 文件名（包括扩展名）：&quot;</span>).pack()</span><br><span class="line">entry_file = tk.Entry(root)</span><br><span class="line">entry_file.pack()</span><br><span class="line"></span><br><span class="line">tk.Label(root, text=<span class="string">&quot;字段名称：&quot;</span>).pack()</span><br><span class="line">entry_column = tk.Entry(root)</span><br><span class="line">entry_column.pack()</span><br><span class="line"></span><br><span class="line">tk.Label(root, text=<span class="string">&quot;分隔符：&quot;</span>).pack()</span><br><span class="line">entry_delimiter = tk.Entry(root)</span><br><span class="line">entry_delimiter.pack()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提供详细的输入提示</span></span><br><span class="line">delimiter_info = (</span><br><span class="line">    <span class="string">&quot;输入分隔符的示例：\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  - 使用换行符请直接输入 \\n\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  - 使用制表符请直接输入 \\t\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  - 使用回车符请直接输入 \\r\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  - 使用换页符请直接输入 \\f\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  - 使用垂直制表符请直接输入 \\v\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  - 使用退格符请直接输入 \\b\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  - 使用响铃符请直接输入 \\a\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  - 使用空字符请直接输入 \\0\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  - 或者可以输入任意其他字符串作为分隔符&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">tk.Label(root, text=delimiter_info, justify=<span class="string">&#x27;left&#x27;</span>).pack(pady=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建提交按钮</span></span><br><span class="line">btn_submit = tk.Button(root, text=<span class="string">&quot;处理文件&quot;</span>, command=on_submit)</span><br><span class="line">btn_submit.pack()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动主循环</span></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><h5 id="2-1-1-可用阶段"><a href="#2-1-1-可用阶段" class="headerlink" title="2-1-1.可用阶段"></a>2-1-1.可用阶段</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_excel_to_csv</span>(<span class="params">file_name, column_name, delimiter</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 获取当前工作目录</span></span><br><span class="line">        current_dir = os.getcwd()</span><br><span class="line">        file_path = os.path.join(current_dir, file_name)</span><br><span class="line"></span><br><span class="line">        escape_mapping = &#123;</span><br><span class="line">            <span class="string">&#x27;\\n&#x27;</span>: <span class="string">&#x27;\n&#x27;</span>,  <span class="comment"># 换行符</span></span><br><span class="line">            <span class="string">&#x27;\\t&#x27;</span>: <span class="string">&#x27;\t&#x27;</span>,  <span class="comment"># 制表符</span></span><br><span class="line">            <span class="string">&#x27;\\r&#x27;</span>: <span class="string">&#x27;\r&#x27;</span>,  <span class="comment"># 回车符</span></span><br><span class="line">            <span class="string">&#x27;\\f&#x27;</span>: <span class="string">&#x27;\f&#x27;</span>,  <span class="comment"># 换页符</span></span><br><span class="line">            <span class="string">&#x27;\\v&#x27;</span>: <span class="string">&#x27;\v&#x27;</span>,  <span class="comment"># 垂直制表符</span></span><br><span class="line">            <span class="string">&#x27;\\b&#x27;</span>: <span class="string">&#x27;\b&#x27;</span>,  <span class="comment"># 退格符</span></span><br><span class="line">            <span class="string">&#x27;\\a&#x27;</span>: <span class="string">&#x27;\a&#x27;</span>,  <span class="comment"># 响铃符</span></span><br><span class="line">            <span class="string">&#x27;\\0&#x27;</span>: <span class="string">&#x27;\0&#x27;</span>   <span class="comment"># 空字符</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> escape_seq, actual_char <span class="keyword">in</span> escape_mapping.items():</span><br><span class="line">            delimiter = delimiter.replace(escape_seq, actual_char)</span><br><span class="line"></span><br><span class="line">        df = pd.read_excel(file_path)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> column_name <span class="keyword">in</span> df.columns:</span><br><span class="line">            expanded_rows = []</span><br><span class="line">            <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(df)):</span><br><span class="line">                value = df.at[index, column_name]</span><br><span class="line">                <span class="keyword">if</span> pd.notna(value):</span><br><span class="line">                    split_values = [elem.strip() <span class="keyword">for</span> elem <span class="keyword">in</span> value.split(delimiter) <span class="keyword">if</span> elem.strip()]</span><br><span class="line">                    <span class="keyword">for</span> item <span class="keyword">in</span> split_values:</span><br><span class="line">                        new_row = df.iloc[index].copy()</span><br><span class="line">                        new_row[column_name] = item</span><br><span class="line">                        expanded_rows.append(new_row)</span><br><span class="line"></span><br><span class="line">            expanded_df = pd.DataFrame(expanded_rows)</span><br><span class="line">            expanded_df = expanded_df[expanded_df[column_name].<span class="built_in">str</span>.strip().astype(<span class="built_in">bool</span>)]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            messagebox.showerror(<span class="string">&quot;错误&quot;</span>, <span class="string">f&quot;字段 &#x27;<span class="subst">&#123;column_name&#125;</span>&#x27; 不存在于文件中。&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        base, ext = os.path.splitext(file_path)</span><br><span class="line">        new_file_name = <span class="string">f&quot;<span class="subst">&#123;base&#125;</span>（脚本处理生成）.csv&quot;</span></span><br><span class="line">        expanded_df.to_csv(new_file_name, index=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        messagebox.showinfo(<span class="string">&quot;成功&quot;</span>, <span class="string">f&quot;CSV 文件已保存为: <span class="subst">&#123;new_file_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        new_excel_name = <span class="string">f&quot;<span class="subst">&#123;base&#125;</span>（脚本处理生成）.xlsx&quot;</span></span><br><span class="line">        expanded_df.to_excel(new_excel_name, index=<span class="literal">False</span>)</span><br><span class="line">        messagebox.showinfo(<span class="string">&quot;成功&quot;</span>, <span class="string">f&quot;Excel 文件已保存为: <span class="subst">&#123;new_excel_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        messagebox.showerror(<span class="string">&quot;错误&quot;</span>, <span class="string">f&quot;处理文件时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_submit</span>():</span><br><span class="line">    file_name = entry_file.get()</span><br><span class="line">    column_name = entry_column.get()</span><br><span class="line">    delimiter = entry_delimiter.get()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> file_name <span class="keyword">or</span> <span class="keyword">not</span> column_name:</span><br><span class="line">        messagebox.showerror(<span class="string">&quot;错误&quot;</span>, <span class="string">&quot;文件名和字段名称不能为空！&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理文件</span></span><br><span class="line">    process_excel_to_csv(file_name, column_name, delimiter)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建主窗口</span></span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">&quot;Excel 处理工具&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建输入框和标签</span></span><br><span class="line">tk.Label(root, text=<span class="string">&quot;Excel 文件名（包括扩展名）：&quot;</span>).pack()</span><br><span class="line">entry_file = tk.Entry(root)</span><br><span class="line">entry_file.pack()</span><br><span class="line"></span><br><span class="line">tk.Label(root, text=<span class="string">&quot;字段名称：&quot;</span>).pack()</span><br><span class="line">entry_column = tk.Entry(root)</span><br><span class="line">entry_column.pack()</span><br><span class="line"></span><br><span class="line">tk.Label(root, text=<span class="string">&quot;分隔符：&quot;</span>).pack()</span><br><span class="line">entry_delimiter = tk.Entry(root)</span><br><span class="line">entry_delimiter.pack()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提供详细的输入提示</span></span><br><span class="line">delimiter_info = (</span><br><span class="line">    <span class="string">&quot;输入分隔符的示例：\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  - 使用换行符请直接输入 \\n\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  - 使用制表符请直接输入 \\t\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  - 使用回车符请直接输入 \\r\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  - 使用换页符请直接输入 \\f\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  - 使用垂直制表符请直接输入 \\v\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  - 使用退格符请直接输入 \\b\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  - 使用响铃符请直接输入 \\a\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  - 使用空字符请直接输入 \\0\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  - 或者可以输入任意其他字符串作为分隔符&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">tk.Label(root, text=delimiter_info, justify=<span class="string">&#x27;left&#x27;</span>).pack(pady=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建提交按钮</span></span><br><span class="line">btn_submit = tk.Button(root, text=<span class="string">&quot;处理文件&quot;</span>, command=on_submit)</span><br><span class="line">btn_submit.pack()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动主循环</span></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><h1 id="最终脚本及执行文件"><a href="#最终脚本及执行文件" class="headerlink" title="最终脚本及执行文件"></a>最终脚本及执行文件</h1><h2 id="1、python脚本"><a href="#1、python脚本" class="headerlink" title="1、python脚本"></a>1、python脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_excel_to_csv</span>(<span class="params">file_name, column_name, delimiter</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 获取当前脚本的目录</span></span><br><span class="line">        script_dir = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">        file_path = os.path.join(script_dir, file_name)  <span class="comment"># 构建完整的文件路径</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 转换用户输入的转义字符</span></span><br><span class="line">        escape_mapping = &#123;</span><br><span class="line">            <span class="string">&#x27;\\n&#x27;</span>: <span class="string">&#x27;\n&#x27;</span>,  <span class="comment"># 换行符</span></span><br><span class="line">            <span class="string">&#x27;\\t&#x27;</span>: <span class="string">&#x27;\t&#x27;</span>,  <span class="comment"># 制表符</span></span><br><span class="line">            <span class="string">&#x27;\\r&#x27;</span>: <span class="string">&#x27;\r&#x27;</span>,  <span class="comment"># 回车符</span></span><br><span class="line">            <span class="string">&#x27;\\f&#x27;</span>: <span class="string">&#x27;\f&#x27;</span>,  <span class="comment"># 换页符</span></span><br><span class="line">            <span class="string">&#x27;\\v&#x27;</span>: <span class="string">&#x27;\v&#x27;</span>,  <span class="comment"># 垂直制表符</span></span><br><span class="line">            <span class="string">&#x27;\\b&#x27;</span>: <span class="string">&#x27;\b&#x27;</span>,  <span class="comment"># 退格符</span></span><br><span class="line">            <span class="string">&#x27;\\a&#x27;</span>: <span class="string">&#x27;\a&#x27;</span>,  <span class="comment"># 响铃符</span></span><br><span class="line">            <span class="string">&#x27;\\0&#x27;</span>: <span class="string">&#x27;\0&#x27;</span>   <span class="comment"># 空字符</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> escape_seq, actual_char <span class="keyword">in</span> escape_mapping.items():</span><br><span class="line">            delimiter = delimiter.replace(escape_seq, actual_char)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取 Excel 文件</span></span><br><span class="line">        df = pd.read_excel(file_path)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查字段是否存在</span></span><br><span class="line">        <span class="keyword">if</span> column_name <span class="keyword">in</span> df.columns:</span><br><span class="line">            <span class="comment"># 创建一个新的 DataFrame 用于扩充行</span></span><br><span class="line">            expanded_rows = []</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 遍历指定字段的每一行</span></span><br><span class="line">            <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(df)):</span><br><span class="line">                value = df.at[index, column_name]</span><br><span class="line">                <span class="keyword">if</span> pd.notna(value):  <span class="comment"># 确保值不是 NaN</span></span><br><span class="line">                    <span class="comment"># 按用户指定的分隔符分割，并去除空格</span></span><br><span class="line">                    split_values = [elem.strip() <span class="keyword">for</span> elem <span class="keyword">in</span> value.split(delimiter) <span class="keyword">if</span> elem.strip()]</span><br><span class="line">                    <span class="comment"># 将分割后的值添加到新行中</span></span><br><span class="line">                    <span class="keyword">for</span> item <span class="keyword">in</span> split_values:</span><br><span class="line">                        new_row = df.iloc[index].copy()  <span class="comment"># 复制当前行</span></span><br><span class="line">                        new_row[column_name] = item  <span class="comment"># 替换字段的值</span></span><br><span class="line">                        expanded_rows.append(new_row)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 创建新的 DataFrame</span></span><br><span class="line">            expanded_df = pd.DataFrame(expanded_rows)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 删除指定字段为空或仅包含空格的行</span></span><br><span class="line">            expanded_df = expanded_df[expanded_df[column_name].<span class="built_in">str</span>.strip().astype(<span class="built_in">bool</span>)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;字段 &#x27;<span class="subst">&#123;column_name&#125;</span>&#x27; 不存在于文件中。&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 生成新的文件名</span></span><br><span class="line">        base, ext = os.path.splitext(file_path)</span><br><span class="line">        new_file_name = <span class="string">f&quot;<span class="subst">&#123;base&#125;</span>（脚本处理生成）.csv&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存为 CSV 文件</span></span><br><span class="line">        expanded_df.to_csv(new_file_name, index=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;CSV 文件已保存为: <span class="subst">&#123;new_file_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取 CSV 文件并转换回 Excel</span></span><br><span class="line">        new_excel_name = <span class="string">f&quot;<span class="subst">&#123;base&#125;</span>（脚本处理生成）.xlsx&quot;</span></span><br><span class="line">        expanded_df.to_excel(new_excel_name, index=<span class="literal">False</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Excel 文件已保存为: <span class="subst">&#123;new_excel_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;处理文件时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 从命令行输入要处理的文件名和待处理的字段名称</span></span><br><span class="line">    file_name = <span class="built_in">input</span>(<span class="string">&quot;请输入要处理的 Excel 文件名（包括扩展名，例如：data.xlsx）：&quot;</span>)</span><br><span class="line">    column_name = <span class="built_in">input</span>(<span class="string">&quot;请输入待处理的字段名称（目前不输出）：&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 改进后的输入提示，支持任意字符串作为分隔符</span></span><br><span class="line">    delimiter = <span class="built_in">input</span>(</span><br><span class="line">        <span class="string">&quot;请输入分隔符：\n&quot;</span></span><br><span class="line">        <span class="string">&quot;例如：\n&quot;</span></span><br><span class="line">        <span class="string">&quot;  - 使用换行符请直接输入 \\n\n&quot;</span></span><br><span class="line">        <span class="string">&quot;  - 使用制表符请直接输入 \\t\n&quot;</span></span><br><span class="line">        <span class="string">&quot;  - 使用回车符请直接输入 \\r\n&quot;</span></span><br><span class="line">        <span class="string">&quot;  - 使用换页符请直接输入 \\f\n&quot;</span></span><br><span class="line">        <span class="string">&quot;  - 使用垂直制表符请直接输入 \\v\n&quot;</span></span><br><span class="line">        <span class="string">&quot;  - 使用退格符请直接输入 \\b\n&quot;</span></span><br><span class="line">        <span class="string">&quot;  - 使用响铃符请直接输入 \\a\n&quot;</span></span><br><span class="line">        <span class="string">&quot;  - 使用空字符请直接输入 \\0\n&quot;</span></span><br><span class="line">        <span class="string">&quot;  - 或者可以输入任意其他字符串作为分隔符\n&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理 Excel 文件</span></span><br><span class="line">    process_excel_to_csv(file_name, column_name, delimiter)</span><br></pre></td></tr></table></figure><h2 id="2、Windows可执行文件"><a href="#2、Windows可执行文件" class="headerlink" title="2、Windows可执行文件"></a>2、Windows可执行文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_excel_to_csv</span>(<span class="params">file_name, column_name, delimiter</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 获取当前工作目录</span></span><br><span class="line">        current_dir = os.getcwd()</span><br><span class="line">        file_path = os.path.join(current_dir, file_name)</span><br><span class="line"></span><br><span class="line">        escape_mapping = &#123;</span><br><span class="line">            <span class="string">&#x27;\\n&#x27;</span>: <span class="string">&#x27;\n&#x27;</span>,  <span class="comment"># 换行符</span></span><br><span class="line">            <span class="string">&#x27;\\t&#x27;</span>: <span class="string">&#x27;\t&#x27;</span>,  <span class="comment"># 制表符</span></span><br><span class="line">            <span class="string">&#x27;\\r&#x27;</span>: <span class="string">&#x27;\r&#x27;</span>,  <span class="comment"># 回车符</span></span><br><span class="line">            <span class="string">&#x27;\\f&#x27;</span>: <span class="string">&#x27;\f&#x27;</span>,  <span class="comment"># 换页符</span></span><br><span class="line">            <span class="string">&#x27;\\v&#x27;</span>: <span class="string">&#x27;\v&#x27;</span>,  <span class="comment"># 垂直制表符</span></span><br><span class="line">            <span class="string">&#x27;\\b&#x27;</span>: <span class="string">&#x27;\b&#x27;</span>,  <span class="comment"># 退格符</span></span><br><span class="line">            <span class="string">&#x27;\\a&#x27;</span>: <span class="string">&#x27;\a&#x27;</span>,  <span class="comment"># 响铃符</span></span><br><span class="line">            <span class="string">&#x27;\\0&#x27;</span>: <span class="string">&#x27;\0&#x27;</span>   <span class="comment"># 空字符</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> escape_seq, actual_char <span class="keyword">in</span> escape_mapping.items():</span><br><span class="line">            delimiter = delimiter.replace(escape_seq, actual_char)</span><br><span class="line"></span><br><span class="line">        df = pd.read_excel(file_path)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> column_name <span class="keyword">in</span> df.columns:</span><br><span class="line">            expanded_rows = []</span><br><span class="line">            <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(df)):</span><br><span class="line">                value = df.at[index, column_name]</span><br><span class="line">                <span class="keyword">if</span> pd.notna(value):</span><br><span class="line">                    split_values = [elem.strip() <span class="keyword">for</span> elem <span class="keyword">in</span> value.split(delimiter) <span class="keyword">if</span> elem.strip()]</span><br><span class="line">                    <span class="keyword">for</span> item <span class="keyword">in</span> split_values:</span><br><span class="line">                        new_row = df.iloc[index].copy()</span><br><span class="line">                        new_row[column_name] = item</span><br><span class="line">                        expanded_rows.append(new_row)</span><br><span class="line"></span><br><span class="line">            expanded_df = pd.DataFrame(expanded_rows)</span><br><span class="line">            expanded_df = expanded_df[expanded_df[column_name].<span class="built_in">str</span>.strip().astype(<span class="built_in">bool</span>)]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            messagebox.showerror(<span class="string">&quot;错误&quot;</span>, <span class="string">f&quot;字段 &#x27;<span class="subst">&#123;column_name&#125;</span>&#x27; 不存在于文件中。&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        base, ext = os.path.splitext(file_path)</span><br><span class="line">        new_file_name = <span class="string">f&quot;<span class="subst">&#123;base&#125;</span>（脚本处理生成）.csv&quot;</span></span><br><span class="line">        expanded_df.to_csv(new_file_name, index=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        messagebox.showinfo(<span class="string">&quot;成功&quot;</span>, <span class="string">f&quot;CSV 文件已保存为: <span class="subst">&#123;new_file_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        new_excel_name = <span class="string">f&quot;<span class="subst">&#123;base&#125;</span>（脚本处理生成）.xlsx&quot;</span></span><br><span class="line">        expanded_df.to_excel(new_excel_name, index=<span class="literal">False</span>)</span><br><span class="line">        messagebox.showinfo(<span class="string">&quot;成功&quot;</span>, <span class="string">f&quot;Excel 文件已保存为: <span class="subst">&#123;new_excel_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        messagebox.showerror(<span class="string">&quot;错误&quot;</span>, <span class="string">f&quot;处理文件时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_submit</span>():</span><br><span class="line">    file_name = entry_file.get()</span><br><span class="line">    column_name = entry_column.get()</span><br><span class="line">    delimiter = entry_delimiter.get()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> file_name <span class="keyword">or</span> <span class="keyword">not</span> column_name:</span><br><span class="line">        messagebox.showerror(<span class="string">&quot;错误&quot;</span>, <span class="string">&quot;文件名和字段名称不能为空！&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理文件</span></span><br><span class="line">    process_excel_to_csv(file_name, column_name, delimiter)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建主窗口</span></span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">&quot;Excel 处理工具&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建输入框和标签</span></span><br><span class="line">tk.Label(root, text=<span class="string">&quot;Excel 文件名（包括扩展名）：&quot;</span>).pack()</span><br><span class="line">entry_file = tk.Entry(root)</span><br><span class="line">entry_file.pack()</span><br><span class="line"></span><br><span class="line">tk.Label(root, text=<span class="string">&quot;字段名称：&quot;</span>).pack()</span><br><span class="line">entry_column = tk.Entry(root)</span><br><span class="line">entry_column.pack()</span><br><span class="line"></span><br><span class="line">tk.Label(root, text=<span class="string">&quot;分隔符：&quot;</span>).pack()</span><br><span class="line">entry_delimiter = tk.Entry(root)</span><br><span class="line">entry_delimiter.pack()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提供详细的输入提示</span></span><br><span class="line">delimiter_info = (</span><br><span class="line">    <span class="string">&quot;输入分隔符的示例：\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  - 使用换行符请直接输入 \\n\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  - 使用制表符请直接输入 \\t\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  - 使用回车符请直接输入 \\r\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  - 使用换页符请直接输入 \\f\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  - 使用垂直制表符请直接输入 \\v\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  - 使用退格符请直接输入 \\b\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  - 使用响铃符请直接输入 \\a\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  - 使用空字符请直接输入 \\0\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  - 或者可以输入任意其他字符串作为分隔符&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">tk.Label(root, text=delimiter_info, justify=<span class="string">&#x27;left&#x27;</span>).pack(pady=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建提交按钮</span></span><br><span class="line">btn_submit = tk.Button(root, text=<span class="string">&quot;处理文件&quot;</span>, command=on_submit)</span><br><span class="line">btn_submit.pack()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动主循环</span></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><p>将上方的python脚本通过 pyinstaller –onefile your_script.py</p><p>…<br>会在 dist文件夹内生成 .exe Windows可执行文件。双击 .exe可以执行。</p><p><img src="/2024/10/10/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%88%87%E5%88%86excel%E5%8D%95%E5%85%83%E6%A0%BC%E5%BD%A2%E6%88%90%E6%9B%B4%E5%A4%9A%E7%9A%84%E8%A1%8C%EF%BC%88%E5%88%A9%E7%94%A8chatgpt%E5%BC%80%E5%8F%91%E6%A1%88%E4%BE%8B%EF%BC%89/8e4d28f62933af62272db0ef6ca4ea1.png" alt="8e4d28f62933af62272db0ef6ca4ea1"></p><p>实现了背景中的要求</p><p>（原始）</p><p><img src="/2024/10/10/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%88%87%E5%88%86excel%E5%8D%95%E5%85%83%E6%A0%BC%E5%BD%A2%E6%88%90%E6%9B%B4%E5%A4%9A%E7%9A%84%E8%A1%8C%EF%BC%88%E5%88%A9%E7%94%A8chatgpt%E5%BC%80%E5%8F%91%E6%A1%88%E4%BE%8B%EF%BC%89/58e2c3c89ef9df119d685e8fee77bdf.png" alt="58e2c3c89ef9df119d685e8fee77bdf"></p><p>（处理后）</p><p><img src="/2024/10/10/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%88%87%E5%88%86excel%E5%8D%95%E5%85%83%E6%A0%BC%E5%BD%A2%E6%88%90%E6%9B%B4%E5%A4%9A%E7%9A%84%E8%A1%8C%EF%BC%88%E5%88%A9%E7%94%A8chatgpt%E5%BC%80%E5%8F%91%E6%A1%88%E4%BE%8B%EF%BC%89/bc587e457de3aa64435646efb6fc2fa.png" alt="bc587e457de3aa64435646efb6fc2fa"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>chatgpt 确实可以在不怎么写代码的情况下完成一个简单工具的开发！</p><p>但是，需要对总体流程有一定的了解。</p><p><strong>这意味着以后的学习和工作中，对大框架结构的学习和对大致流程的掌握非常非常重要，而对具体的技法要求降低，不要把太多精力放在耗时的细节问题上</strong></p>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="机器学习" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="chatgpt" scheme="http://example.com/tags/chatgpt/"/>
    
    <category term="pandas" scheme="http://example.com/tags/pandas/"/>
    
    <category term="excel" scheme="http://example.com/tags/excel/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu拓展目录大小</title>
    <link href="http://example.com/2024/10/08/Linux%E5%AD%A6%E4%B9%A0/ubuntu%E6%8B%93%E5%B1%95%E7%9B%AE%E5%BD%95%E5%A4%A7%E5%B0%8F/"/>
    <id>http://example.com/2024/10/08/Linux%E5%AD%A6%E4%B9%A0/ubuntu%E6%8B%93%E5%B1%95%E7%9B%AE%E5%BD%95%E5%A4%A7%E5%B0%8F/</id>
    <published>2024-10-08T04:12:07.000Z</published>
    <updated>2024-10-08T09:07:11.803Z</updated>
    
    <content type="html"><![CDATA[<p>简介 <span id="more"></span></p><h1 id="前提："><a href="#前提：" class="headerlink" title="前提："></a>前提：</h1><p>硬盘500g，只显示100g可用。</p><h1 id="处理："><a href="#处理：" class="headerlink" title="处理："></a>处理：</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo vgdisplay <span class="comment">#查看卷组和逻辑卷的情况</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设您的逻辑卷名称是 ubuntu--vg-ubuntu--lv（从之前的 lsblk 输出中推）</span></span><br><span class="line">sudo lvextend -l +100%FREE /dev/ubuntu-vg/ubuntu-lv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 还需要扩展文件系统以使用新的空间。假设根目录使用的是 ext4 文件系统（从之前的 lsblk 输出可以看到）</span></span><br><span class="line">sudo resize2fs /dev/ubuntu-vg/ubuntu-lv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确认文件系统是否已经成功扩展</span></span><br><span class="line"><span class="built_in">df</span> -h /</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>补充</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果显示类型为 xfs，那么您可以使用以下命令扩展文件系统</span></span><br><span class="line">sudo xfs_growfs /</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用的是 Btrfs 文件系统，您可以使用 btrfs 工具进行扩展</span></span><br><span class="line">sudo btrfs filesystem resize max /</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>ext4 文件系统：使用 resize2fs 扩展。<br>XFS 文件系统：使用 xfs_growfs 扩展。<br>Btrfs 文件系统：使用 btrfs filesystem resize 扩展。</p>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="ubuntu" scheme="http://example.com/tags/ubuntu/"/>
    
    <category term="扩容" scheme="http://example.com/tags/%E6%89%A9%E5%AE%B9/"/>
    
  </entry>
  
  <entry>
    <title>让某些sudo命令不用输入密码</title>
    <link href="http://example.com/2024/09/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%AE%A9%E6%9F%90%E4%BA%9Bsudo%E5%91%BD%E4%BB%A4%E4%B8%8D%E7%94%A8%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81/"/>
    <id>http://example.com/2024/09/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%AE%A9%E6%9F%90%E4%BA%9Bsudo%E5%91%BD%E4%BB%A4%E4%B8%8D%E7%94%A8%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81/</id>
    <published>2024-09-29T06:40:24.000Z</published>
    <updated>2024-09-29T06:43:45.760Z</updated>
    
    <content type="html"><![CDATA[<p>​注意把# User privilege specification 放到最下面，因为 用户、组等等 逻辑会出现覆盖，放最下面就能覆盖掉之前组的逻辑。</p><p>​以下是 让 sudo reboot 不用输入密码的案例。</p><p><code>sudo vim /etc/sudoers</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This file MUST be edited with the &#x27;visudo&#x27; command as root.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Please consider adding local content in /etc/sudoers.d/ instead of</span></span><br><span class="line"><span class="comment"># directly modifying this file.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># See the man page for details on how to write a sudoers file.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">Defaults        env_reset</span><br><span class="line">Defaults        mail_badpass</span><br><span class="line">Defaults        secure_path=<span class="string">&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Host alias specification</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User alias specification</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Cmnd alias specification</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User privilege specification</span></span><br><span class="line"><span class="comment">#root   ALL=(ALL:ALL) ALL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Members of the admin group may gain root privileges</span></span><br><span class="line">%admin ALL=(ALL) ALL</span><br><span class="line"></span><br><span class="line"><span class="comment"># Allow members of group sudo to execute any command</span></span><br><span class="line">%sudo   ALL=(ALL:ALL) ALL</span><br><span class="line"></span><br><span class="line"><span class="comment"># See sudoers(5) for more information on &quot;#include&quot; directives:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User privilege specification</span></span><br><span class="line">root   ALL=(ALL:ALL) ALL</span><br><span class="line">jlsf ALL=(ALL) NOPASSWD: /sbin/reboot</span><br><span class="line">jlsf ALL=(ALL) NOPASSWD: /usr/bin/systemctl restart *</span><br><span class="line">jlsf ALL=(ALL) NOPASSWD: /bin/ls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#includedir /etc/sudoers.d</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>ubuntu用scp向Windows传文件问题</title>
    <link href="http://example.com/2024/09/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/ubuntu%E7%94%A8scp%E5%90%91Windows%E4%BC%A0%E6%96%87%E4%BB%B6%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2024/09/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/ubuntu%E7%94%A8scp%E5%90%91Windows%E4%BC%A0%E6%96%87%E4%BB%B6%E9%97%AE%E9%A2%98/</id>
    <published>2024-09-29T06:32:10.000Z</published>
    <updated>2024-09-29T06:37:30.484Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r ./env_check/ cys@10.5.6.240:\C:\.  <span class="comment"># 注意 / 和 \ 方向不一样。</span></span><br></pre></td></tr></table></figure><p>这样就会有一个文件夹在 Windows的 c盘下的cys中。</p><p><img src="/2024/09/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/ubuntu%E7%94%A8scp%E5%90%91Windows%E4%BC%A0%E6%96%87%E4%BB%B6%E9%97%AE%E9%A2%98/image-20240928230015507.png" alt="image-20240928230015507"></p>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="windows_ubuntu双系统" scheme="http://example.com/categories/windows-ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="scp" scheme="http://example.com/tags/scp/"/>
    
  </entry>
  
  <entry>
    <title>不开机改虚拟机IP</title>
    <link href="http://example.com/2024/09/10/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E4%B8%8D%E5%BC%80%E6%9C%BA%E6%94%B9%E8%99%9A%E6%8B%9F%E6%9C%BAIP/"/>
    <id>http://example.com/2024/09/10/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E4%B8%8D%E5%BC%80%E6%9C%BA%E6%94%B9%E8%99%9A%E6%8B%9F%E6%9C%BAIP/</id>
    <published>2024-09-10T02:20:33.000Z</published>
    <updated>2024-09-29T06:47:38.422Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入虚拟机名称:&quot;</span> name</span><br><span class="line"><span class="keyword">if</span> virsh domstate <span class="variable">$name</span> | grep -q running; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;修改虚拟机网卡数据,需要关闭虚拟机，现在开始关机。&quot;</span></span><br><span class="line">    virsh destroy <span class="variable">$name</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">mountpoint=<span class="string">&quot;/vms/images/temp_vm_mount&quot;</span></span><br><span class="line">[ ! -d <span class="variable">$mountpoint</span> ] &amp;&amp; <span class="built_in">mkdir</span> <span class="variable">$mountpoint</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;请稍后...&quot;</span></span><br><span class="line"><span class="keyword">if</span> mount | grep -q <span class="string">&quot;<span class="variable">$mountpoint</span>&quot;</span>; <span class="keyword">then</span></span><br><span class="line">    umount <span class="variable">$mountpoint</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 使用具体的磁盘镜像路径</span></span><br><span class="line"><span class="comment"># disk_path=$(virsh domblklist $name | awk &#x27;/vda/ &#123;print $2&#125;&#x27;)</span></span><br><span class="line"><span class="comment"># if [ -z &quot;$disk_path&quot; ]; then</span></span><br><span class="line"><span class="comment">#     echo &quot;未找到虚拟机的磁盘镜像路径&quot;</span></span><br><span class="line"><span class="comment">#     exit 1</span></span><br><span class="line"><span class="comment"># fi</span></span><br><span class="line"><span class="comment"># echo &#x27;使用具体的磁盘镜像路径&#x27;</span></span><br><span class="line"><span class="comment"># echo  $disk_path</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载虚拟机的根文件系统</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;guestmount -d &#x27;</span><span class="variable">$name</span><span class="string">&#x27; -i &#x27;</span><span class="variable">$mountpoint</span></span><br><span class="line">guestmount -d <span class="variable">$name</span> -i <span class="variable">$mountpoint</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入IP地址 (格式: xxx.xxx.xxx.xxx/xx):&quot;</span> addr</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入网关地址:&quot;</span> gateway</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新的 netplan 配置文件</span></span><br><span class="line">new_netplan_file=$(<span class="built_in">mktemp</span>)</span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF &gt; $new_netplan_file</span></span><br><span class="line"><span class="string"># This is the network config written by &#x27;subiquity&#x27;</span></span><br><span class="line"><span class="string">network:</span></span><br><span class="line"><span class="string">  ethernets:</span></span><br><span class="line"><span class="string">    ens5:</span></span><br><span class="line"><span class="string">      addresses:</span></span><br><span class="line"><span class="string">      - $addr</span></span><br><span class="line"><span class="string">      gateway4: $gateway</span></span><br><span class="line"><span class="string">      nameservers:</span></span><br><span class="line"><span class="string">        addresses:</span></span><br><span class="line"><span class="string">        - 192.168.0.165</span></span><br><span class="line"><span class="string">        search: []</span></span><br><span class="line"><span class="string">  version: 2</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换虚拟机中的 netplan 配置文件</span></span><br><span class="line"><span class="built_in">cp</span> <span class="variable">$new_netplan_file</span> <span class="variable">$mountpoint</span>/etc/netplan/00-installer-config.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查新的配置文件是否已正确写入</span></span><br><span class="line"><span class="keyword">if</span> grep -q <span class="string">&quot;<span class="variable">$addr</span>&quot;</span> <span class="variable">$mountpoint</span>/etc/netplan/00-installer-config.yaml &amp;&amp; grep -q <span class="string">&quot;<span class="variable">$gateway</span>&quot;</span> <span class="variable">$mountpoint</span>/etc/netplan/00-installer-config.yaml; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;完成...&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载文件系统</span></span><br><span class="line">umount <span class="variable">$mountpoint</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除临时文件</span></span><br><span class="line"><span class="built_in">rm</span> <span class="variable">$new_netplan_file</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是我工作写的，还比较方便用。</p>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="IP" scheme="http://example.com/tags/IP/"/>
    
    <category term="虚拟机" scheme="http://example.com/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>开机自启动某个任务</title>
    <link href="http://example.com/2024/09/10/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8%E6%9F%90%E4%B8%AA%E4%BB%BB%E5%8A%A1/"/>
    <id>http://example.com/2024/09/10/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8%E6%9F%90%E4%B8%AA%E4%BB%BB%E5%8A%A1/</id>
    <published>2024-09-10T02:20:33.000Z</published>
    <updated>2024-09-29T06:45:57.924Z</updated>
    
    <content type="html"><![CDATA[<p>​工作之余用写的。就是把 一个脚本A 做成 一个服务A，然后每次开机自动调用这个服务。<br>脚本A直接写在下面这个脚本里面，运行下面这个脚本一步一步来就好了，这里是开机自启动jypyter-lab的一个命令。<br>​如果有什么问题，去检查一下 我写入的log 文件夹中的文件。 有时候 要一些模块类似 pip install typing_extensions。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash                                                                                                                                                           </span></span><br><span class="line">                                                                                                                                                                      </span><br><span class="line"><span class="comment"># 读取用户输入的密码                                                                                                                                                  </span></span><br><span class="line"><span class="built_in">read</span> -sp <span class="string">&quot;请输入你的root密码: &quot;</span> root_password                                                                                                                         </span><br><span class="line"><span class="built_in">echo</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到 root 用户并执行命令</span></span><br><span class="line"><span class="built_in">echo</span>  <span class="string">&quot;<span class="variable">$root_password</span>&quot;</span> | sudo -S -p <span class="string">&#x27;&#x27;</span> bash -c <span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 在 /home/jlsf/ 下创建一个 log 文件夹，不会覆盖已存在的文件夹</span></span><br><span class="line"><span class="string">echo &quot;在 /home/jlsf/ 下创建一个 log 文件夹，不会覆盖已存在的文件夹&quot;</span></span><br><span class="line"><span class="string">mkdir -p /home/jlsf/log</span></span><br><span class="line"><span class="string">if [ $? -ne 0 ]; then</span></span><br><span class="line"><span class="string">  echo &quot;Failed to create log folder.&quot; &gt;&amp;2</span></span><br><span class="line"><span class="string">  exit 1</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"><span class="string">  echo &quot;Log folder created or already exists.&quot;</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 检查是否存在 /home/jlsf/Auto_start_jupyter.sh 脚本，如果不存在则创建</span></span><br><span class="line"><span class="string">echo &quot;检查是否存在 /home/jlsf/Auto_start_jupyter.sh 脚本，如果不存在则创建&quot;</span></span><br><span class="line"><span class="string">if [ ! -f /home/jlsf/Auto_start_jupyter.sh ]; then</span></span><br><span class="line"><span class="string">  cat &lt;&lt; &#x27;</span>SCRIPT<span class="string">&#x27; &gt; /home/jlsf/Auto_start_jupyter.sh</span></span><br><span class="line"><span class="string">#!/bin/bash</span></span><br><span class="line"><span class="string">/usr/bin/nohup /home/jlsf/.local/bin/jupyter lab --no-browser --ip=0.0.0.0 --allow-root &gt;&gt; /home/jlsf/log/myscript.log 2&gt;&amp;1 &amp;</span></span><br><span class="line"><span class="string"># /home/jlsf/.local/bin/jupyter lab --no-browser --ip=0.0.0.0 --allow-root &gt;&gt; /home/jlsf/log/myscript.log 2&gt;&amp;1</span></span><br><span class="line"><span class="string">SCRIPT</span></span><br><span class="line"><span class="string">  if [ $? -ne 0 ]; then</span></span><br><span class="line"><span class="string">    echo &quot;Failed to create Auto_start_jupyter.sh script.&quot; &gt;&amp;2</span></span><br><span class="line"><span class="string">    exit 1</span></span><br><span class="line"><span class="string">  else</span></span><br><span class="line"><span class="string">    echo &quot;Auto_start_jupyter.sh script created.&quot;</span></span><br><span class="line"><span class="string">  fi</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"><span class="string">  echo &quot;Auto_start_jupyter.sh script already exists.&quot;</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 尝试添加 Auto_start_jupyter.sh 脚本权限</span></span><br><span class="line"><span class="string">echo &quot;尝试添加 Auto_start_jupyter.sh 脚本权限。&quot;</span></span><br><span class="line"><span class="string">chown jlsf:jlsf /home/jlsf/Auto_start_jupyter.sh</span></span><br><span class="line"><span class="string">chown jlsf:jlsf /home/jlsf/log</span></span><br><span class="line"><span class="string">chmod 776 /home/jlsf/Auto_start_jupyter.sh</span></span><br><span class="line"><span class="string">if [ $? -ne 0 ]; then</span></span><br><span class="line"><span class="string">echo &quot;Failed to set permissions on Auto_start_jupyter.sh script.&quot; &gt;&amp;2</span></span><br><span class="line"><span class="string">exit 1</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"><span class="string">echo &quot;Permissions set on Auto_start_jupyter.sh script.&quot;</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 创建 systemd 服务单元文件</span></span><br><span class="line"><span class="string">echo &quot;创建 systemd 服务单元文件&quot;</span></span><br><span class="line"><span class="string">if [ ! -f /etc/systemd/system/Auto_start_jupyter.service ]; then</span></span><br><span class="line"><span class="string">  cat &lt;&lt; &#x27;</span>SERVICE<span class="string">&#x27; &gt; /etc/systemd/system/Auto_start_jupyter.service</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description=Jupyter Lab Service</span></span><br><span class="line"><span class="string">After=network.target</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">Type=forking</span></span><br><span class="line"><span class="string">ExecStart=/home/jlsf/Auto_start_jupyter.sh</span></span><br><span class="line"><span class="string">StandardOutput=append:/var/log/my_program.log</span></span><br><span class="line"><span class="string">StandardError=append:/var/log/my_program.log</span></span><br><span class="line"><span class="string">Restart=always</span></span><br><span class="line"><span class="string">User=jlsf</span></span><br><span class="line"><span class="string">WorkingDirectory=/home/jlsf</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">SERVICE</span></span><br><span class="line"><span class="string">  if [ $? -ne 0 ]; then</span></span><br><span class="line"><span class="string">    echo &quot;Failed to create Auto_start_jupyter.service.&quot; &gt;&amp;2</span></span><br><span class="line"><span class="string">    exit 1</span></span><br><span class="line"><span class="string">  else</span></span><br><span class="line"><span class="string">    echo &quot;Auto_start_jupyter.service created.&quot;</span></span><br><span class="line"><span class="string">  fi</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"><span class="string">  echo &quot;Auto_start_jupyter.service already exists.&quot;</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 重新加载 systemd 配置</span></span><br><span class="line"><span class="string">echo &quot;重新加载 systemd 配置&quot;</span></span><br><span class="line"><span class="string">systemctl daemon-reload</span></span><br><span class="line"><span class="string">if [ $? -ne 0 ]; then</span></span><br><span class="line"><span class="string">  echo &quot;Failed to reload systemd daemon.&quot; &gt;&amp;2</span></span><br><span class="line"><span class="string">  exit 1</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"><span class="string">  echo &quot;Systemd daemon reloaded.&quot;</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># # 重置服务的启动限制计数</span></span><br><span class="line"><span class="string"># echo &quot;重置服务的启动限制计数&quot; </span></span><br><span class="line"><span class="string"># systemctl reset-failed</span></span><br><span class="line"><span class="string"># if [ $? -ne 0 ]; then</span></span><br><span class="line"><span class="string">#   echo &quot;Failed to reset-failed systemd service.&quot; &gt;&amp;2</span></span><br><span class="line"><span class="string">#   exit 1</span></span><br><span class="line"><span class="string"># else</span></span><br><span class="line"><span class="string">#   echo &quot;Systemd service reset-failed success.&quot;</span></span><br><span class="line"><span class="string"># fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 启用并启动服务</span></span><br><span class="line"><span class="string">echo &quot;启用并启动服务&quot;</span></span><br><span class="line"><span class="string">systemctl enable Auto_start_jupyter.service</span></span><br><span class="line"><span class="string">if [ $? -ne 0 ]; then</span></span><br><span class="line"><span class="string">  echo &quot;Failed to enable Auto_start_jupyter.service.&quot; &gt;&amp;2</span></span><br><span class="line"><span class="string">  exit 1</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"><span class="string">  echo &quot;Auto_start_jupyter.service enabled.&quot;</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string">echo &quot;现在开始开启服务&quot;</span></span><br><span class="line"><span class="string">systemctl start Auto_start_jupyter.service</span></span><br><span class="line"><span class="string"># if [ $? -ne 0 ]; then</span></span><br><span class="line"><span class="string">#   echo &quot;Failed to start Auto_start_jupyter.service.&quot; &gt;&amp;2</span></span><br><span class="line"><span class="string">#   exit 1</span></span><br><span class="line"><span class="string"># else</span></span><br><span class="line"><span class="string">#   echo &quot;Auto_start_jupyter.service started.&quot;</span></span><br><span class="line"><span class="string"># fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 检查服务状态</span></span><br><span class="line"><span class="string">echo &quot;检查服务状态&quot;</span></span><br><span class="line"><span class="string">systemctl status Auto_start_jupyter.service</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="自定义服务" scheme="http://example.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="自启动" scheme="http://example.com/tags/%E8%87%AA%E5%90%AF%E5%8A%A8/"/>
    
  </entry>
  
</feed>
