<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tiger_pop&#39;s Blog</title>
  
  <subtitle>tiger_pop 的博客</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-10-22T11:01:08.034Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>陈宇韶chenyushao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>transform模型</title>
    <link href="http://example.com/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/"/>
    <id>http://example.com/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/</id>
    <published>2025-10-22T10:59:50.000Z</published>
    <updated>2025-10-22T11:01:08.034Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-21%2021.33.27.jpg" alt="截屏2025-10-21 21.33.27"></p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-21%2021.35.19.jpg" alt="截屏2025-10-21 21.35.19"></p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-21%2021.36.03.jpg" alt="截屏2025-10-21 21.36.03"></p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-21%2021.38.25.jpg" alt="截屏2025-10-21 21.38.25"></p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-21%2021.40.27.jpg" alt="截屏2025-10-21 21.40.27"></p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-21%2021.41.32.jpg" alt="截屏2025-10-21 21.41.32"></p><h1 id="自注意力机制"><a href="#自注意力机制" class="headerlink" title="自注意力机制"></a>自注意力机制</h1><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-21%2021.45.37.jpg" alt="截屏2025-10-21 21.45.37"></p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-22%2015.02.22-1116648.png" alt="截屏2025-10-22 15.02.22"></p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-22%2015.23.36.png" alt="截屏2025-10-22 15.23.36"></p><ul><li><p>需要提一下，QKV三者的维度是一样的。dk 是key 的维度也是其他三者的维度，比如512维。</p></li><li><p>计算相似度的方法有很多，不一定都是用点积，有高斯距离等等其他的计算相似度的方法都是可以选择的。点积的话结果越大，相似度越高。</p></li><li><p>softmax 算出来的 都是 0-1 之间的值，来把前面的结果变成概率。</p></li><li><p>如果直接用点积结果进入softmax 可能导致概率极大和概率极小，导致梯度爆炸或者消失，所以点积结果除一下根号的维度，来让最后softmax输出的数据变柔和一些。</p></li></ul><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-21%2021.46.55.jpg" alt="截屏2025-10-21 21.46.55"></p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-21%2021.48.07.jpg" alt="截屏2025-10-21 21.48.07"></p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-21%2021.49.33.jpg" alt="截屏2025-10-21 21.49.33"></p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-21%2021.50.09.jpg" alt="截屏2025-10-21 21.50.09"></p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-21%2021.50.34.jpg" alt="截屏2025-10-21 21.50.34"></p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-22%2009.15.42.jpg" alt="截屏2025-10-22 09.15.42"></p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-22%2009.16.07.jpg" alt="截屏2025-10-22 09.16.07"></p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-22%2009.16.23.jpg" alt="截屏2025-10-22 09.16.23"></p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-22%2009.16.40.jpg" alt="截屏2025-10-22 09.16.40"></p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-22%2009.16.59.jpg" alt="截屏2025-10-22 09.16.59"></p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-22%2009.17.14.jpg" alt="截屏2025-10-22 09.17.14"></p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-22%2009.18.02.jpg" alt="截屏2025-10-22 09.18.02"></p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-22%2009.18.16.jpg" alt="截屏2025-10-22 09.18.16"></p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-22%2009.18.32.jpg" alt="截屏2025-10-22 09.18.32"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Q、K、V 来自同一组输入的时候，就是自注意力。它相当于注意力机制中的一个特例。</p><p>小明看小红长相就是注意力机制，小红自己看自己就是自注意力机制。<img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-22%2017.26.55.png" alt="截屏2025-10-22 17.26.55"></p><p>注意上面的Attention部分，只有左边的是自注意力机制，右边上面是交叉注意力机制，右边下面是掩码注意力机制，</p><ul><li>所谓 “掩码注意力机制” 用一个例子说明：【我吃零食】是预测目标，在预测时不能把目标全部公开，相当于需要闭卷答题，【我 X X X】掩住后面要预测的部分。</li><li>“交叉注意力机制”中，Q 来自于 Decoder 的输入，K、V 来自 Encoder 的输出。【它就不是自注意力机制，因为它有别的地方的输入。】</li></ul><h1 id="多头注意力机制"><a href="#多头注意力机制" class="headerlink" title="多头注意力机制"></a>多头注意力机制</h1><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-22%2017.45.55.png" alt="截屏2025-10-22 17.45.55"></p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-22%2017.47.04.png" alt="截屏2025-10-22 17.47.04"></p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-22%2017.48.22.png" alt="截屏2025-10-22 17.48.22"></p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-22%2018.26.09.png" alt="截屏2025-10-22 18.26.09"></p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-22%2018.31.26.png" alt="截屏2025-10-22 18.31.26"></p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-22%2009.18.48.jpg" alt="截屏2025-10-22 09.18.48"></p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-22%2009.19.02.jpg" alt="截屏2025-10-22 09.19.02"></p><h1 id="基础演示"><a href="#基础演示" class="headerlink" title="基础演示"></a>基础演示</h1><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-22%2010.12.34.jpg" alt="截屏2025-10-22 10.12.34"></p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-22%2010.18.25.jpg" alt="截屏2025-10-22 10.18.25"></p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-22%2010.19.05.jpg" alt="截屏2025-10-22 10.19.05"></p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-22%2010.19.40.jpg" alt="截屏2025-10-22 10.19.40"></p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-22%2010.19.53.jpg" alt="截屏2025-10-22 10.19.53"></p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-22%2010.20.42.jpg" alt="截屏2025-10-22 10.20.42"></p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-22%2010.21.17.jpg" alt="截屏2025-10-22 10.21.17"></p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-22%2010.21.33.jpg" alt="截屏2025-10-22 10.21.33"></p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-22%2010.22.03.jpg" alt="截屏2025-10-22 10.22.03"></p><h1 id="并行计算"><a href="#并行计算" class="headerlink" title="并行计算"></a>并行计算</h1><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-22%2010.22.36.jpg" alt="截屏2025-10-22 10.22.36"></p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/transform%E6%A8%A1%E5%9E%8B/%E6%88%AA%E5%B1%8F2025-10-22%2010.22.48.jpg" alt="截屏2025-10-22 10.22.48"></p>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="机器学习" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="注意力机制" scheme="http://example.com/tags/%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/"/>
    
    <category term="注意力矩阵" scheme="http://example.com/tags/%E6%B3%A8%E6%84%8F%E5%8A%9B%E7%9F%A9%E9%98%B5/"/>
    
    <category term="transform" scheme="http://example.com/tags/transform/"/>
    
  </entry>
  
  <entry>
    <title>蒙特卡洛方法</title>
    <link href="http://example.com/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%96%B9%E6%B3%95/</id>
    <published>2025-10-22T10:58:23.000Z</published>
    <updated>2025-10-22T10:58:52.776Z</updated>
    
    <content type="html"><![CDATA[<h1 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h1><p>用<strong>随机样本的统计结果</strong>去<strong>近似一个数学问题的真实答案</strong>。</p><h1 id="蒙特卡洛求-π"><a href="#蒙特卡洛求-π" class="headerlink" title="蒙特卡洛求 π"></a>蒙特卡洛求 π</h1><p>蒙特卡洛求 π 这个例子大学的时候已经学过了，这里就不再讲解。</p><h1 id="蒙特卡洛树搜索"><a href="#蒙特卡洛树搜索" class="headerlink" title="蒙特卡洛树搜索"></a>蒙特卡洛树搜索</h1><p>Monte Carlo Tree Search</p><p>一共4步，如下。</p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%96%B9%E6%B3%95/%E6%88%AA%E5%B1%8F2025-10-21%2010.40.45.png" alt="截屏2025-10-21 10.40.45"></p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%96%B9%E6%B3%95/%E6%88%AA%E5%B1%8F2025-10-21%2010.55.56.png" alt="截屏2025-10-21 10.55.56"></p><h2 id="一、selection"><a href="#一、selection" class="headerlink" title="一、selection"></a>一、selection</h2><p>用下面公式给每个子节点打分。</p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%96%B9%E6%B3%95/%E6%88%AA%E5%B1%8F2025-10-21%2010.57.28.png" alt="截屏2025-10-21 10.57.28"></p><h2 id="二、node-expansion"><a href="#二、node-expansion" class="headerlink" title="二、node expansion"></a>二、node expansion</h2><p>如果是叶子节点，扩展出新的节点。</p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%96%B9%E6%B3%95/%E6%88%AA%E5%B1%8F2025-10-21%2011.00.21.png" alt="截屏2025-10-21 11.00.21"></p><h2 id="三、simulation（仿真）rollout-（出品）"><a href="#三、simulation（仿真）rollout-（出品）" class="headerlink" title="三、simulation（仿真）rollout （出品）"></a>三、simulation（仿真）rollout （出品）</h2><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%96%B9%E6%B3%95/%E6%88%AA%E5%B1%8F2025-10-21%2011.05.04.png" alt="截屏2025-10-21 11.05.04"></p><p>从这个新节点开始，用随机（或启发式）方法“玩”到游戏结束。叶子节点就算是一个游戏结束的状态。<br> 👉 这一步就是应用“蒙特卡洛方法” —– 用<strong>随机样本的统计结果</strong>去<strong>近似一个数学问题的真实答案</strong>。</p><h3 id="注意，一个非常容易让人误解的点！："><a href="#注意，一个非常容易让人误解的点！：" class="headerlink" title="注意，一个非常容易让人误解的点！："></a><strong>注意，一个非常容易让人误解的点！</strong>：</h3><p>​这里的 整个rollout计算过程中，涉及到的行为路径选择 和 terminal state，都是和前文中这个蒙特卡洛树没有关系的，相当于在现在这个状态中又开一局游戏，通过不断的随机操作，来模拟出游戏直到游戏结束，给出我们一个 value 打分！和之前我们建立的蒙特卡洛树是没有关系的！如果说有关系，那就是rollout的初始状态是基于蒙特卡洛树的那个节点的状态。</p><blockquote><p>rollout（模拟）阶段的所有状态变化、随机选择、直到 terminal state 的过程，<br> <strong>都不是蒙特卡洛搜索树（MCTS）中的节点</strong>。</p><p>它们只是一场“基于当前叶节点状态的随机游戏”。</p><p>唯一的联系是：<br> rollout 的起点（初始状态）&#x3D; 树中刚刚扩展出来的那个叶节点的状态。</p><p>模拟的结果（value）会反向传播回树里，<br> 更新叶节点及其祖先节点的价值估计。</p></blockquote><p>可以这样理解：</p><ul><li>MCTS 树的作用：保存已经探索过的、较有价值的状态空间（“地图”）。</li><li>rollout 的作用：从“地图边缘”往外随机看看未来会发生什么（“探路”）。</li></ul><h2 id="四、back-propagation（反向传播）"><a href="#四、back-propagation（反向传播）" class="headerlink" title="四、back propagation（反向传播）"></a>四、back propagation（反向传播）</h2><p>从 rollout 中找到适合的值，放到树中适合的位置中去。</p><p>就是把 value 的值从路径的节点中加一遍。</p><h2 id="算法终结"><a href="#算法终结" class="headerlink" title="算法终结"></a>算法终结</h2><p>1、限制时间</p><p>2、固定迭代次数</p><p>结束时选择一个 value 更大的节点完成决策。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>这里的 T 就是 selection 章节中介绍的 value。 N是总探索次数，n是这个节点的探索次数。</p><p>初始状态如下，根节点是叶子节点；</p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%96%B9%E6%B3%95/%E6%88%AA%E5%B1%8F2025-10-21%2011.18.51.png" alt="截屏2025-10-21 11.18.51"></p><p>在expansion出两个节点后，发现ni都为0，导致UCB1两个拓展的节点都是∞。所以UCB1是相等的，理论上选谁都一样。</p><p>是叶子节点同时又没有被探索过，根据前面的流程图，直接就行 rollout计算。</p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%96%B9%E6%B3%95/%E6%88%AA%E5%B1%8F2025-10-21%2011.27.04.png" alt="截屏2025-10-21 11.27.04"></p><p>计算出了一个value值，为20 。</p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%96%B9%E6%B3%95/%E6%88%AA%E5%B1%8F2025-10-21%2013.51.51.png" alt="截屏2025-10-21 13.51.51"></p><p>反向传播，把路径上的节点的价值都改成20；N_0 &#x3D; 1 了，因为被探索过一次了。</p><p>此时重新 从根节点出发，再 执行上面的一轮操作，发现 S_1 的UCB1已经是一个固定值了，而 S_2 由于 没有被访问过，这个值还是一个∞，导致了我们一定会选择 S_2 节点。</p><p>给 S_2 节点来一轮以后，假如 它的值是 10，则根节点总访问次数会由于反向传播累加，变成2，value累加成20+10&#x3D;30；</p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%96%B9%E6%B3%95/%E6%88%AA%E5%B1%8F2025-10-21%2014.09.34.png" alt="截屏2025-10-21 14.09.34"></p><p>现在开始重新从S_0节点开始第二轮。</p><p>算出 UCB 值，给 S_0 的所有子节点打分。</p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%96%B9%E6%B3%95/%E6%88%AA%E5%B1%8F2025-10-21%2014.17.44.png" alt="截屏2025-10-21 14.17.44"></p><p>发现 S_1 节点大，所以选择 S_1 ，发现 S_1 是叶子节点，但是已经被访问过了，按照流程给它 枚举所有可能的动作，并添加到树中，然后 当前节点 &#x3D; 第一个新节点，用这个节点去做 rollout 计算。</p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%96%B9%E6%B3%95/%E6%88%AA%E5%B1%8F2025-10-21%2014.30.08.png" alt="截屏2025-10-21 14.30.08"></p><p>再back propagation；</p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%96%B9%E6%B3%95/%E6%88%AA%E5%B1%8F2025-10-21%2014.31.53.png" alt="截屏2025-10-21 14.31.53"></p><p> 这一轮执行完毕之后又回到了 S_0 , 此时又重新开始一轮 selection，计算 UCB ，但是需要注意，这个 Vi 是平均值，Vi 的值需要除他的探索次数。</p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%96%B9%E6%B3%95/%E6%88%AA%E5%B1%8F2025-10-21%2014.41.17.png" alt="截屏2025-10-21 14.41.17"></p><p>此时 S_2 的值更大一些，所以，我们现在选择的是 S_2 节点；</p><p>我们可以发现 S_2 是叶子节点，又被探索过，按照流程，先对它 枚举所有动作加入树中，然后选第一个动作，做rollout计算，再back propagation。</p><p><img src="/2025/10/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%96%B9%E6%B3%95/%E6%88%AA%E5%B1%8F2025-10-21%2014.45.37.png" alt="截屏2025-10-21 14.45.37"></p><p>假如我们的程序在此时就停下来了，我们来看看会怎么执行？</p><p>由于此时计算 S_1 和 S_2 的 UCB ，会发现 S_2 的更大，所以会选 右边那条路径。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>MCTS像一个带反向传播和路径赋值功能的二叉树，但是需要明确的一点是，但它不是固定的「普通二叉树」，而是根据策略动态扩展的「非固定分支搜索树」。</p><p>在simulation仿真中，用随机（或启发式）方法“玩”到游戏结束。<br> 👉 这一步就是应用“蒙特卡洛方法” —– 用<strong>随机样本的统计结果</strong>去<strong>近似一个数学问题的真实答案</strong>。</p><p> MCTS 的思路：</p><blockquote><p>“随机尝试多次，统计哪条路径胜率高，然后优先探索它。”</p></blockquote><p>可以这样理解：</p><ul><li>MCTS 树的作用：保存已经探索过的、较有价值的状态空间（“地图”）。</li><li>rollout 的作用：从“地图边缘”往外随机看看未来会发生什么（“探路”）。</li></ul><p>再通过“探路结果”反向传播 回去修正来MCTS树。</p>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="机器学习" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="蒙特卡洛" scheme="http://example.com/tags/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B/"/>
    
  </entry>
  
  <entry>
    <title>clonezilla使用案例</title>
    <link href="http://example.com/2025/10/12/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/"/>
    <id>http://example.com/2025/10/12/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/</id>
    <published>2025-10-12T03:32:10.000Z</published>
    <updated>2025-10-14T03:27:28.826Z</updated>
    
    <content type="html"><![CDATA[<p>clonezilla 是个好东西，可以克隆硬盘、制作镜像等等。</p><h1 id="克隆硬盘步骤（简单版）"><a href="#克隆硬盘步骤（简单版）" class="headerlink" title="克隆硬盘步骤（简单版）"></a>克隆硬盘步骤（简单版）</h1><p>1、我用一个 64g的u盘制作了一个 ventoy 工具盘，空余空间为12g，clonezilla的ISO文件是放在 这个u盘中的。开机选择 这个u盘启动，注意格式。</p><p><img src="/2025/10/12/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/111.jpg" alt="111"></p><p>2、选择 语言</p><p>3、选择使用“重生龙”</p><p>4、选择 “从硬盘&#x2F;分区克隆到硬盘&#x2F;分区”</p><p>5、初级模式</p><p>6、是否保留原分区形式，选是。</p><p>7、y…y…y…y y 一路确认。</p><p>8、选择 克隆完成以后 reboot 还是 poweroff，我一般选了reboot。</p><p>9、我一个nvme 的512g的硬盘 克隆到 另一个nvme的512g硬盘中，ventoy的U盘64g，12g空余，一共耗时4小时。</p><h1 id="一个失败案例"><a href="#一个失败案例" class="headerlink" title="一个失败案例"></a>一个失败案例</h1><p><img src="/2025/10/12/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/aaaebb506391433eaca83d403765733.jpg" alt="aaaebb506391433eaca83d403765733"></p><p>如果出现 上面这样的显示，说明不仅仅是 分辨率的问题，很有可能是对u盘中的 clonezilla 读取出现啦一些问题。我在遇到这样的显示之后，克隆的过程中遇到了 下面的报错。</p><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><p>克隆的过程中 速度非常非常慢。预计要30小时，我就发现了又问题，然后在克隆5%时候报出如下错误：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">报错 /usr/share/brb1/sbin/ocs-functions: line 15141: 41591 killed.  partclone.dd -z 10485760 -N -L /var/log/partclone.log -s /dev/sdc3 -0 /dev/sdd3  Failed to <span class="built_in">clone</span> /dev/sdc3 to /dev/sdd3 press <span class="string">&quot;Enter&quot;</span> to <span class="built_in">continue</span>... </span><br></pre></td></tr></table></figure><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>这样的报错 可能是 U盘读写性能出现了问题，也可能是 两块硬盘中出现了坏块等等问题，我很难锁定具体问题。</p><p>于是我换了一台电脑，在这台电脑上插上 ventoy的U盘和 源、目的两个硬盘，重新操作了一遍，这次没有报错。</p><p><img src="/2025/10/12/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/fd0cc1352fd4e95595041bf384d48ce.jpg" alt="fd0cc1352fd4e95595041bf384d48ce"></p><p>预计4小时完成，2G&#x2F;min 克隆速度 属于正常的水平。于是成功克隆。</p><h1 id="PXE网络批量克隆硬盘案例"><a href="#PXE网络批量克隆硬盘案例" class="headerlink" title="PXE网络批量克隆硬盘案例"></a>PXE网络批量克隆硬盘案例</h1><p>我拿一个交换机和 两根网线，连接好  “一台待客隆的源机器（服务端）” 和 “一个目标空白机器（客户端）”。组成一个局域网。</p><p><img src="/2025/10/12/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20251013111033_4399_17.jpg" alt="微信图片_20251013111033_4399_17"></p><p><img src="/2025/10/12/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20251013111034_4400_17.jpg" alt="微信图片_20251013111034_4400_17"></p><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>将有Clonezilla的 Ventoy U盘 插到源机器上选择Clonezilla，作为服务端。</p><p><img src="/2025/10/12/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/%E6%88%AA%E5%B1%8F2025-10-12%2020.12.16.jpg" alt="截屏2025-10-12 20.12.16"></p><p><img src="/2025/10/12/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/%E6%88%AA%E5%B1%8F2025-10-12%2020.14.02.jpg" alt="截屏2025-10-12 20.14.02"></p><p><img src="/2025/10/12/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/%E6%88%AA%E5%B1%8F2025-10-12%2020.14.23.jpg" alt="截屏2025-10-12 20.14.23"></p><p><img src="/2025/10/12/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/%E6%88%AA%E5%B1%8F2025-10-12%2020.14.43.jpg" alt="截屏2025-10-12 20.14.43"></p><p><img src="/2025/10/12/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/%E6%88%AA%E5%B1%8F2025-10-12%2020.15.08.jpg" alt="截屏2025-10-12 20.15.08"></p><p><img src="/2025/10/12/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/%E6%88%AA%E5%B1%8F2025-10-12%2020.15.28.jpg" alt="截屏2025-10-12 20.15.28"></p><p><img src="/2025/10/12/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/%E6%88%AA%E5%B1%8F2025-10-12%2020.15.48.jpg" alt="截屏2025-10-12 20.15.48"></p><p>选择新增dhcp服务</p><p><img src="/2025/10/12/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/%E6%88%AA%E5%B1%8F2025-10-12%2020.16.55.jpg" alt="截屏2025-10-12 20.16.55"></p><p>选择连接状态的网卡</p><p><img src="/2025/10/12/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250822103818_2784.jpg" alt="微信图片_20250822103818_2784"></p><p><img src="/2025/10/12/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/%E6%88%AA%E5%B1%8F2025-10-12%2020.17.58.jpg" alt="截屏2025-10-12 20.17.58"></p><p><img src="/2025/10/12/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/%E6%88%AA%E5%B1%8F2025-10-12%2020.18.19.jpg" alt="截屏2025-10-12 20.18.19"></p><p><img src="/2025/10/12/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/%E6%88%AA%E5%B1%8F2025-10-12%2020.18.52.jpg" alt="截屏2025-10-12 20.18.52"></p><p><img src="/2025/10/12/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/%E6%88%AA%E5%B1%8F2025-10-12%2020.19.14.jpg" alt="截屏2025-10-12 20.19.14"></p><p><img src="/2025/10/12/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/%E6%88%AA%E5%B1%8F2025-10-12%2020.20.11.jpg" alt="截屏2025-10-12 20.20.11"></p><p><img src="/2025/10/12/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/%E6%88%AA%E5%B1%8F2025-10-12%2020.20.59.jpg" alt="截屏2025-10-12 20.20.59"></p><p>我的情况如下，可见一个是服务端的机器的硬盘，和一个外接的移动硬盘（因为我的Clonezilla软件装在这个Ventoy的移动硬盘里），这里选择服务端机器的硬盘。</p><p><img src="/2025/10/12/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20251013110239_4396_17.jpg" alt="微信图片_20251013110239_4396_17"></p><p><img src="/2025/10/12/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/%E6%88%AA%E5%B1%8F2025-10-12%2020.21.25.jpg" alt="截屏2025-10-12 20.21.25"></p><p><img src="/2025/10/12/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/%E6%88%AA%E5%B1%8F2025-10-12%2020.22.12.jpg" alt="截屏2025-10-12 20.22.12"></p><p><img src="/2025/10/12/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/%E6%88%AA%E5%B1%8F2025-10-12%2020.22.57.jpg" alt="截屏2025-10-12 20.22.57"></p><p><img src="/2025/10/12/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/%E6%88%AA%E5%B1%8F2025-10-12%2020.23.12.jpg" alt="截屏2025-10-12 20.23.12"></p><p><img src="/2025/10/12/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/%E6%88%AA%E5%B1%8F2025-10-12%2020.23.40.jpg" alt="截屏2025-10-12 20.23.40"></p><p><img src="/2025/10/12/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/%E6%88%AA%E5%B1%8F2025-10-12%2020.24.21.jpg" alt="截屏2025-10-12 20.24.21"></p><p>这里注意！ 等客户端那边操作完毕了以后，才能继续！中途打断前功尽弃。</p><p><img src="/2025/10/12/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/%E6%88%AA%E5%B1%8F2025-10-12%2020.25.10.jpg" alt="截屏2025-10-12 20.25.10"></p><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>先进入bios调整，把 【Network(PXE)Boot】选项打开。</p><p><img src="/2025/10/12/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20251013110954_4397_17.jpg" alt="微信图片_20251013110954_4397_17"></p><p>可以把【IPv6 during UEFI Boot】选项关闭掉，然后把network boot 的优先级全部都提到前面来，下图我只把一个ipv4的network boot 提到前面来了，都需要提到前面来。然后保存、退出bios。</p><p><img src="/2025/10/12/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20251013111006_4398_17.jpg" alt="微信图片_20251013111006_4398_17"></p><p><img src="/2025/10/12/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/%E6%88%AA%E5%B1%8F2025-10-12%2020.28.59.jpg" alt="截屏2025-10-12 20.28.59"></p><p><img src="/2025/10/12/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/%E6%88%AA%E5%B1%8F2025-10-12%2020.29.54.jpg" alt="截屏2025-10-12 20.29.54"></p><p><img src="/2025/10/12/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/%E6%88%AA%E5%B1%8F2025-10-12%2020.30.40.jpg" alt="截屏2025-10-12 20.30.40"></p><p><img src="/2025/10/12/%E8%A3%85%E6%9C%BA/clonezilla%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/%E6%88%AA%E5%B1%8F2025-10-12%2020.31.13.jpg" alt="截屏2025-10-12 20.31.13"></p><p>完毕之后，回到服务端 按一下 y继续。</p><p>end</p>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="装机" scheme="http://example.com/categories/%E8%A3%85%E6%9C%BA/"/>
    
    
    <category term="ventoy" scheme="http://example.com/tags/ventoy/"/>
    
    <category term="clonezilla" scheme="http://example.com/tags/clonezilla/"/>
    
  </entry>
  
  <entry>
    <title>交易所类型</title>
    <link href="http://example.com/2025/10/08/%E5%8C%BA%E5%9D%97%E9%93%BE/%E4%BA%A4%E6%98%93%E6%89%80%E7%B1%BB%E5%9E%8B/"/>
    <id>http://example.com/2025/10/08/%E5%8C%BA%E5%9D%97%E9%93%BE/%E4%BA%A4%E6%98%93%E6%89%80%E7%B1%BB%E5%9E%8B/</id>
    <published>2025-10-08T07:38:12.000Z</published>
    <updated>2025-10-10T05:51:34.430Z</updated>
    
    <content type="html"><![CDATA[<h1 id="orderbook"><a href="#orderbook" class="headerlink" title="orderbook"></a>orderbook</h1><p>订单簿交易所</p><p> 统计卖家和买家的期望出价，匹配上就开始交易。</p><p>像下楼梯一样 ，匹配。</p><p>对于低流动性的小市场不友好。中心化交易所用的比较多。</p><h1 id="Automatic-Market-Maker"><a href="#Automatic-Market-Maker" class="headerlink" title="Automatic Market Maker"></a>Automatic Market Maker</h1><p>自动做市商交易所 AMM</p><p>搞一个流动性池，x*y&#x3D; 常数k；资产供应量直接决定了价格，可以参考我之前的 《三明治攻击Sanwich Attack和MEV》笔记。</p><p>三明治攻击太多。去中心化交易所用的比较多。</p>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="区块链" scheme="http://example.com/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
    <category term=" orderbook" scheme="http://example.com/tags/orderbook/"/>
    
    <category term="AMM" scheme="http://example.com/tags/AMM/"/>
    
  </entry>
  
  <entry>
    <title>三明治攻击Sanwich Attack和MEV</title>
    <link href="http://example.com/2025/10/08/%E5%8C%BA%E5%9D%97%E9%93%BE/%E4%B8%89%E6%98%8E%E6%B2%BB%E6%94%BB%E5%87%BBSanwich%20Attack%E5%92%8CMEV/"/>
    <id>http://example.com/2025/10/08/%E5%8C%BA%E5%9D%97%E9%93%BE/%E4%B8%89%E6%98%8E%E6%B2%BB%E6%94%BB%E5%87%BBSanwich%20Attack%E5%92%8CMEV/</id>
    <published>2025-10-08T07:35:12.000Z</published>
    <updated>2025-10-10T05:51:34.430Z</updated>
    
    <content type="html"><![CDATA[<h1 id="三明治攻击（Sandwich-attack）"><a href="#三明治攻击（Sandwich-attack）" class="headerlink" title="三明治攻击（Sandwich attack）"></a>三明治攻击（Sandwich attack）</h1><p>三明治攻击是区块链去中心化交易（DEX）中一种常见的 <strong>前后夹击（front-run + back-run）</strong> 的 MEV（最大可提取价值）行为。攻击者在看到一笔尚未上链的交易（通常是一个会造成价格变动的大额换币交易）后，先发一笔把价格推上去的交易（前置），等目标交易被执行后，再发一笔把价格拉回来的交易（后置）。这样攻击者以更高的价格买入、以更高的价格卖出或反之，从而赚取差价，目标交易承担了额外滑点（更差的成交价格）。</p><h1 id="计算例子"><a href="#计算例子" class="headerlink" title="计算例子"></a>计算例子</h1><section>  <h2>三明治攻击 — 数字示例（基于恒定乘积 AMM, 如 Uniswap）</h2>  <h3>假设（初始池子）</h3>  <ul>    <li>代币对：<strong>USDC / X</strong></li>    <li>USDC 储备 <code>x = 100,000</code></li>    <li>X 代币储备 <code>y = 100,000</code></li>    <li>常数 <code>k = x * y = 10,000,000,000</code></li>    <li>Alice 准备用 <code>1000 USDC</code> 买 X。</li>    <li>攻击者决定对 Alice 做“三明治”：先用 <code>1000 USDC</code> 前置买入（front-run），        等 Alice 的交易执行后，再把自己买到的 X 卖回（back-run）。</li>  </ul>  <hr>  <h3>一、理想化（无手续费）计算步骤</h3>  <p>AMM 遵循恒定乘积：<code>k = x * y</code>。交易中若输入一侧变化，则另一侧按 <code>k</code> 保持不变。</p>  <h4>1) 攻击者先前置买入 1000 USDC</h4>  <p>    前置后 USDC 储备：<code>x1 = x0 + 1000 = 101000</code><br>    对应的新 X 储备：<code>y1 = k / x1 = 10,000,000,000 / 101000 ≈ 99009.900990</code><br>    攻击者买到的 X：  </p>  <pre><code>Δy_A = y0 - y1 ≈ 100000 - 99009.900990 ≈ 990.0990099009902</code></pre>  <h4>2) Alice 在新的池子上以 1000 USDC 买入</h4>  <p>    交易后 USDC 储备：<code>x2 = x1 + 1000 = 102000</code><br>    对应的新 X 储备：<code>y2 = k / x2 = 10,000,000,000 / 102000 ≈ 98039.2156861755</code><br>    Alice 买到的 X：  </p>  <pre><code>Δy_Alice = y1 - y2 ≈ 99009.900990 - 98039.215686 ≈ 970.685304</code></pre>  <h4>3) 攻击者后置卖出（把先前买到的 Δy_A 卖回）</h4>  <p>    卖入后 X 储备：<code>y3 = y2 + Δy_A ≈ 98039.2156861755 + 990.0990099009902 ≈ 99029.3146960765</code><br>    卖出后 USDC 储备：<code>x3 = k / y3 ≈ 10,000,000,000 / 99029.3146960765 ≈ 100.——（见下）</code>  </p>  <p>攻击者得到的 USDC（无手续费）为：</p>  <pre><code>USDC_out = x2 - x3≈ 102000 - (10,000,000,000 / 99029.3146960765)≈ 1019.8000392079985</code></pre>  <p><strong>攻击者净收益（无手续费，不计 gas）：</strong></p>  <pre><code>profit ≈ 1019.8000392079985 - 1000 ≈ 19.8000392 USDC</code></pre>  <hr>  <h3>二、带手续费（UniswapV2 风格，0.3%）的计算</h3>  <p>在 UniswapV2 中常用做法是：对 <em>输入量</em> 扣手续费（例如 0.3%），实际进入池子的量为：</p>  <pre><code>amount_in_with_fee = amount_in * (1 - fee)</code></pre>  <p>交换输出的闭式解（输入为 USDC，输出为 X）为：</p>  <pre><code>amount_out = amount_in_with_fee * y / (x + amount_in_with_fee)</code></pre>  <h4>1) 攻击者前置买入 1000 USDC（带 0.3%）</h4>  <pre><code>fee = 0.003amount_in = 1000amount_in_with_fee = 1000 * (1 - 0.003) = 997.0<p>amount_out_attacker &#x3D; 997 * 100000 &#x2F; (100000 + 997)<br>                    ≈ 987.158034397061  (攻擊者买到的 X)<br></p></code></pre><p></p>  <p>交易后池子变为：</p>  <pre><code>x1 = 100000 + 997 = 100997.0y1 = 100000 - 987.158034397061 ≈ 99012.84196560294</code></pre>  <h4>2) Alice 用 1000 USDC 在新的池子上买</h4>  <pre><code>amount_in_with_fee_Alice = 1000 * (1 - 0.003) = 997.0amount_out_alice = 997 * y1 / (x1 + 997)                 = 997 * 99012.84196560294 / (100997 + 997)                 ≈ 970.685304108 (数值与无手续费情形接近但略有差别)new reserves after Alice:x2 = x1 + 997 = 100997 + 997 = 101994.0y2 = y1 - amount_out_alice ≈ 99012.84196560294 - 970.685304108 ≈ 98042.15666149494</code></pre>  <h4>注：</h4>  <p>（上面 x2 的计算方式可根据是否把手续费也计入池子具体实现细节略有差异；通常在 UniswapV2，手续费会被留在池子中，等效于输入量变为 <code>amount_in_with_fee</code> 并加到储备中。）</p>  <h4>3) 攻击者后置卖出（卖回自己先前买到的 ≈ 987.158034397061 X）</h4>  <pre><code>sell_x = 987.158034397061sell_in_with_fee = sell_x * (1 - 0.003) ≈ 984.196560293870<p>USDC_out &#x3D; sell_in_with_fee * x2 &#x2F; (y2 + sell_in_with_fee)<br>        ≈ 984.196560293870 * 100997.0 &#x2F; (98042.15666149494 + 984.196560293870)<br>        ≈ 1013.7216192144434  (注意：此为示例近似值)<br></p></code></pre><p></p>  <p><strong>攻击者净收益（带 0.3% 手续费，但不计链上 gas）：</strong></p>  <pre><code>profit ≈ 1013.7216192144434 - 1000 ≈ 13.7216192 USDC</code></pre>  <hr>  <h3>三、公式推导（简要）</h3>  <p>恒定乘积：</p>  <pre><code>k = x * y</code></pre>  <p>若输入有效量为 <code>a</code>（已扣手续费），交易后：</p>  <pre><code>x' = x + ay' = k / x'amount_out = y - y' = y - k / (x + a) = (y(x+a)-xy)/(x + a) = (a * y) / (x + a)</code></pre>  <p>因此在实现时步骤为：</p>  <ol>    <li>从 <code>amount_in</code> 扣除手续费：<code>a = amount_in * (1 - fee)</code></li>    <li>计算输出：<code>amount_out = a * y / (x + a)</code></li>  </ol>  <hr>  <h3>四、注意事项与总结</h3>  <ul>    <li>上面所有数值均为示例计算，实际池子行为会因协议实现（手续费如何分配、是否把手续费留在池中等）而有细微差别。</li>    <li>实际是否能盈利还需扣除链上真实的 <strong>gas 费用</strong> 与为抢跑支付的 <strong>priority fee</strong>；这些往往显著影响最终收益。</li>    <li>不同池子规模、不同手续费率、不同交易额会严重影响攻击者的利润与对被攻击者的影响。</li>  </ul>  <hr>  <p style="font-size:0.9em;color:#555;">  </p></section><h1 id="最大可提取价值-MEV-（Maximal-Extractable-Value）"><a href="#最大可提取价值-MEV-（Maximal-Extractable-Value）" class="headerlink" title="最大可提取价值 MEV （Maximal Extractable Value）"></a>最大可提取价值 MEV （Maximal Extractable Value）</h1><p>区块链交易是如何被处理的？</p><p>当你用eth这样的权益证明时proof of stake ，区块链发生一笔交易，交易先进入内存储memory pool，而不是直接上链，验证者决定哪些交易打包上链；验证者一般会选价格最高的交易优先打包。</p><p> 前面说的 sanwich attack 就是 一个 抢先交易和一个尾随交易构成，也实现了一次 MEV；</p><p>很多去中心化交易所提供了一个滑点限制来防止被MEV杀伤；他让你自己设置一个最大价格变动容忍百分比。</p><h2 id="单区块清算攻击"><a href="#单区块清算攻击" class="headerlink" title="单区块清算攻击"></a>单区块清算攻击</h2><p>有一种single block liquidation attack（单区块清算攻击），这种情况下恶意行为者可以操纵这个区块内某种代币的价格， 通常用闪电贷瞬间介入百万美元，大量买入某个资产，从而触发链上价格预言机中借贷协议中的自动清算，一旦清算，攻击者又会把这些代币卖出，让价格恢复到正常水平，整个过程发生在一个区块中，导致普通用户或者协议参与者收到损失。</p><h3 id="应对策略"><a href="#应对策略" class="headerlink" title="应对策略"></a>应对策略</h3><p>为应对这样的 single block liquidation attack，很多difi项目使用时间加权平均价格TWAT，而不是仅仅利用链上现货价格，使用的是 几个区块一定时间内的平均价格，这样单个区块中就很难操纵；</p><p> 还有一些策略是private隐藏起来交易，直到交易被确认，让MEV机器人不能抢先交易，但是不能避免验证者自己搞MEV操作。</p><p>还有一种策略是公平排序， 粗暴的执行先到先执行的策略，根本上杜绝重新排序套利的机会。或者用密码学原理执行乱序。这个策略会降低difi市场的高效和稳定，因为大家没有意愿参与验证；</p><p>还有一种策略是 区块空间拍卖block space auctions，追求公开拍卖，竞价优先级，但是这样还是会偏向最有钱的交易者。</p><p>说到底 MEV 是难以避免的。</p>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="区块链" scheme="http://example.com/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
    <category term="sandwich attack" scheme="http://example.com/tags/sandwich-attack/"/>
    
    <category term="MEV" scheme="http://example.com/tags/MEV/"/>
    
  </entry>
  
  <entry>
    <title>solidity学习</title>
    <link href="http://example.com/2025/10/04/solidity_study/solidity%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2025/10/04/solidity_study/solidity%E5%AD%A6%E4%B9%A0/</id>
    <published>2025-10-04T02:27:21.000Z</published>
    <updated>2025-10-16T10:08:35.252Z</updated>
    
    <content type="html"><![CDATA[<p>solidity文档 <code>https://learnblockchain.cn/docs/solidity/</code></p><h1 id="几个实例"><a href="#几个实例" class="headerlink" title="几个实例"></a>几个实例</h1><h2 id="选举"><a href="#选举" class="headerlink" title="选举"></a>选举</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: GPL-3.0</span><br><span class="line">pragma solidity &gt;=0.7.0 &lt;0.9.0;</span><br><span class="line">/// @title 委托投票</span><br><span class="line">contract Ballot &#123;</span><br><span class="line">    // 这里声明了一个新的复合类型用于稍后的变量。</span><br><span class="line">    // 该变量用来表示一个选民。</span><br><span class="line">    struct Voter &#123;</span><br><span class="line">        uint weight; // 计票的权重</span><br><span class="line">        bool voted;  // 若为真，代表该人已投票</span><br><span class="line">        address delegate; // 被委托人</span><br><span class="line">        uint vote;   // 投票提案的索引</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 提案的类型.</span><br><span class="line">    struct Proposal &#123;</span><br><span class="line">        bytes32 name;   // 简称（最长32个字节）</span><br><span class="line">        uint voteCount; // 得票数  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    address public chairperson;</span><br><span class="line"></span><br><span class="line">    // 这声明了一个状态变量，为每个可能的地址存储一个 `Voter`。</span><br><span class="line">    mapping(address =&gt; Voter) public voters;</span><br><span class="line"></span><br><span class="line">    // 一个 `Proposal` 结构类型的动态数组</span><br><span class="line">    Proposal[] public proposals;</span><br><span class="line"></span><br><span class="line">    /// 为 `proposalNames` 中的每个提案，创建一个新的（投票）表决 memory 表示 从临时内存中读取，就是 获取外部输入。 </span><br><span class="line">    constructor(bytes32[] memory proposalNames) &#123;  // 这里用 memory 临时用一下，但是proposals.push 会让内容保存到永久 storage中。 </span><br><span class="line">        chairperson = msg.sender;                  // msg.sender 是调用合约者（消息发送者）自己的地址。</span><br><span class="line">        voters[chairperson].weight = 1;</span><br><span class="line"></span><br><span class="line">        //对于提供的每个提案名称，</span><br><span class="line">        //创建一个新的 Proposal 对象并把它添加到数组的末尾。</span><br><span class="line">        for (uint i = 0; i &lt; proposalNames.length; i++) &#123;</span><br><span class="line">            // `Proposal(&#123;...&#125;)` 创建一个临时 Proposal 对象，</span><br><span class="line">            // `proposals.push(...)` 将其添加到 `proposals` 的末尾</span><br><span class="line">            proposals.push(Proposal(&#123;</span><br><span class="line">                name: proposalNames[i],</span><br><span class="line">                voteCount: 0</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 授权 `voter` 对这个（投票）表决进行投票。</span><br><span class="line">    // 只有 `chairperson` 可以调用该函数。</span><br><span class="line">    function giveRightToVote(address voter) external &#123;</span><br><span class="line">        // 若 `require` 的第一个参数的计算结果为 `false`，</span><br><span class="line">        // 则终止执行，撤销所有对状态和以太币余额的改动。</span><br><span class="line">        // 在旧版的 EVM 中这曾经会消耗所有 gas，但现在不会了。</span><br><span class="line">        // 使用 require 来检查函数是否被正确地调用，是一个好习惯。</span><br><span class="line">        // 你也可以在 require 的第二个参数中提供一个对错误情况的解释。</span><br><span class="line">        require(</span><br><span class="line">            msg.sender == chairperson,</span><br><span class="line">            &quot;Only chairperson can give right to vote.&quot;</span><br><span class="line">        );</span><br><span class="line">        require(</span><br><span class="line">            !voters[voter].voted,</span><br><span class="line">            &quot;The voter already voted.&quot;</span><br><span class="line">        );</span><br><span class="line">        require(voters[voter].weight == 0);  // 避免 重复授权 ，这样无意义。 </span><br><span class="line">        voters[voter].weight = 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// 把你的投票委托到投票者 `to`。</span><br><span class="line">    function delegate(address to) external &#123;</span><br><span class="line">        // 传引用</span><br><span class="line">        Voter storage sender = voters[msg.sender];  //storage → &quot;修改永久状态&quot;后续操作直接修改区块链状态；memory → &quot;我只需要临时计算&quot;</span><br><span class="line">        require(sender.weight != 0, &quot;You have no right to vote&quot;);</span><br><span class="line">        require(!sender.voted, &quot;You already voted.&quot;);</span><br><span class="line"></span><br><span class="line">        require(to != msg.sender, &quot;Self-delegation is disallowed.&quot;);</span><br><span class="line"></span><br><span class="line">        // 委托是可以传递的，只要被委托者 `to` 也设置了委托。</span><br><span class="line">        // 一般来说，这种循环委托是危险的。因为，如果传递的链条太长，</span><br><span class="line">        // 则可能需消耗的gas要多于区块中剩余的（大于区块设置的gasLimit），</span><br><span class="line">        // 这种情况下，委托不会被执行。</span><br><span class="line">        // 而在另一些情况下，如果形成闭环，则会让合约完全卡住。</span><br><span class="line">        while (voters[to].delegate != address(0)) &#123;  // 找到 委托链的最后一个委托者，address(0)指的是 null类似于委托链的终点。</span><br><span class="line">            to = voters[to].delegate;</span><br><span class="line"></span><br><span class="line">            // 不允许闭环委托</span><br><span class="line">            require(to != msg.sender, &quot;Found loop in delegation.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Voter storage delegate_ = voters[to];      // 最终委托者 （最终投票者）</span><br><span class="line"></span><br><span class="line">        // Voters cannot delegate to accounts that cannot vote.</span><br><span class="line">        require(delegate_.weight &gt;= 1);</span><br><span class="line"></span><br><span class="line">        // Since `sender` is a reference, this</span><br><span class="line">        // modifies `voters[msg.sender]`.</span><br><span class="line">        sender.voted = true;</span><br><span class="line">        sender.delegate = to;</span><br><span class="line"></span><br><span class="line">        if (delegate_.voted) &#123;</span><br><span class="line">            // 若被委托者已经投过票了，直接增加得票数</span><br><span class="line">            proposals[delegate_.vote].voteCount += sender.weight;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 若被委托者还没投票，增加委托者的权重</span><br><span class="line">            delegate_.weight += sender.weight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// 把你的票(包括委托给你的票)，</span><br><span class="line">    /// 投给提案 `proposals[proposal].name`.</span><br><span class="line">    function vote(uint proposal) external &#123;</span><br><span class="line">        Voter storage sender = voters[msg.sender];</span><br><span class="line">        require(sender.weight != 0, &quot;Has no right to vote&quot;);</span><br><span class="line">        require(!sender.voted, &quot;Already voted.&quot;);</span><br><span class="line">        sender.voted = true;</span><br><span class="line">        sender.vote = proposal;</span><br><span class="line"></span><br><span class="line">        // 如果 `proposal` 超过了数组的范围，则会自动抛出异常，并恢复所有的改动</span><br><span class="line"></span><br><span class="line">        proposals[proposal].voteCount += sender.weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// @dev 结合之前所有的投票，计算出最终胜出的提案 ，view 只读不修改状态，免gas费。</span><br><span class="line">    function winningProposal() public view  </span><br><span class="line">            returns (uint winningProposal_)    </span><br><span class="line">    &#123;</span><br><span class="line">        uint winningVoteCount = 0;</span><br><span class="line">        for (uint p = 0; p &lt; proposals.length; p++) &#123;</span><br><span class="line">            if (proposals[p].voteCount &gt; winningVoteCount) &#123;</span><br><span class="line">                winningVoteCount = proposals[p].voteCount;</span><br><span class="line">                winningProposal_ = p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 调用 winningProposal() 函数以获取提案数组中获胜者的索引，并以此返回获胜者的名称</span><br><span class="line">    function winnerName() external view</span><br><span class="line">            returns (bytes32 winnerName_)</span><br><span class="line">    &#123;</span><br><span class="line">        winnerName_ = proposals[winningProposal()].name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="普通竞拍"><a href="#普通竞拍" class="headerlink" title="普通竞拍"></a>普通竞拍</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: GPL-3.0</span><br><span class="line">pragma solidity ^0.8.4;</span><br><span class="line">contract SimpleAuction &#123;</span><br><span class="line">    // 拍卖的参数。时间可以是绝对的 unix 时间戳（自 1970-01-01 起的秒数）或以秒为单位的时间段。</span><br><span class="line">    address payable public beneficiary;  // 标记该地址能够接收资金</span><br><span class="line">    uint public auctionEndTime;</span><br><span class="line"></span><br><span class="line">    // 拍卖的当前状态。</span><br><span class="line">    address public highestBidder;</span><br><span class="line">    uint public highestBid;</span><br><span class="line"></span><br><span class="line">    // 允许取回的先前出价</span><br><span class="line">    mapping(address =&gt; uint) pendingReturns;</span><br><span class="line"></span><br><span class="line">    // 在结束时设置为 true，禁止任何更改。</span><br><span class="line">    // 默认初始化为 `false`。</span><br><span class="line">    bool ended;</span><br><span class="line"></span><br><span class="line">    // 变更触发的事件。 事件就是区块链的&quot;广播系统&quot;，广播内容为参数内容。</span><br><span class="line">    event HighestBidIncreased(address bidder, uint amount);</span><br><span class="line">    event AuctionEnded(address winner, uint amount);</span><br><span class="line"></span><br><span class="line">    // Errors 用来定义失败</span><br><span class="line"></span><br><span class="line">    // 三斜杠注释是所谓的 natspec 注释。</span><br><span class="line">    // 当用户被要求确认交易时将显示它们，或者当显示错误时。</span><br><span class="line"></span><br><span class="line">    /// 拍卖已经结束。</span><br><span class="line">    error AuctionAlreadyEnded();  // revert 交易回滚​ gas 退回；</span><br><span class="line">    /// 已经有更高或相等的出价。</span><br><span class="line">    error BidNotHighEnough(uint highestBid);</span><br><span class="line">    /// 拍卖尚未结束。</span><br><span class="line">    error AuctionNotYetEnded();</span><br><span class="line">    /// 函数 auctionEnd 已经被调用。</span><br><span class="line">    error AuctionEndAlreadyCalled();</span><br><span class="line"></span><br><span class="line">    /// 创建一个简单的拍卖，拍卖时间为 `biddingTime`秒，代表受益人地址 `beneficiaryAddress`。</span><br><span class="line">    constructor(</span><br><span class="line">        uint biddingTime,</span><br><span class="line">        address payable beneficiaryAddress</span><br><span class="line">    ) &#123;</span><br><span class="line">        beneficiary = beneficiaryAddress;</span><br><span class="line">        auctionEndTime = block.timestamp + biddingTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// 在拍卖中出价，出价的值与此交易一起发送。</span><br><span class="line">    /// 该值仅在拍卖未获胜时退款。</span><br><span class="line">    function bid() external payable &#123;</span><br><span class="line">        // 不需要参数，所有信息已经是交易的一部分。</span><br><span class="line">        // 关键字 payable 是必需的，以便函数能够接收以太。</span><br><span class="line"></span><br><span class="line">        // 如果拍卖时间已过，则撤销调用。</span><br><span class="line">        if (block.timestamp &gt; auctionEndTime)</span><br><span class="line">            revert AuctionAlreadyEnded();</span><br><span class="line"></span><br><span class="line">        // 如果出价不高，则将以太币退回（撤销语句将撤销此函数执行中的所有更改，包括它已接收以太币）。</span><br><span class="line">        if (msg.value &lt;= highestBid)</span><br><span class="line">            revert BidNotHighEnough(highestBid);</span><br><span class="line"></span><br><span class="line">        if (highestBid != 0) &#123;</span><br><span class="line">            // 通过简单使用 highestBidder.send(highestBid) 退回以太币是一个安全风险，因为它可能会执行一个不受信任的合约。</span><br><span class="line">            // 让接收者自行提取他们的以太币总是更安全。</span><br><span class="line">            pendingReturns[highestBidder] += highestBid;</span><br><span class="line">        &#125;</span><br><span class="line">        highestBidder = msg.sender;</span><br><span class="line">        highestBid = msg.value;</span><br><span class="line">        emit HighestBidIncreased(msg.sender, msg.value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// 取回出价（当该出价已被超越）</span><br><span class="line">    function withdraw() external returns (bool) &#123;</span><br><span class="line">        uint amount = pendingReturns[msg.sender];</span><br><span class="line">        if (amount &gt; 0) &#123;</span><br><span class="line">            // 将其设置为零很重要，因为接收者可以在 `send` 返回之前再次调用此函数作为接收调用的一部分。</span><br><span class="line">            pendingReturns[msg.sender] = 0;</span><br><span class="line"></span><br><span class="line">            // msg.sender 不是 `address payable` 类型，必须显式转换为 `payable(msg.sender)` 以便使用成员函数 `send()`。</span><br><span class="line">            if (!payable(msg.sender).send(amount)) &#123;</span><br><span class="line">                // 这里不需要调用 throw，只需重置未付款</span><br><span class="line">                pendingReturns[msg.sender] = amount;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// 结束拍卖并将最高出价发送给受益人。</span><br><span class="line">    function auctionEnd() external &#123;</span><br><span class="line">        // 这是一个好的指导原则，将与其他合约交互的函数（即它们调用函数或发送以太）结构化为三个阶段：</span><br><span class="line">        // 1. 检查条件</span><br><span class="line">        // 2. 执行操作（可能更改条件）</span><br><span class="line">        // 3. 与其他合约交互</span><br><span class="line">        // 如果这些阶段混合在一起，其他合约可能会回调当前合约并修改状态或导致效果（以太支付）被多次执行。</span><br><span class="line">        // 如果内部调用的函数包括与外部合约的交互，它们也必须被视为与外部合约的交互。</span><br><span class="line"></span><br><span class="line">        // 1. 条件</span><br><span class="line">        if (block.timestamp &lt; auctionEndTime)</span><br><span class="line">            revert AuctionNotYetEnded();</span><br><span class="line">        if (ended)</span><br><span class="line">            revert AuctionEndAlreadyCalled();</span><br><span class="line"></span><br><span class="line">        // 2. 生效</span><br><span class="line">        ended = true;</span><br><span class="line">        emit AuctionEnded(highestBidder, highestBid);</span><br><span class="line"></span><br><span class="line">        // 3. 交互</span><br><span class="line">        beneficiary.transfer(highestBid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="”检查-生效-交互”-原则"><a href="#”检查-生效-交互”-原则" class="headerlink" title="**”检查-生效-交互”**原则"></a>**”检查-生效-交互”**原则</h2><p>check、effect、interaction。</p><p>如果让 interaction交互 发生在 effect状态变化前面，可能导致<strong>重入攻击</strong>。</p><p><strong>重入攻击</strong>就是别人反复调用你的一个函数或者方法，实现攻击的方法。 例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if (highestBid != 0) &#123;</span><br><span class="line">    // 改为直接转账（易受攻击的版本）</span><br><span class="line">    (bool success, ) = highestBidder.call&#123;value: highestBid&#125;(&quot;&quot;);</span><br><span class="line">    require(success, &quot;Transfer failed&quot;);</span><br><span class="line">&#125;</span><br><span class="line">highestBidder = msg.sender;</span><br><span class="line">highestBid = msg.value;</span><br><span class="line">emit HighestBidIncreased(msg.sender, msg.value);</span><br></pre></td></tr></table></figure><p>interaction交互（向这个地址中转账先发生）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(bool success, ) = highestBidder.call&#123;value: highestBid&#125;(&quot;&quot;);</span><br></pre></td></tr></table></figure><p>effect状态后改变</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">highestBidder = msg.sender;</span><br><span class="line">highestBid = msg.value;</span><br></pre></td></tr></table></figure><p>假如此时有一个 黑客合约，（在被别的合约call调用 收款时，会自动 运行receive函数，这是区块链规则），</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">receive() external payable &#123;</span><br><span class="line">    // 在接收以太币时，重新调用 bid 函数，出价略高于当前最高价</span><br><span class="line">    auction.bid&#123;value: currentHighestBid + 1 wei&#125;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它先出价1eth，别人进价2eth，它就会以之前的最高价被调用<code>highestBidder.call&#123;value: highestBid&#125;(&quot;&quot;)</code>，它在收到1eth退款后，接了一个 重新调用 bid 函数的操作，而且出价仅仅比之前高一点点如1.001eth。由于之前的  effect状态改变还未发生，导致还是之前自己老的出价 1eth作为 <code>highestBid</code> ，自己这高一点点的 新竞价，能够通过 bid中 check 步骤 <code>if (msg.value &lt;= highestBid)</code> 等等这些条件，然后 再度刷新自己之前 最高竞价退款的步骤<code>highestBidder.call&#123;value: highestBid&#125;(&quot;&quot;)</code>,再次收到 1eth的退款，而再次在 黑客合约中调用receive函数，再次收到 1eth的退款，实现递归，直到花光gas 或者在自己写的某个条件停下来。 </p><h2 id="盲拍"><a href="#盲拍" class="headerlink" title="盲拍"></a>盲拍</h2><p><strong>具有约束力且保密</strong>：防止竞标者在赢得拍卖后不发送以太币的唯一方法是让他们在出价时一起发送，哈希实现保密。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: GPL-3.0</span><br><span class="line">pragma solidity ^0.8.4;</span><br><span class="line">contract BlindAuction &#123;</span><br><span class="line">    struct Bid &#123;</span><br><span class="line">        bytes32 blindedBid;</span><br><span class="line">        uint deposit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    address payable public beneficiary;</span><br><span class="line">    uint public biddingEnd;</span><br><span class="line">    uint public revealEnd;</span><br><span class="line">    bool public ended;</span><br><span class="line"></span><br><span class="line">    mapping(address =&gt; Bid[]) public bids;</span><br><span class="line"></span><br><span class="line">    address public highestBidder;</span><br><span class="line">    uint public highestBid;</span><br><span class="line"></span><br><span class="line">    // 允许提取之前出价</span><br><span class="line">    mapping(address =&gt; uint) pendingReturns;</span><br><span class="line"></span><br><span class="line">    event AuctionEnded(address winner, uint highestBid);</span><br><span class="line"></span><br><span class="line">    // Errors 用来定义失败</span><br><span class="line"></span><br><span class="line">    /// 函数被调用得太早。</span><br><span class="line">    /// 请在 `time` 再试一次。</span><br><span class="line">    error TooEarly(uint time);</span><br><span class="line">    /// 函数被调用得太晚。</span><br><span class="line">    /// 不能在 `time` 之后调用。</span><br><span class="line">    error TooLate(uint time);</span><br><span class="line">    /// 函数 auctionEnd 已经被调用。</span><br><span class="line">    error AuctionEndAlreadyCalled();</span><br><span class="line"></span><br><span class="line">    // 修改器是一种方便的方式来验证输入函数。</span><br><span class="line">    // `onlyBefore` 应用于下面的 `bid`：新的函数体是修改器的主体，其中 `_` 被旧函数体替换。</span><br><span class="line">    // solidity 中的 modifier 方法 很像 python中的 @ 后面的装饰器啊，就是一个 对被修饰方法的闭包式的 封装。 </span><br><span class="line">    modifier onlyBefore(uint time) &#123;</span><br><span class="line">        if (block.timestamp &gt;= time) revert TooLate(time);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">    modifier onlyAfter(uint time) &#123;</span><br><span class="line">        if (block.timestamp &lt;= time) revert TooEarly(time);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    constructor(</span><br><span class="line">        uint biddingTime,</span><br><span class="line">        uint revealTime,</span><br><span class="line">        address payable beneficiaryAddress</span><br><span class="line">    ) &#123;</span><br><span class="line">        beneficiary = beneficiaryAddress;</span><br><span class="line">        biddingEnd = block.timestamp + biddingTime;</span><br><span class="line">        revealEnd = biddingEnd + revealTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// 以 `blindedBid` = keccak256(abi.encodePacked(value, fake, secret)) 的方式提交一个盲出价，它是一个hash值。</span><br><span class="line">    /// 发送的以太币仅在出价在揭示阶段被正确揭示时才会退还。</span><br><span class="line">    /// 如果与出价一起发送的以太币至少为 &quot;value&quot; 且 &quot;fake&quot; 不为真，则出价有效。</span><br><span class="line">    /// 将 &quot;fake&quot; 设置为真并发送不准确的金额是隐藏真实出价的方式，但仍然满足所需的存款。</span><br><span class="line">    /// 相同地址可以提交多个出价。</span><br><span class="line">    // onlyBefore(biddingEnd) 就是 solidity使用前文装饰器的写法。 </span><br><span class="line">    function bid(bytes32 blindedBid)</span><br><span class="line">        external</span><br><span class="line">        payable</span><br><span class="line">        onlyBefore(biddingEnd)</span><br><span class="line">    &#123;</span><br><span class="line">        bids[msg.sender].push(Bid(&#123;</span><br><span class="line">            blindedBid: blindedBid,</span><br><span class="line">            deposit: msg.value</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// 用户自己来揭示盲出价。</span><br><span class="line">    /// 将获得所有正确盲出的无效出价的退款，以及除了最高出价之外的所有出价。</span><br><span class="line">    // 在 Solidity 中，函数参数有三种存储位置：</span><br><span class="line">    // memory- 易失性内存（可修改）</span><br><span class="line">    // storage- 永久存储（可修改）</span><br><span class="line">    // calldata- 只读调用数据（不可修改）</span><br><span class="line">    function reveal(</span><br><span class="line">        uint[] calldata values,</span><br><span class="line">        bool[] calldata fakes,</span><br><span class="line">        bytes32[] calldata secrets</span><br><span class="line">    )</span><br><span class="line">        external</span><br><span class="line">        onlyAfter(biddingEnd)</span><br><span class="line">        onlyBefore(revealEnd)</span><br><span class="line">    &#123;</span><br><span class="line">        uint length = bids[msg.sender].length;</span><br><span class="line">        require(values.length == length);</span><br><span class="line">        require(fakes.length == length);</span><br><span class="line">        require(secrets.length == length);</span><br><span class="line"></span><br><span class="line">        uint refund; // 退款</span><br><span class="line">        for (uint i = 0; i &lt; length; i++) &#123;</span><br><span class="line">            Bid storage bidToCheck = bids[msg.sender][i]; // 公示数据是链上要记录的。</span><br><span class="line">            // 获取用户提交的揭示数据</span><br><span class="line">            (uint value, bool fake, bytes32 secret) =</span><br><span class="line">                    (values[i], fakes[i], secrets[i]);</span><br><span class="line">            if (bidToCheck.blindedBid != keccak256(abi.encodePacked(value, fake, secret))) &#123;</span><br><span class="line">                // 出价未能正确披露</span><br><span class="line">                // 不退还存款。</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            refund += bidToCheck.deposit;</span><br><span class="line">            // 如果是真实出价且押金&gt;=出价金额</span><br><span class="line">            if (!fake &amp;&amp; bidToCheck.deposit &gt;= value) &#123;</span><br><span class="line">                if (placeBid(msg.sender, value))</span><br><span class="line">                    refund -= value;</span><br><span class="line">            &#125;</span><br><span class="line">            // 使发送者无法重新取回相同的存款。如果没有这一步，用户再调用 reveal函数，又会退一遍，这一步的目的相当于撤销承诺。</span><br><span class="line">            bidToCheck.blindedBid = bytes32(0);</span><br><span class="line">        &#125;</span><br><span class="line">        payable(msg.sender).transfer(refund);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// 提取被超出出价的出价。</span><br><span class="line">    function withdraw() external &#123;</span><br><span class="line">        uint amount = pendingReturns[msg.sender];</span><br><span class="line">        if (amount &gt; 0) &#123;</span><br><span class="line">            // 将其设置为零是重要的，</span><br><span class="line">            // 因为，作为接收调用的一部分，</span><br><span class="line">            // 接收者可以在 `transfer` 返回之前重新调用该函数。（可查看上面关于“条件 -&gt; 生效 -&gt; 交互”的标注）</span><br><span class="line">            pendingReturns[msg.sender] = 0;</span><br><span class="line"></span><br><span class="line">            payable(msg.sender).transfer(amount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// 结束拍卖并将最高出价发送给受益人。</span><br><span class="line">    function auctionEnd()</span><br><span class="line">        external</span><br><span class="line">        onlyAfter(revealEnd)</span><br><span class="line">    &#123;</span><br><span class="line">        if (ended) revert AuctionEndAlreadyCalled(); // ended 在一开始 默认是0 也就是 false 默认没有结束。</span><br><span class="line">        emit AuctionEnded(highestBidder, highestBid);</span><br><span class="line">        ended = true;                                // 锁住了。不能反复 给受益人打钱。</span><br><span class="line">        beneficiary.transfer(highestBid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 这是一个“内部”函数，这意味着它只能从合约本身（或从派生合约）调用。</span><br><span class="line">    function placeBid(address bidder, uint value) internal</span><br><span class="line">            returns (bool success)</span><br><span class="line">    &#123;</span><br><span class="line">        if (value &lt;= highestBid) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        if (highestBidder != address(0)) &#123;</span><br><span class="line">            // 退款给之前的最高出价者。</span><br><span class="line">            pendingReturns[highestBidder] += highestBid;</span><br><span class="line">        &#125;</span><br><span class="line">        highestBid = value;</span><br><span class="line">        highestBidder = bidder;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="远程购买"><a href="#远程购买" class="headerlink" title="远程购买"></a>远程购买</h2><p>双方必须将物品价值的两倍放入合约作为托管。 一旦发生状况，以太币将被锁定在合约中，直到买方确认他们收到了物品。 之后，买方将获得价值（他们存款的一半），而卖方将获得三倍的价值（他们的存款加上价值）。 其背后的想法是双方都有动力来解决这种情况，否则他们的以太币将永远被锁定。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: GPL-3.0</span><br><span class="line">pragma solidity ^0.8.4;</span><br><span class="line">contract Purchase &#123;</span><br><span class="line">    uint public value;</span><br><span class="line">    address payable public seller;</span><br><span class="line">    address payable public buyer;</span><br><span class="line"></span><br><span class="line">    enum State &#123; Created, Locked, Release, Inactive &#125; // 定义一个枚举类</span><br><span class="line">    // 状态变量的默认值为第一个成员，`State.created`</span><br><span class="line">    State public state;</span><br><span class="line"></span><br><span class="line">    modifier condition(bool condition_) &#123;</span><br><span class="line">        require(condition_);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// 只有买方可以调用此函数。</span><br><span class="line">    error OnlyBuyer();</span><br><span class="line">    /// 只有卖方可以调用此函数。</span><br><span class="line">    error OnlySeller();</span><br><span class="line">    /// 当前状态下无法调用该函数。</span><br><span class="line">    error InvalidState();</span><br><span class="line">    /// 提供的值必须是偶数。</span><br><span class="line">    error ValueNotEven();</span><br><span class="line"></span><br><span class="line">    modifier onlyBuyer() &#123;</span><br><span class="line">        if (msg.sender != buyer)</span><br><span class="line">            revert OnlyBuyer();</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modifier onlySeller() &#123;</span><br><span class="line">        if (msg.sender != seller)</span><br><span class="line">            revert OnlySeller();</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modifier inState(State state_) &#123;</span><br><span class="line">        if (state != state_)</span><br><span class="line">            revert InvalidState();</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    event Aborted();</span><br><span class="line">    event PurchaseConfirmed();</span><br><span class="line">    event ItemReceived();</span><br><span class="line">    event SellerRefunded();</span><br><span class="line"></span><br><span class="line">    // 确保 `msg.value` 是一个偶数。</span><br><span class="line">    // 如果是奇数，除法将截断。</span><br><span class="line">    // 通过乘法检查它不是奇数。</span><br><span class="line">    constructor() payable &#123;</span><br><span class="line">        seller = payable(msg.sender);</span><br><span class="line">        value = msg.value / 2;</span><br><span class="line">        if ((2 * value) != msg.value)</span><br><span class="line">            revert ValueNotEven();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// 中止购买并收回以太币。</span><br><span class="line">    /// 只能由卖方在合约被锁定之前调用。</span><br><span class="line">    function abort()</span><br><span class="line">        external</span><br><span class="line">        onlySeller</span><br><span class="line">        inState(State.Created)</span><br><span class="line">    &#123;</span><br><span class="line">        emit Aborted();</span><br><span class="line">        state = State.Inactive;</span><br><span class="line">        // 我们在这里直接使用转账。</span><br><span class="line">        // 可用于防止重入，因为它是此函数中的最后一个调用，我们已经改变了状态。</span><br><span class="line">        seller.transfer(address(this).balance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// 作为买方确认购买。</span><br><span class="line">    /// 交易必须包括 `2 * value` 以太币。</span><br><span class="line">    /// 以太币将在调用 confirmReceived 之前被锁定。</span><br><span class="line">    function confirmPurchase()</span><br><span class="line">        external</span><br><span class="line">        inState(State.Created)</span><br><span class="line">        condition(msg.value == (2 * value))</span><br><span class="line">        payable</span><br><span class="line">    &#123;</span><br><span class="line">        emit PurchaseConfirmed();</span><br><span class="line">        buyer = payable(msg.sender);</span><br><span class="line">        state = State.Locked;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// 确认你（买方）收到了物品。</span><br><span class="line">    /// 这将释放锁定的以太币。</span><br><span class="line">    function confirmReceived()</span><br><span class="line">        external</span><br><span class="line">        onlyBuyer</span><br><span class="line">        inState(State.Locked)</span><br><span class="line">    &#123;</span><br><span class="line">        emit ItemReceived();</span><br><span class="line">        // 首先改变状态是很重要的，</span><br><span class="line">        // 否则，使用 `send` 调用的合约可以再次调用这里。</span><br><span class="line">        state = State.Release;</span><br><span class="line"></span><br><span class="line">        buyer.transfer(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// 此函数退款给卖方，即退还卖方的锁定资金。</span><br><span class="line">    function refundSeller()</span><br><span class="line">        external</span><br><span class="line">        onlySeller</span><br><span class="line">        inState(State.Release)</span><br><span class="line">    &#123;</span><br><span class="line">        emit SellerRefunded();</span><br><span class="line">        // 首先改变状态是很重要的，</span><br><span class="line">        // 否则，使用 `send` 调用的合约可以再次调用这里。</span><br><span class="line">        state = State.Inactive;</span><br><span class="line"></span><br><span class="line">        seller.transfer(3 * value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="微支付通道"><a href="#微支付通道" class="headerlink" title="微支付通道"></a>微支付通道</h2><p>对于没有接触过区块链的人来说应该先看看下面这个通俗的解释来理解一下 【微支付通道】的意思；</p><h3 id="（一）通俗的例子（新人必看）"><a href="#（一）通俗的例子（新人必看）" class="headerlink" title="（一）通俗的例子（新人必看）"></a>（一）通俗的例子（新人必看）</h3><p>比喻场景：你去咖啡店喝咖啡（微支付通道）</p><p>你每天都去同一家咖啡店，点咖啡价格是 <strong>10 元</strong>。</p><p>但是——每次都用区块链支付太慢、太贵（Gas）。<br> 所以你和店主想出一个办法：<strong>先开一个“记账本”</strong>（通道），只在开始和结束时上链，中间的每一杯咖啡都离线结算。</p><hr><h4 id="🪙-第一步：开通通道（上链）"><a href="#🪙-第一步：开通通道（上链）" class="headerlink" title="🪙 第一步：开通通道（上链）"></a>🪙 第一步：开通通道（上链）</h4><p>你和咖啡店老板在区块链上签了一个“合约”：</p><blockquote><p>「我先在合约里存 100 元，代表我未来最多能喝 10 杯咖啡。」</p></blockquote><p>这笔 100 元是<strong>押金</strong>，写进区块链里。</p><hr><h4 id="✍️-第二步：离线签名（离链支付）"><a href="#✍️-第二步：离线签名（离链支付）" class="headerlink" title="✍️ 第二步：离线签名（离链支付）"></a>✍️ 第二步：离线签名（离链支付）</h4><p>你喝第一杯咖啡。<br> 老板要你“签个字”表示「我承认这杯咖啡花了 10 元」。</p><p>于是你写了一张<strong>签署的凭证</strong>：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我（客户）同意支付老板<span class="number"> 10 </span>元。</span><br><span class="line">签名：Yushao</span><br></pre></td></tr></table></figure><blockquote><p>这张“签名凭证”不需要上链，只存在你和老板之间。</p></blockquote><p>喝第二杯时，你再写：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我同意支付老板<span class="number"> 20 </span>元。</span><br><span class="line">签名：Yushao</span><br></pre></td></tr></table></figure><p>表示：<strong>截止目前</strong>我欠他 20 元（累计的）。</p><blockquote><p>如果要加上一些复杂的参数来组装出签名的内容</p></blockquote><blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我欠 老板张三（recipient）的 钱（amount）是 20 元，</span><br><span class="line">凭证编号（nonce）是 3，</span><br><span class="line">这份凭证属于 合同号 #AABBCC（contractAddress）</span><br><span class="line">签名：Yushao</span><br></pre></td></tr></table></figure></blockquote><hr><h4 id="🔐-“签署内容”到底是什么？"><a href="#🔐-“签署内容”到底是什么？" class="headerlink" title="🔐 “签署内容”到底是什么？"></a>🔐 “签署内容”到底是什么？</h4><p>签署的不是“文字”，而是一段数据的哈希。<br> 但你可以把它理解成是对这句话签名：</p><blockquote><p>“如果这张单据（余额&#x3D;20元）是我签的，那我确实授权支付这么多。”</p></blockquote><p>老板收到后，他自己不能改成“余额&#x3D;30元”，因为那会导致签名验证失败。</p><p>✅ <strong>签名证明了你确实说过这句话。</strong></p><hr><h4 id="💡-第三步：通道结算（上链一次）"><a href="#💡-第三步：通道结算（上链一次）" class="headerlink" title="💡 第三步：通道结算（上链一次）"></a>💡 第三步：通道结算（上链一次）</h4><p>当你喝完最后一杯、或者不想继续喝了，<br> 老板把你最后一张“签名凭证”拿去链上：</p><blockquote><p>「链上合约，请根据这份签名支付我 50 元。」</p></blockquote><p>合约验证签名确实是你的 → 给老板转 50 元 → 把剩下的 50 元还你。<br> 整个过程中，<strong>只有两次上链</strong>：</p><ol><li>开通通道（存钱）</li><li>关闭通道（结算）</li></ol><p>中间那 10 次离线签名都没花 Gas。</p><h3 id="（二）官网的例子"><a href="#（二）官网的例子" class="headerlink" title="（二）官网的例子"></a>（二）官网的例子</h3><p>例子中使用加密签名，使以太币在同一当事人之间的重复转移变得安全、即时，并且没有交易费用。 </p><p>Alice想发送一些以太给Bob， 即Alice是发送方，Bob是接收方。</p><p>Alice 只需要在链下发送经过加密签名的信息 (例如通过电子邮件)给Bob，它类似于写支票。</p><p>Alice和Bob使用签名来授权交易，这在以太坊的智能合约中是可以实现的。 Alice将建立一个简单的智能合约，让她传输以太币，但她不会自己调用一个函数来启动付款， 而是让Bob来做，从而支付交易费用。</p><p>该合约将按以下方式运作：</p><ul><li><p>Alice部署了 ReceiverPays 合约，附加了足够的以太币来支付将要进行的付款。</p></li><li><p>Alice通过用她的私钥签署一个消息来授权付款。</p></li><li><p>Alice将经过加密签名的信息发送给Bob。该信息不需要保密（后面会解释），而且发送机制也不重要。</p></li><li><p>Bob通过向智能合约发送签名的信息来索取他的付款，合约验证了信息的真实性，然后释放资金。</p></li></ul><h4 id="创建签名"><a href="#创建签名" class="headerlink" title="创建签名"></a>创建签名</h4><p>Alice不需要与以太坊网络交互来签署交易，这个过程是完全离线的。 我们将使用 <a href="https://github.com/web3/web3.js">web3.js</a> 和 <a href="https://metamask.io/">MetaMask</a> 在浏览器中签署信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 先进行哈希运算使事情变得更容易</span></span><br><span class="line"><span class="keyword">var</span> hash = web3.<span class="property">utils</span>.<span class="title function_">sha3</span>(<span class="string">&quot;message to sign&quot;</span>);</span><br><span class="line">web3.<span class="property">eth</span>.<span class="property">personal</span>.<span class="title function_">sign</span>(hash, web3.<span class="property">eth</span>.<span class="property">defaultAccount</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Signed&quot;</span>); &#125;);</span><br><span class="line"><span class="comment">/// web3.eth.personal.sign 把信息的长度加到签名数据中。 （这里是 web3.eth.defaultAccount）对 hash 进行签名。personal.sign 是 JSON-RPC personal_sign 的封装。签名会返回一个 signature（通常在 callback 的参数中），这里示例只打印 “Signed”。</span></span><br></pre></td></tr></table></figure><h4 id="签署内容"><a href="#签署内容" class="headerlink" title="签署内容"></a>签署内容</h4><p>对于履行付款的合约，签署的信息必须包括：</p><blockquote><ol><li>收件人的钱包地址。</li><li>要转移的金额。</li><li>重放攻击的保护。</li></ol></blockquote><p>重放攻击是指一个已签署的信息被重复使用，以获得对第二次交易的授权。 为了避免重放攻击，我们使用与以太坊交易本身相同的技术， 即所谓的nonce，它是一个账户发送的交易数量。 智能合约会检查一个nonce是否被多次使用。</p><p>另一种类型的重放攻击可能发生在所有者部署 <code>ReceiverPays</code> 合约时， 先进行了一些支付，然后销毁该合约。后来， 他们决定再次部署 <code>RecipientPays</code> 合约， 但新的合约不知道以前合约中使用的nonces，所以攻击者可以再次使用旧的信息。</p><h4 id="组装参数"><a href="#组装参数" class="headerlink" title="组装参数"></a>组装参数</h4><p>既然我们已经确定了要在签名信息中包含哪些信息， 我们准备把信息放在一起，进行哈希运算，然后签名。 简单起见，我们把数据连接起来。 <a href="https://github.com/ethereumjs/ethereumjs-abi">ethereumjs-abi</a> 库提供了一个名为 <code>soliditySHA3</code> 的函数， 模仿Solidity的 <code>keccak256</code> 函数应用于使用 <code>abi.encodePacked</code> 编码的参数的行为。 这里有一个JavaScript函数，为 <code>ReceiverPays</code> 的例子创建了适当的签名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// recipient， 是应该被支付的地址。</span><br><span class="line">// amount，单位是 wei, 指定应该发送多少ether。</span><br><span class="line">// nonce， 可以是任何唯一的数字，以防止重放攻击。</span><br><span class="line">// contractAddress， 用于防止跨合约的重放攻击。</span><br><span class="line">function signPayment(recipient, amount, nonce, contractAddress, callback) &#123;</span><br><span class="line">    var hash = &quot;0x&quot; + abi.soliditySHA3(</span><br><span class="line">        [&quot;address&quot;, &quot;uint256&quot;, &quot;uint256&quot;, &quot;address&quot;],</span><br><span class="line">        [recipient, amount, nonce, contractAddress]</span><br><span class="line">    ).toString(&quot;hex&quot;);</span><br><span class="line"></span><br><span class="line">    web3.eth.personal.sign(hash, web3.eth.defaultAccount, callback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>function signPayment(recipient, amount, nonce, contractAddress, callback) &#123;</code><br> 定义一个用于生成并签名“支付凭证”的函数，最后通过 <code>callback</code> 返回签名（或错误）。</p><p><code>var hash = &quot;0x&quot; + abi.soliditySHA3( ... ).toString(&quot;hex&quot;);</code><br> 这行是关键，分解如下：</p><ul><li><code>abi.soliditySHA3([...types...], [...values...])</code>：<br> 作用是按 <strong>Solidity 的 <code>abi.encodePacked</code> 编码规则</strong> 将值打包，然后对打包后的字节串做 keccak256（solidity 中的 <code>keccak256(abi.encodePacked(...))</code>）。它模仿 Solidity 中的行为，确保 JS 端生成的哈希与 Solidity 合约内预期一致。</li><li><code>.toString(&quot;hex&quot;)</code>：把 <code>abi.soliditySHA3</code> 返回的 Buffer 或二进制结果转为 hex 字符串（不带 <code>0x</code> 前缀）。<code>&quot;0x&quot; + ...</code>：在以太坊生态中，十六进制字符串通常带 <code>0x</code> 前缀，所以这里加上 <code>0x</code>，形成标准的 hex hash 字符串（例如 <code>0xabc123...</code>）。</li><li><code>personal.sign</code> 会<strong>在签名前再次加上 Ethereum 消息前缀</strong>（<code>\x19Ethereum Signed Message:\n$&#123;length&#125;</code>）并将 <code>length</code> 设置为你传入 <code>hash</code> 的长度（如果你传入的是 32 字节 hash，这个 length 是 32，签名的是前缀+32字节内容）。因此，签名者实际签的是 <code>prefixed(hash)</code>，不是“裸哈希”。这导致在合约里直接用 <code>ecrecover</code> 去验证 <code>keccak256(abi.encodePacked(...))</code> 的原始哈希 <strong>不会</strong>与 <code>personal.sign</code> 的签名直接对应，除非你在合约里也做同样的前缀处理（即用 <code>keccak256(&quot;\x19Ethereum Signed Message:\n32&quot; + hash)</code>）来重建签名时的消息摘要。或者，你可以用客户端签 <code>signTypedData</code>（EIP-712）来获得可被合约更方便校验的结构化签名。</li><li>callback 参数通常是 <code>(err, signature) =&gt; &#123; ... &#125;</code>，签名字符串格式通常是 65 字节并编码为 hex（<code>r</code> + <code>s</code> + <code>v</code>）。</li></ul></blockquote><h4 id="在Solidity中恢复信息签名者"><a href="#在Solidity中恢复信息签名者" class="headerlink" title="在Solidity中恢复信息签名者"></a>在Solidity中恢复信息签名者</h4><p>web3.js 产生的签名是 <code>r</code>, <code>s</code> 和 <code>v</code> 的拼接的， 所以第一步是把这些参数分开。您可以在客户端这样做， 但在智能合约内这样做意味着你只需要发送一个签名参数而不是三个。 将一个字节数组分割成它的组成部分是很麻烦的， 所以我们在 <code>splitSignature</code> 函数中使用 <a href="https://docs.soliditylang.org/zh-cn/v0.8.23/assembly.html">inline assembly</a> 完成这项工作（本节末尾的完整合约中的第三个函数）。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: GPL-3.0</span><br><span class="line">pragma solidity &gt;=0.7.0 &lt;0.9.0;</span><br><span class="line">// 这将报告一个由于废弃的 selfdestruct 而产生的警告</span><br><span class="line">contract ReceiverPays &#123;</span><br><span class="line">    address owner = msg.sender;</span><br><span class="line"></span><br><span class="line">    mapping(uint256 =&gt; bool) usedNonces;</span><br><span class="line"></span><br><span class="line">    constructor() payable &#123;&#125;</span><br><span class="line"></span><br><span class="line">    function claimPayment(uint256 amount, uint256 nonce, bytes memory signature) external &#123;</span><br><span class="line">        require(!usedNonces[nonce]);</span><br><span class="line">        usedNonces[nonce] = true;</span><br><span class="line"></span><br><span class="line">        // 这将重新创建在客户端上签名的信息。</span><br><span class="line">        bytes32 message = prefixed(keccak256(abi.encodePacked(msg.sender, amount, nonce, this)));</span><br><span class="line"></span><br><span class="line">        require(recoverSigner(message, signature) == owner);</span><br><span class="line"></span><br><span class="line">        payable(msg.sender).transfer(amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// 销毁合约并收回剩余的资金。</span><br><span class="line">    function shutdown() external &#123;</span><br><span class="line">        require(msg.sender == owner);</span><br><span class="line">        selfdestruct(payable(msg.sender));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// 签名方法。</span><br><span class="line">    function splitSignature(bytes memory sig)</span><br><span class="line">        internal</span><br><span class="line">        pure</span><br><span class="line">        returns (uint8 v, bytes32 r, bytes32 s)</span><br><span class="line">    &#123;</span><br><span class="line">        require(sig.length == 65);</span><br><span class="line"></span><br><span class="line">        assembly &#123;</span><br><span class="line">            // 前32个字节，在长度前缀之后。</span><br><span class="line">            r := mload(add(sig, 32))</span><br><span class="line">            // 第二个32字节。</span><br><span class="line">            s := mload(add(sig, 64))</span><br><span class="line">            // 最后一个字节（下一个32字节的第一个字节）。</span><br><span class="line">            v := byte(0, mload(add(sig, 96)))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return (v, r, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function recoverSigner(bytes32 message, bytes memory sig)</span><br><span class="line">        internal</span><br><span class="line">        pure</span><br><span class="line">        returns (address)</span><br><span class="line">    &#123;</span><br><span class="line">        (uint8 v, bytes32 r, bytes32 s) = splitSignature(sig);</span><br><span class="line"></span><br><span class="line">        return ecrecover(message, v, r, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// 构建一个前缀哈希值，以模仿 eth_sign 的行为。</span><br><span class="line">    function prefixed(bytes32 hash) internal pure returns (bytes32) &#123;</span><br><span class="line">        return keccak256(abi.encodePacked(&quot;\x19Ethereum Signed Message:\n32&quot;, hash));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="区块链" scheme="http://example.com/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
    <category term="solidity" scheme="http://example.com/tags/solidity/"/>
    
  </entry>
  
  <entry>
    <title>撸毛</title>
    <link href="http://example.com/2025/10/03/%E5%8C%BA%E5%9D%97%E9%93%BE/%E6%92%B8%E6%AF%9B/"/>
    <id>http://example.com/2025/10/03/%E5%8C%BA%E5%9D%97%E9%93%BE/%E6%92%B8%E6%AF%9B/</id>
    <published>2025-10-03T03:18:12.000Z</published>
    <updated>2025-10-10T05:51:34.432Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最近撸毛项目例子"><a href="#最近撸毛项目例子" class="headerlink" title="最近撸毛项目例子"></a>最近撸毛项目例子</h1><p>Aster &amp; Plasma</p><p>Aster ；链上永续合约，币安战略方向。</p><p>Plasma  ；usdt发行商泰达，usdt（1730亿刀），70%稳定币市场。</p><p>Plasma ；0手续费转账，泰达自己的链。</p><h1 id="撸毛理论"><a href="#撸毛理论" class="headerlink" title="撸毛理论"></a>撸毛理论</h1><p>交易和支付 盈利来源。</p><h2 id="中心化交易所向去中心化交易所迁移。"><a href="#中心化交易所向去中心化交易所迁移。" class="headerlink" title="中心化交易所向去中心化交易所迁移。"></a>中心化交易所向去中心化交易所迁移。</h2><p><img src="/2025/10/03/%E5%8C%BA%E5%9D%97%E9%93%BE/%E6%92%B8%E6%AF%9B/%E6%88%AA%E5%B1%8F2025-10-03%2011.03.55.png" alt="截屏2025-10-03 11.03.55"></p><p>Apax ；Bybit交易所备胎；</p><p>Bigget交易所okx等也可能发；</p><p>…</p><h2 id="稳定币公链生态"><a href="#稳定币公链生态" class="headerlink" title="稳定币公链生态"></a>稳定币公链生态</h2><p> Tether泰达 支持的 Plasma 、Stable 等公链。plasma 对C端，stable 对B端（企业）</p><p>Circle usdc供应商（613亿刀），不清楚会不会发。</p><p>币安的 base链 可能会和 usdc 联动上。</p><p>PayPal app，推出的稳定币 PYUSD市值已经2.93亿刀。</p><p>…</p><h2 id="机构推动的基础设施项目"><a href="#机构推动的基础设施项目" class="headerlink" title="机构推动的基础设施项目"></a>机构推动的基础设施项目</h2><p>Founders 硅谷风投机构（Paypal创始人一个人），投资了Plasma、Avantis等。所以这个风投机构投的项目可以多关注一下。</p>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="区块链" scheme="http://example.com/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
    <category term="撸毛" scheme="http://example.com/tags/%E6%92%B8%E6%AF%9B/"/>
    
  </entry>
  
  <entry>
    <title>Mac调整盒盖后深度睡眠模式</title>
    <link href="http://example.com/2025/09/23/Mac/Mac%E8%B0%83%E6%95%B4%E7%9B%92%E7%9B%96%E5%90%8E%E6%B7%B1%E5%BA%A6%E7%9D%A1%E7%9C%A0%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2025/09/23/Mac/Mac%E8%B0%83%E6%95%B4%E7%9B%92%E7%9B%96%E5%90%8E%E6%B7%B1%E5%BA%A6%E7%9D%A1%E7%9C%A0%E6%A8%A1%E5%BC%8F/</id>
    <published>2025-09-23T04:08:32.000Z</published>
    <updated>2025-09-28T10:33:08.519Z</updated>
    
    <content type="html"><![CDATA[<p><code>sleepmode.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span> == <span class="string">&quot;fast&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;切换到 快唤醒模式（hibernatemode=3，8小时后才进入深度睡眠，保留唤醒动画）...&quot;</span></span><br><span class="line">    sudo pmset -a hibernatemode 3           <span class="comment"># 普通睡眠+RAM供电，快速唤醒</span></span><br><span class="line">    sudo pmset -a standby 1                 <span class="comment"># 允许深度睡眠</span></span><br><span class="line">    sudo pmset -a standbydelayhigh 28800    <span class="comment"># 高电量延迟 8 小时</span></span><br><span class="line">    sudo pmset -a standbydelaylow 14400     <span class="comment"># 低电量延迟 4 小时</span></span><br><span class="line">    sudo pmset -a highstandbythreshold 50   <span class="comment"># 电量 &gt;50% 用高电量延迟</span></span><br><span class="line">    sudo pmset -a womp 0                    <span class="comment"># 关闭网络唤醒</span></span><br><span class="line">    sudo pmset -a powernap 0                <span class="comment"># 关闭 Power Nap，减少后台任务</span></span><br><span class="line">    sudo pmset -a proximitywake 1           <span class="comment"># 开启接近唤醒，保留唤醒动画</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;✅ 已切换为快唤醒模式（8小时后才进入深度睡眠，低电量4小时才进入深度睡眠）&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span> == <span class="string">&quot;save&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;切换到 省电深度睡眠模式（hibernatemode=25）...&quot;</span></span><br><span class="line">    sudo pmset -a hibernatemode 25</span><br><span class="line">    sudo pmset -a standby 0</span><br><span class="line">    sudo pmset -a autopoweroff 0</span><br><span class="line">    sudo pmset -a womp 0</span><br><span class="line">    sudo pmset -a powernap 0</span><br><span class="line">    sudo pmset -a proximitywake 0</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;✅ 已切换为省电深度睡眠模式&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span> == <span class="string">&quot;restore&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;恢复到 macOS 出厂默认盒盖睡眠设置...&quot;</span></span><br><span class="line">    sudo pmset -a hibernatemode 3</span><br><span class="line">    sudo pmset -a standby 1</span><br><span class="line">    sudo pmset -a standbydelayhigh 86400</span><br><span class="line">    sudo pmset -a standbydelaylow 10800</span><br><span class="line">    sudo pmset -a highstandbythreshold 50</span><br><span class="line">    sudo pmset -a autopoweroff 1</span><br><span class="line">    sudo pmset -a autopoweroffdelay 28800</span><br><span class="line">    sudo pmset -a womp 1</span><br><span class="line">    sudo pmset -a powernap 1</span><br><span class="line">    sudo pmset -a proximitywake 1</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;✅ 已恢复为 macOS 默认设置&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;用法: &quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;  ./sleepmode.sh fast     # 快唤醒模式&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;  ./sleepmode.sh save     # 省电深度睡眠模式&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;  ./sleepmode.sh restore  # 恢复 macOS 默认合盖睡眠设置&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="Mac" scheme="http://example.com/categories/Mac/"/>
    
    
    <category term="Mac" scheme="http://example.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu vs. CentOS\RHEL 密码重置流程对比</title>
    <link href="http://example.com/2025/09/13/Linux%E5%AD%A6%E4%B9%A0/Ubuntu%20vs.%20CentOSRHEL%20%E5%AF%86%E7%A0%81%E9%87%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%E5%AF%B9%E6%AF%94/"/>
    <id>http://example.com/2025/09/13/Linux%E5%AD%A6%E4%B9%A0/Ubuntu%20vs.%20CentOSRHEL%20%E5%AF%86%E7%A0%81%E9%87%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%E5%AF%B9%E6%AF%94/</id>
    <published>2025-09-13T15:28:18.000Z</published>
    <updated>2025-09-28T10:33:08.518Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Ubuntu-vs-CentOS-x2F-RHEL-密码重置"><a href="#Ubuntu-vs-CentOS-x2F-RHEL-密码重置" class="headerlink" title="Ubuntu vs. CentOS&#x2F;RHEL 密码重置"></a>Ubuntu vs. CentOS&#x2F;RHEL 密码重置</h3><p>流程对比</p><table><thead><tr><th>步骤</th><th>CentOS &#x2F; RHEL</th><th>Ubuntu（推荐方法）</th><th>作用说明</th></tr></thead><tbody><tr><td><strong>1. 进入 GRUB</strong></td><td>Esc 按 <strong>e</strong> 编辑启动参数</td><td>Esc 按 <strong>e</strong> 编辑启动参数</td><td>打开启动菜单，进入内核参数编辑模式</td></tr><tr><td><strong>2. 修改参数</strong></td><td>在 <code>linux16</code> 行尾加 <code>rw init=/bin/bash</code></td><td>在 <code>linux</code> 行尾替换 <code>quiet splash</code> 为 <code>rw init=/bin/bash</code></td><td>让系统以 <strong>单用户模式 + 可写根目录</strong> 启动，进入 bash</td></tr><tr><td><strong>3. 挂载根目录</strong></td><td><code>mount -o remount,rw /</code></td><td><code>mount -o remount,rw /</code>（通常已可写，但最好执行）</td><td>确保根目录有写权限，否则不能改密码</td></tr><tr><td><strong>4. 核心操作</strong></td><td><code>passwd</code>（直接改 root 密码）</td><td><code>passwd 用户名</code>（修改普通用户密码）</td><td>修改目标账户的密码（CentOS 默认 root 可用；Ubuntu 默认 root 禁用）</td></tr><tr><td><strong>5. SELinux</strong></td><td><code>touch /.autorelabel</code>（必须）</td><td>不需要（Ubuntu 默认无 SELinux）</td><td>触发系统重新标记文件安全上下文，避免登录失败</td></tr><tr><td><strong>6. 重启</strong></td><td><code>exec /sbin/init</code> 或 <code>reboot -f</code></td><td><code>exec /sbin/init</code> 或 <code>reboot -f</code></td><td>退出恢复模式，重新正常启动系统</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="centos" scheme="http://example.com/tags/centos/"/>
    
    <category term="ubuntu" scheme="http://example.com/tags/ubuntu/"/>
    
    <category term="密码" scheme="http://example.com/tags/%E5%AF%86%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>党建agent编写</title>
    <link href="http://example.com/2025/09/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%85%9A%E5%BB%BAagent%E7%BC%96%E5%86%99/"/>
    <id>http://example.com/2025/09/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%85%9A%E5%BB%BAagent%E7%BC%96%E5%86%99/</id>
    <published>2025-09-12T04:02:12.000Z</published>
    <updated>2025-09-12T01:48:49.626Z</updated>
    
    <content type="html"><![CDATA[<h1 id="固定提示词写法（稳且呆）"><a href="#固定提示词写法（稳且呆）" class="headerlink" title="固定提示词写法（稳且呆）"></a>固定提示词写法（稳且呆）</h1><p>工作流里有 <strong>4 个 LLM 节点</strong></p><p><strong>（模版提取 → 初稿撰写 → 针对性优化 → 最终整合）</strong></p><p>传入文件有 三个：</p><p>1、模版文件</p><p>2、案例文件</p><p>3、我的工作内容文件</p><h2 id="模版提取"><a href="#模版提取" class="headerlink" title="模版提取"></a>模版提取</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Instruction</span></span><br><span class="line">从给定的&#123;&#123;#1756694873908.template<span class="emphasis">_file#&#125;&#125;编写格式中准确提取各信息字段，并依照原结构转换为 Markdown 模版。</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">## Role：党建文件格式分析专家</span></span><br><span class="line"><span class="emphasis">你是一位党建学习领域的专家，特别擅长分析文件与总结规范格式。</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">## Attention</span></span><br><span class="line"><span class="emphasis">- 1. 要确保对模板中的所有信息字段都仔细甄别，防止遗漏重要字段。</span></span><br><span class="line"><span class="emphasis">- 2. 严格按照原模板&#123;&#123;#1756694873908.template_</span>file#&#125;&#125;的层级结构来组织输出信息。</span><br><span class="line"><span class="bullet">-</span> 3. 只需要输出信息字段，不要具体内容，切记！！！</span><br><span class="line"></span><br><span class="line"><span class="section">## OutputFormat</span></span><br><span class="line"><span class="section">## 读后感</span></span><br><span class="line"><span class="section">## 问题查摆</span></span><br><span class="line"><span class="bullet">-</span> 带头严守政治纪律和政治规矩，维护党的团结统一</span><br><span class="line"><span class="bullet">-</span> 带头增强党性、严守纪律、砥砺作风</span><br><span class="line"><span class="bullet">-</span> 带头在遵守纪律、清正廉洁前提下勇于担责、敢于创新</span><br><span class="line"><span class="bullet">-</span> 带头履行全面从严治党政治责任</span><br><span class="line"><span class="section">## 原因分析</span></span><br><span class="line"><span class="bullet">-</span> 理论学习深度不足</span><br><span class="line"><span class="bullet">-</span> 自我约束和自我监督能力欠缺</span><br><span class="line"><span class="bullet">-</span> 工作态度不够端正</span><br><span class="line"><span class="bullet">-</span> 责任意识淡薄</span><br><span class="line"><span class="section">## 案例分析</span></span><br><span class="line"><span class="section">## 整改措施</span></span><br><span class="line"><span class="bullet">-</span> 严守政治纪律和政治规矩，维护党的团结统一</span><br><span class="line"><span class="bullet">-</span> 增强党性、严守纪律、砥砺作风</span><br><span class="line"><span class="bullet">-</span> 在遵规守纪、清正廉洁前提下勇于担责、敢于创新</span><br><span class="line"><span class="bullet">-</span> 履行全面从严治党政治责任</span><br></pre></td></tr></table></figure><h2 id="初稿撰写"><a href="#初稿撰写" class="headerlink" title="初稿撰写"></a>初稿撰写</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Instruction</span></span><br><span class="line">根据党建文件&#123;&#123;#1756694873908.case<span class="emphasis">_file#&#125;&#125;案例内容，结合读后感模版，撰写一篇规范的读后感。</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">## Role：优秀党建学习示范者</span></span><br><span class="line"><span class="emphasis">你是一位认真学习党建文件的模范党员，能够结合自身工作与思想实际写出深刻的感悟。</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">## Attention</span></span><br><span class="line"><span class="emphasis">1. 内容必须紧扣党建文件与警示案例，不能空泛。</span></span><br><span class="line"><span class="emphasis">2. 每个段落严格按照模版要求展开。</span></span><br><span class="line"><span class="emphasis">3. 不得出现“&lt;!-- --&gt;”注释符号。</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">## OutputFormat</span></span><br><span class="line"><span class="emphasis">## 读后感</span></span><br><span class="line"><span class="emphasis">## 问题查摆</span></span><br><span class="line"><span class="emphasis">- 带头严守政治纪律和政治规矩，维护党的团结统一 &lt;!-- 写出在政治立场、执行上级指令、信息传播管理等方面存在的问题，要体现具体事例或工作场景 --&gt;</span></span><br><span class="line"><span class="emphasis">- 带头增强党性、严守纪律、砥砺作风 &lt;!-- 结合日常学习和工作表现，指出党性修养不够坚定、纪律执行不严格、工作作风不扎实的地方 --&gt;</span></span><br><span class="line"><span class="emphasis">- 带头在遵守纪律、清正廉洁前提下勇于担责、敢于创新 &lt;!-- 说明在面对新任务或新挑战时，存在回避责任、缺乏创新精神的情况，要举实际例子 --&gt;</span></span><br><span class="line"><span class="emphasis">- 带头履行全面从严治党政治责任 &lt;!-- 说明在监督管理、落实责任、发现问题整改等方面存在的薄弱环节或形式主义现象 --&gt;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">## 原因分析</span></span><br><span class="line"><span class="emphasis">- 理论学习深度不足 &lt;!-- 写出学习停留在表面、缺乏系统性与深度，导致思想认识不足，联系实际不紧密 --&gt;</span></span><br><span class="line"><span class="emphasis">- 自我约束和自我监督能力欠缺 &lt;!-- 说明缺乏自律精神，无人监督时容易松懈，执行制度不到位 --&gt;</span></span><br><span class="line"><span class="emphasis">- 工作态度不够端正 &lt;!-- 结合工作场景，写出存在应付差事、拖延、侥幸心理的具体表现 --&gt;</span></span><br><span class="line"><span class="emphasis">- 责任意识淡薄 &lt;!-- 写出在履行岗位职责、落实党建责任时存在被动应付、缺乏主动作为的情况 --&gt;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">## 案例分析</span></span><br><span class="line"><span class="emphasis">&lt;!-- 结合文件提供的警示案例文件&#123;&#123;#1756694873908.case_</span>file#&#125;&#125;，分析案例人物违纪违法的根源和危害，并联系自身岗位风险点，写出警示教育作用 --&gt;</span><br><span class="line"></span><br><span class="line"><span class="section">## 整改措施</span></span><br><span class="line"><span class="bullet">-</span> 严守政治纪律和政治规矩，维护党的团结统一 &lt;!-- 提出具体措施，如加强理论学习、严格执行信息发布审核、提高政治敏锐性 --&gt;</span><br><span class="line"><span class="bullet">-</span> 增强党性、严守纪律、砥砺作风 &lt;!-- 提出改进计划，如开展党性教育、加强自我约束、提高工作作风的严谨性 --&gt;</span><br><span class="line"><span class="bullet">-</span> 在遵规守纪、清正廉洁前提下勇于担责、敢于创新 &lt;!-- 写出克服畏难情绪、主动承担责任、探索新方法新技术的举措 --&gt;</span><br><span class="line"><span class="bullet">-</span> 履行全面从严治党政治责任 &lt;!-- 提出建立监督机制、健全防范措施、开展廉政教育等具体做法 --&gt;</span><br></pre></td></tr></table></figure><h2 id="针对性优化"><a href="#针对性优化" class="headerlink" title="针对性优化"></a>针对性优化</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Instruction</span></span><br><span class="line">对前期生成的读后感中不够详实的部分，结合案例&#123;&#123;#1756694873908.case<span class="emphasis">_file#&#125;&#125;与个人工作内容&#123;&#123;#1756694873908.my_</span>work#&#125;&#125;，对案例分析和整改措施进行扩展与优化。</span><br><span class="line"></span><br><span class="line"><span class="section">## Role：党员个人信息档案提供者</span></span><br><span class="line">你是一位基层党员，能够全面提供个人的背景与工作经历，以帮助撰写更有针对性的读后感。</span><br><span class="line"></span><br><span class="line"><span class="section">## Attention</span></span><br><span class="line"><span class="bullet">1.</span> 必须紧密结合党建案例文件和个人工作内容。</span><br><span class="line"><span class="bullet">2.</span> 扩展部分要具体，避免空洞表述。</span><br><span class="line"><span class="bullet">3.</span> 输出为补充优化段落，不是完整读后感。</span><br><span class="line"></span><br><span class="line"><span class="section">## OutputFormat</span></span><br><span class="line"><span class="section">## 案例分析</span></span><br><span class="line">&lt;!-- 请结合所提供的警示案例材料&#123;&#123;#1756694873908.case<span class="emphasis">_file#&#125;&#125;，剖析案例人物在思想、作风、纪律等方面滑坡的原因，总结其造成的严重后果，并对照自身岗位职责，提炼出可警示和借鉴的启示 --&gt;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">## 整改措施&lt;!-- 围绕文件&#123;&#123;#1756694873908.my_</span>work#&#125;&#125;的个人工作内容展开 --&gt;</span><br><span class="line"><span class="bullet">-</span> 严守政治纪律和政治规矩，维护党的团结统一 &lt;!-- 从制度落实、责任传导、日常警觉性等角度，提出防止松懈和违规的改进办法，不得自己瞎编内容，不得出现具体数据，不得涉及高校工作外的内容。 --&gt;</span><br><span class="line"><span class="bullet">-</span> 增强党性、严守纪律、砥砺作风 &lt;!-- 强调长期坚持党性修炼，规范日常行为，强化执行力，杜绝形式主义和松散作风，不得自己瞎编内容，不得出现具体数据，不得涉及高校工作外的内容。 --&gt;</span><br><span class="line"><span class="bullet">-</span> 在遵规守纪、清正廉洁前提下勇于担责、敢于创新 &lt;!-- 结合实际工作挑战，说明如何提升担当意识，主动迎接困难，并探索创新突破的路径，不得自己瞎编内容，不得出现具体数据，不得涉及高校工作外的内容。 --&gt;</span><br><span class="line"><span class="bullet">-</span> 履行全面从严治党政治责任 &lt;!-- 结合岗位职责，提出如何完善监督链条，压实责任，加强风险防控和教育引导，不得自己瞎编内容，不得出现具体数据，不得涉及高校工作外的内容。 --&gt;</span><br></pre></td></tr></table></figure><h2 id="最终整合"><a href="#最终整合" class="headerlink" title="最终整合"></a>最终整合</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Instruction</span></span><br><span class="line">将初次撰写的读后感&#123;&#123;#1756724253021.text#&#125;&#125;与优化补充部分&#123;&#123;#1756726350157.text#&#125;&#125;整合，形成一篇完整、深入的最终版读后感。</span><br><span class="line"></span><br><span class="line"><span class="section">## Role：党建读后感整合专家</span></span><br><span class="line">你是一位党建写作专家，擅长对不同版本进行整合优化，确保逻辑连贯、思想深刻。</span><br><span class="line"></span><br><span class="line"><span class="section">## Attention</span></span><br><span class="line"><span class="bullet">1.</span> 整合时要保证结构统一，避免重复。</span><br><span class="line"><span class="bullet">2.</span> 将相同章节的内容补充部分自然融入初稿。</span><br><span class="line"><span class="bullet">3.</span> 最终文本必须完整、流畅、可直接使用。</span><br></pre></td></tr></table></figure><h1 id="生成式提示词写法"><a href="#生成式提示词写法" class="headerlink" title="生成式提示词写法"></a>生成式提示词写法</h1><p>工作流里有 <strong>5 个 LLM 节点</strong></p><p><strong>（用户输入markdown模版格式 → 提示词生成器（针对初稿撰写）→ 初稿撰写 →提示词生成器（针对性优化） → 针对性优化 → 提示词生成器（针对最终整合）→ 最终整合）</strong></p><p>传入文件有 四个：</p><p>1、案例文件 （必填）</p><p>2、我的工作内容文件 （必填）</p><p>3、模版格式 （必填）</p><p>4、强化章节 （选填）</p><h2 id="工作流步骤详解"><a href="#工作流步骤详解" class="headerlink" title="工作流步骤详解"></a>工作流步骤详解</h2><blockquote><p>先提示一下，dify 这样的工作流 通过html 的一些渲染，会导致 注释词 &lt;!- XXXXXXX –&gt; 在输出给用户看的时候是看不见的，但是实际上是存在的。而我们了 让用户看见 这些注释词，在代码块中用正则表达式处理了一下，不过实际上我保留了两个版本，用的还是原版的注释词 &lt;!- XXXXXXX –&gt; 输出，呈现给用户看单独搞了一个版本</p></blockquote><h3 id="获取案例文件和个人工作内容。"><a href="#获取案例文件和个人工作内容。" class="headerlink" title="获取案例文件和个人工作内容。"></a>获取案例文件和个人工作内容。</h3><p><img src="/2025/09/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%85%9A%E5%BB%BAagent%E7%BC%96%E5%86%99/623e55bc-5073-45fc-ad53-620d3b705e84.png" alt="623e55bc-5073-45fc-ad53-620d3b705e84"></p><h3 id="提取上传文件文字内容"><a href="#提取上传文件文字内容" class="headerlink" title="提取上传文件文字内容"></a>提取上传文件文字内容</h3><p><img src="/2025/09/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%85%9A%E5%BB%BAagent%E7%BC%96%E5%86%99/29f783f9-4fc7-4571-880e-a1941f0a854e.png" alt="29f783f9-4fc7-4571-880e-a1941f0a854e"></p><h3 id="提示词生成器（针对初稿撰写）"><a href="#提示词生成器（针对初稿撰写）" class="headerlink" title="提示词生成器（针对初稿撰写）"></a>提示词生成器（针对初稿撰写）</h3><p><img src="/2025/09/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%85%9A%E5%BB%BAagent%E7%BC%96%E5%86%99/e11f12c2-66c0-47ce-b1c6-3eddf6ffc9d0.png" alt="e11f12c2-66c0-47ce-b1c6-3eddf6ffc9d0"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Instruction</span></span><br><span class="line">你将收到一份用户输入的 Markdown 大纲。  </span><br><span class="line">你的任务是：<span class="strong">**在保持大纲结构和文字完全不变的前提下**</span>，在每个标题或小标题后补充一个 <span class="code">`&lt;!-- --&gt;`</span> 注释。  </span><br><span class="line"></span><br><span class="line"><span class="section">## 要求</span></span><br><span class="line"><span class="bullet">-</span> 不得改动用户输入的任何标题文字、层级、顺序。  </span><br><span class="line"><span class="bullet">-</span> 每一条标题或小标题都必须有对应的 <span class="code">`&lt;!-- --&gt;`</span> 注释。   </span><br><span class="line"><span class="bullet">-</span> 注释内容要简洁、指令化，指导后续写作。  </span><br><span class="line"><span class="bullet">-</span> 注释内容必须与党建写作相关（如政治纪律、党性修养、责任担当、整改措施等）与案例&#123;&#123;#1756819593861.text#&#125;&#125;相关，与工作内容&#123;&#123;#1756819649172.text#&#125;&#125;尽可能关联上，并结合高校教职工的实际工作语境。  </span><br><span class="line"><span class="bullet">-</span> 输出仍然是 Markdown 格式。  </span><br><span class="line"></span><br><span class="line"><span class="section">## Input</span></span><br><span class="line">&#123;&#123;#1756805697432.template#&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">## OutputFormat</span></span><br><span class="line">在用户输入的大纲基础上，逐条补充注释，示例如下：</span><br><span class="line">带头严守政治纪律和政治规矩，维护党的团结统一</span><br><span class="line">改为：带头严守政治纪律和政治规矩，维护党的团结统一&lt;!-- 写出在政治纪律执行和信息传播管理方面存在的不足，结合高校岗位场景 --&gt;</span><br></pre></td></tr></table></figure><h3 id="去除think部分"><a href="#去除think部分" class="headerlink" title="去除think部分"></a>去除think部分</h3><p><img src="/2025/09/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%85%9A%E5%BB%BAagent%E7%BC%96%E5%86%99/80fb41af-50ab-43ca-af1e-b8d8a858beef.png" alt="80fb41af-50ab-43ca-af1e-b8d8a858beef"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">prompt: <span class="built_in">str</span> = <span class="string">&quot;&quot;</span></span>) -&gt; <span class="built_in">dict</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">remove_think</span>(<span class="params">text: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> text:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> re.sub(<span class="string">r&quot;&lt;think&gt;.*?&lt;/think&gt;&quot;</span>, <span class="string">&quot;&quot;</span>, text, flags=re.DOTALL)</span><br><span class="line"></span><br><span class="line">        prompt_clean_think = remove_think(prompt)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&quot;result&quot;</span>: <span class="string">&quot;处理成功&quot;</span>,</span><br><span class="line">            <span class="string">&quot;prompt_clean_think&quot;</span>: prompt_clean_think.strip(),</span><br><span class="line">            <span class="string">&quot;error&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 出错时不要 raise，直接返回</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&quot;result&quot;</span>: <span class="string">&quot;error&quot;</span>,   <span class="comment"># � 保证有输出字段</span></span><br><span class="line">            <span class="string">&quot;prompt_clean_think&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;error&quot;</span>: <span class="string">f&quot;处理出错：<span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>，请重新输入&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="初稿撰写-1"><a href="#初稿撰写-1" class="headerlink" title="初稿撰写"></a>初稿撰写</h3><p><img src="/2025/09/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%85%9A%E5%BB%BAagent%E7%BC%96%E5%86%99/a5de9e06-e4de-4d27-8dba-f530de553314.png" alt="a5de9e06-e4de-4d27-8dba-f530de553314"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Instruction</span></span><br><span class="line">你将接收到一个已经补充了 `&lt;!-- --&gt;` 注释的 Markdown 大纲&#123;&#123;<span class="comment">#1757401610434.prompt_clean_think#&#125;&#125;。  </span></span><br><span class="line">请严格按照大纲的层级和顺序，展开撰写一篇规范的党建读后感文章。  </span><br><span class="line"></span><br><span class="line"><span class="comment">## Role：优秀党建学习示范者</span></span><br><span class="line">你是一位认真学习党建文件的模范党员，能够结合自身工作与思想实际写出深刻的感悟。</span><br><span class="line"></span><br><span class="line"><span class="comment">## Attention</span></span><br><span class="line">- 每个 `&lt;!-- --&gt;` 注释代表对应部分的写作指令，你必须完全吸收并落实其中的要求。  </span><br><span class="line">- 最终输出中 **不能出现 `&lt;!-- --&gt;` 注释**，而是要将其转化为具体的内容。  </span><br><span class="line">- 内容必须紧扣党建文件案例和高校教职工的实际工作语境，避免空泛套话。  </span><br><span class="line">- 文章要有层次感，每个部分展开 <span class="number">2</span>-<span class="number">4</span> 段，既有思想剖析，也有具体措施。  </span><br><span class="line">- 内容必须紧扣党建案例文件内容&#123;&#123;<span class="comment">#1756819593861.text#&#125;&#125;，不能空泛。  </span></span><br><span class="line">- 要结合本人高校教职工岗位特点&#123;&#123;<span class="comment">#1756819649172.text#&#125;&#125;。 </span></span><br><span class="line">- 章节标题与大纲中一模一样，一个字不改。</span><br><span class="line"></span><br><span class="line"><span class="comment">## OutputFormat</span></span><br><span class="line">直接输出 Markdown 格式文章，结构必须与输入大纲&#123;&#123;<span class="comment">#1757401610434.prompt_clean_think#&#125;&#125;完全保持一致，但正文内容要根据注释展开。  </span></span><br></pre></td></tr></table></figure><h3 id="去除think部分并调整注释格式"><a href="#去除think部分并调整注释格式" class="headerlink" title="去除think部分并调整注释格式"></a>去除think部分并调整注释格式</h3><p><img src="/2025/09/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%85%9A%E5%BB%BAagent%E7%BC%96%E5%86%99/4165685d-3ec3-4ea4-a35a-b45efa0d0098.png" alt="4165685d-3ec3-4ea4-a35a-b45efa0d0098"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">arg1: <span class="built_in">str</span> = <span class="string">&quot;&quot;</span>, arg2: <span class="built_in">str</span> = <span class="string">&quot;&quot;</span></span>) -&gt; <span class="built_in">dict</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">remove_think</span>(<span class="params">text: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> text:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> re.sub(<span class="string">r&quot;&lt;think&gt;.*?&lt;/think&gt;&quot;</span>, <span class="string">&quot;&quot;</span>, text, flags=re.DOTALL)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">unhide_comment</span>(<span class="params">text: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> text:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="comment"># 用正则匹配 &lt;!-- 任意内容 --&gt; 并替换成 【内容】</span></span><br><span class="line">            <span class="keyword">return</span> re.sub(<span class="string">r&#x27;&lt;!--\s*(.*?)\s*--&gt;&#x27;</span>, <span class="string">r&#x27; 【注释：\1】&#x27;</span>, text)</span><br><span class="line"></span><br><span class="line">        prompt_clean = unhide_comment(remove_think(arg1))</span><br><span class="line">        <span class="comment"># arg2_clean = unhide_comment(remove_think(arg2))</span></span><br><span class="line">        <span class="comment"># arg1_clean = remove_think(arg1)</span></span><br><span class="line">        draft_clean = remove_think(arg2)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># � 必须有至少一个 result 或自定义 key</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&quot;result&quot;</span>: <span class="string">&quot;处理成功&quot;</span>,</span><br><span class="line">            <span class="string">&quot;prompt_clean&quot;</span>: prompt_clean.strip(),</span><br><span class="line">            <span class="string">&quot;draft_clean&quot;</span>: draft_clean.strip(),</span><br><span class="line">            <span class="string">&quot;error&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 出错时不要 raise，直接返回</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&quot;result&quot;</span>: <span class="string">&quot;error&quot;</span>,   <span class="comment"># � 保证有输出字段</span></span><br><span class="line">            <span class="string">&quot;prompt_clean&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;draft_clean&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;error&quot;</span>: <span class="string">f&quot;处理出错：<span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>，请重新输入&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="规范化输出样式"><a href="#规范化输出样式" class="headerlink" title="规范化输出样式"></a>规范化输出样式</h3><p><img src="/2025/09/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%85%9A%E5%BB%BAagent%E7%BC%96%E5%86%99/3503456e-bed8-430c-b1c6-cf1c91843ca4.png" alt="3503456e-bed8-430c-b1c6-cf1c91843ca4"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;# 生成的提示词</span><br><span class="line">&#123;&#123; prompt<span class="emphasis">_clean &#125;&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"># ---------------------------</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&gt;# 生成的初稿</span></span><br><span class="line"><span class="emphasis">&#123;&#123; draft_</span>clean &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="查看是否需要-针对性优化章节"><a href="#查看是否需要-针对性优化章节" class="headerlink" title="查看是否需要 针对性优化章节"></a>查看是否需要 针对性优化章节</h3><p><img src="/2025/09/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%85%9A%E5%BB%BAagent%E7%BC%96%E5%86%99/1a14791e-62a9-4f02-bf8b-e2cfc9ab0dd7.png" alt="1a14791e-62a9-4f02-bf8b-e2cfc9ab0dd7"></p><h3 id="输出-提示词和初稿"><a href="#输出-提示词和初稿" class="headerlink" title="输出 提示词和初稿"></a>输出 提示词和初稿</h3><p><img src="/2025/09/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%85%9A%E5%BB%BAagent%E7%BC%96%E5%86%99/c18eb1fa-61a2-4b59-adfd-af67669ec09b.png" alt="c18eb1fa-61a2-4b59-adfd-af67669ec09b"></p><h3 id="提示词生成器（针对性强化章节）"><a href="#提示词生成器（针对性强化章节）" class="headerlink" title="提示词生成器（针对性强化章节）"></a>提示词生成器（针对性强化章节）</h3><p><img src="/2025/09/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%85%9A%E5%BB%BAagent%E7%BC%96%E5%86%99/0032cfef-ad43-488d-9bf8-ab73043fce3e.png" alt="0032cfef-ad43-488d-9bf8-ab73043fce3e"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Instruction</span></span><br><span class="line">你将收到一份用户输入的 Markdown 大纲。  </span><br><span class="line">你的任务是：<span class="strong">**在保持大纲结构和文字完全不变的前提下**</span>，在每个标题或小标题后补充一个 <span class="code">`&lt;!-- --&gt;`</span> 注释。  </span><br><span class="line"></span><br><span class="line"><span class="section">## 要求</span></span><br><span class="line"><span class="bullet">-</span> 不得改动用户输入的任何标题文字、层级、顺序。  </span><br><span class="line"><span class="bullet">-</span> 每一条标题或小标题都必须有对应的 <span class="code">`&lt;!-- --&gt;`</span> 注释。   </span><br><span class="line"><span class="bullet">-</span> 注释内容要简洁、指令化，指导后续写作。  </span><br><span class="line"><span class="bullet">-</span> 注释内容必须与党建写作相关（如政治纪律、党性修养、责任担当、整改措施等）与案例&#123;&#123;#1756819593861.text#&#125;&#125;相关，与工作内容&#123;&#123;#1756819649172.text#&#125;&#125;尽可能关联上，并结合高校教职工的实际工作语境。  </span><br><span class="line"><span class="bullet">-</span> 输出仍然是 Markdown 格式。  </span><br><span class="line"></span><br><span class="line"><span class="section">## Input</span></span><br><span class="line">&#123;&#123;#1756805697432.fortify<span class="emphasis">_chapter#&#125;&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">## OutputFormat</span></span><br><span class="line"><span class="emphasis">在用户输入的大纲基础上，逐条补充注释，示例如下：</span></span><br><span class="line"><span class="emphasis">带头严守政治纪律和政治规矩，维护党的团结统一</span></span><br><span class="line"><span class="emphasis">改为：带头严守政治纪律和政治规矩，维护党的团结统一&lt;!-- 写出在政治纪律执行和信息传播管理方面存在的不足，结合高校岗位场景 --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="去除think部分-1"><a href="#去除think部分-1" class="headerlink" title="去除think部分"></a>去除think部分</h3><p><img src="/2025/09/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%85%9A%E5%BB%BAagent%E7%BC%96%E5%86%99/57a68497-c4d8-4a8c-9133-c122c4413fb8.png" alt="57a68497-c4d8-4a8c-9133-c122c4413fb8"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">prompt2: <span class="built_in">str</span> = <span class="string">&quot;&quot;</span></span>) -&gt; <span class="built_in">dict</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">remove_think</span>(<span class="params">text: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> text:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> re.sub(<span class="string">r&quot;&lt;think&gt;.*?&lt;/think&gt;&quot;</span>, <span class="string">&quot;&quot;</span>, text, flags=re.DOTALL)</span><br><span class="line"></span><br><span class="line">        prompt_clean_think2 = remove_think(prompt2)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&quot;result&quot;</span>: <span class="string">&quot;处理成功&quot;</span>,</span><br><span class="line">            <span class="string">&quot;prompt_clean_think2&quot;</span>: prompt_clean_think2.strip(),</span><br><span class="line">            <span class="string">&quot;error&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 出错时不要 raise，直接返回</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&quot;result&quot;</span>: <span class="string">&quot;error&quot;</span>,   <span class="comment"># � 保证有输出字段</span></span><br><span class="line">            <span class="string">&quot;prompt_clean_think2&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;error&quot;</span>: <span class="string">f&quot;处理出错：<span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>，请重新输入&quot;</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="针对性强化章节撰写"><a href="#针对性强化章节撰写" class="headerlink" title="针对性强化章节撰写"></a>针对性强化章节撰写</h3><p><img src="/2025/09/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%85%9A%E5%BB%BAagent%E7%BC%96%E5%86%99/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250912092621_3561_17.png" alt="微信图片_20250912092621_3561_17"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Instruction</span></span><br><span class="line">你将接收到一个已经补充了 <span class="code">`&lt;!-- --&gt;`</span> 注释的 Markdown 大纲&#123;&#123;#17574056032950.prompt<span class="emphasis">_clean_</span>think2#&#125;&#125;。  </span><br><span class="line">请严格按照大纲的层级和顺序，展开撰写一篇规范的党建读后感文章。  </span><br><span class="line"></span><br><span class="line"><span class="section">## Role：优秀党建学习示范者</span></span><br><span class="line">你是一位认真学习党建文件的模范党员，能够结合自身工作与思想实际写出深刻的感悟。</span><br><span class="line"></span><br><span class="line"><span class="section">## Attention</span></span><br><span class="line"><span class="bullet">-</span> 每个 <span class="code">`&lt;!-- --&gt;`</span> 注释代表对应部分的写作指令，你必须完全吸收并落实其中的要求。  </span><br><span class="line"><span class="bullet">-</span> 最终输出中 <span class="strong">**不能出现 `&lt;!-- --&gt;` 注释**</span>，而是要将其转化为具体的内容。  </span><br><span class="line"><span class="bullet">-</span> 内容必须紧扣党建文件案例和高校教职工的实际工作语境，避免空泛套话。  </span><br><span class="line"><span class="bullet">-</span> 文章要有层次感，每个部分展开 2-4 段，既有思想剖析，也有具体措施。  </span><br><span class="line"><span class="bullet">-</span> 内容必须紧扣党建案例文件内容&#123;&#123;#1756819593861.text#&#125;&#125;，不能空泛。  </span><br><span class="line"><span class="bullet">-</span> 要结合本人高校教职工岗位特点&#123;&#123;#1756819649172.text#&#125;&#125;。 </span><br><span class="line"><span class="bullet">-</span> 章节标题与大纲中一模一样，一个字不改。</span><br><span class="line"></span><br><span class="line"><span class="section">## OutputFormat</span></span><br><span class="line">直接输出 Markdown 格式文章，结构必须与输入大纲&#123;&#123;#17574056032950.prompt<span class="emphasis">_clean_</span>think2#&#125;&#125;完全保持一致，但正文内容要根据注释展开。  </span><br></pre></td></tr></table></figure><h3 id="去除think部分并调整注释格式-1"><a href="#去除think部分并调整注释格式-1" class="headerlink" title="去除think部分并调整注释格式"></a>去除think部分并调整注释格式</h3><p><img src="/2025/09/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%85%9A%E5%BB%BAagent%E7%BC%96%E5%86%99/fa7a1c16-0bd8-4967-a233-a0cc6bf05663.png" alt="fa7a1c16-0bd8-4967-a233-a0cc6bf05663"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">arg1: <span class="built_in">str</span> = <span class="string">&quot;&quot;</span>, arg2: <span class="built_in">str</span> = <span class="string">&quot;&quot;</span></span>) -&gt; <span class="built_in">dict</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">remove_think</span>(<span class="params">text: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> text:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> re.sub(<span class="string">r&quot;&lt;think&gt;.*?&lt;/think&gt;&quot;</span>, <span class="string">&quot;&quot;</span>, text, flags=re.DOTALL)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">unhide_comment</span>(<span class="params">text: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> text:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="comment"># 用正则匹配 &lt;!-- 任意内容 --&gt; 并替换成 【内容】</span></span><br><span class="line">            <span class="keyword">return</span> re.sub(<span class="string">r&#x27;&lt;!--\s*(.*?)\s*--&gt;&#x27;</span>, <span class="string">r&#x27; 【注释：\1】&#x27;</span>, text)</span><br><span class="line"></span><br><span class="line">        prompt_clean2 = unhide_comment(remove_think(arg1))</span><br><span class="line">        <span class="comment"># arg2_clean2 = unhide_comment(remove_think(arg2))</span></span><br><span class="line">        <span class="comment"># arg1_clean2 = remove_think(arg1)</span></span><br><span class="line">        draft_clean2 = remove_think(arg2)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># � 必须有至少一个 result 或自定义 key</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&quot;result&quot;</span>: <span class="string">&quot;处理成功&quot;</span>,</span><br><span class="line">            <span class="string">&quot;prompt_clean2&quot;</span>: prompt_clean2.strip(),</span><br><span class="line">            <span class="string">&quot;draft_clean2&quot;</span>: draft_clean2.strip(),</span><br><span class="line">            <span class="string">&quot;error&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 出错时不要 raise，直接返回</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&quot;result&quot;</span>: <span class="string">&quot;error&quot;</span>,   <span class="comment"># � 保证有输出字段</span></span><br><span class="line">            <span class="string">&quot;prompt_clean2&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;draft_clean2&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;error&quot;</span>: <span class="string">f&quot;处理出错：<span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>，请重新输入&quot;</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="规范化输出样式-1"><a href="#规范化输出样式-1" class="headerlink" title="规范化输出样式"></a>规范化输出样式</h3><p><img src="/2025/09/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%85%9A%E5%BB%BAagent%E7%BC%96%E5%86%99/4b32adc9-3b2b-4048-944b-0ec95d36d6c7.png" alt="4b32adc9-3b2b-4048-944b-0ec95d36d6c7"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;# 生成的提示词</span><br><span class="line">&#123;&#123; prompt<span class="emphasis">_clean2 &#125;&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"># ---------------------------</span></span><br><span class="line"><span class="emphasis"># ---------------------------</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&gt;# 生成的初稿</span></span><br><span class="line"><span class="emphasis">&#123;&#123; draft_</span>clean2 &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="生成终稿"><a href="#生成终稿" class="headerlink" title="生成终稿"></a>生成终稿</h3><p><img src="/2025/09/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%85%9A%E5%BB%BAagent%E7%BC%96%E5%86%99/8dff9d8e-f1ac-4de1-bb4f-dc423caf40b6.png" alt="8dff9d8e-f1ac-4de1-bb4f-dc423caf40b6"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Instruction</span></span><br><span class="line">将初次撰写的读后感&#123;&#123;#1757382286747.draft<span class="emphasis">_clean#&#125;&#125;与优化补充部分&#123;&#123;#17574057721870.draft_</span>clean2#&#125;&#125;整合，形成一篇完整、内容更加丰富的最终版读后感。</span><br><span class="line"></span><br><span class="line"><span class="section">## Role：党建读后感整合专家</span></span><br><span class="line">你是一位党建写作专家，擅长对不同版本进行整合优化，确保逻辑连贯、思想深刻。</span><br><span class="line"></span><br><span class="line"><span class="section">## Attention</span></span><br><span class="line"><span class="bullet">-</span> 整合时要保证结构统一，避免重复。</span><br><span class="line"><span class="bullet">-</span> 将相同章节的内容补充部分自然融入初稿。</span><br><span class="line"><span class="bullet">-</span> 最终文本必须完整、流畅、可直接使用。</span><br><span class="line"><span class="bullet">-</span> 初次撰写的读后感&#123;&#123;#1757382286747.draft<span class="emphasis">_clean#&#125;&#125;中不涉及&#123;&#123;#1756805697432.fortify_</span>chapter#&#125;&#125;的章节内容和结构都不做修改。</span><br><span class="line"><span class="bullet">-</span> 将&#123;&#123;#17574057721870.draft<span class="emphasis">_clean2#&#125;&#125;新生成的内容黏贴到初次撰写的读后感&#123;&#123;#1757382286747.draft_</span>clean#&#125;&#125;对应章节下。</span><br><span class="line"></span><br><span class="line"><span class="section">## OutputFormat</span></span><br><span class="line">保持与&#123;&#123;#1756805697432.template#&#125;&#125;完全相同的结构，不用新增其他章节。</span><br></pre></td></tr></table></figure><h3 id="去除think部分-2"><a href="#去除think部分-2" class="headerlink" title="去除think部分"></a>去除think部分</h3><p><img src="/2025/09/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%85%9A%E5%BB%BAagent%E7%BC%96%E5%86%99/83443527-1217-49d3-b7fa-22f4f1fd10de.png" alt="83443527-1217-49d3-b7fa-22f4f1fd10de"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">arg1: <span class="built_in">str</span> = <span class="string">&quot;&quot;</span></span>) -&gt; <span class="built_in">dict</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">remove_think</span>(<span class="params">text: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> text:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">return</span> re.sub(<span class="string">r&quot;&lt;think&gt;.*?&lt;/think&gt;&quot;</span>, <span class="string">&quot;&quot;</span>, text, flags=re.DOTALL)</span><br><span class="line"></span><br><span class="line">        final_version_clean = remove_think(arg1)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># � 必须有至少一个 result 或自定义 key</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&quot;result&quot;</span>: <span class="string">&quot;处理成功&quot;</span>,</span><br><span class="line">            <span class="string">&quot;final_version_clean&quot;</span>: final_version_clean.strip(),</span><br><span class="line">            <span class="string">&quot;error&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 出错时不要 raise，直接返回</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&quot;result&quot;</span>: <span class="string">&quot;error&quot;</span>,   <span class="comment"># � 保证有输出字段</span></span><br><span class="line">            <span class="string">&quot;final_version_clean&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;error&quot;</span>: <span class="string">f&quot;处理出错：<span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>，请重新输入&quot;</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="规范化输出样式-2"><a href="#规范化输出样式-2" class="headerlink" title="规范化输出样式"></a>规范化输出样式</h3><p><img src="/2025/09/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%85%9A%E5%BB%BAagent%E7%BC%96%E5%86%99/291536d2-dfe6-4af1-a30c-50928b34da67.png" alt="291536d2-dfe6-4af1-a30c-50928b34da67"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt;# 生成的初始提示词</span><br><span class="line">&#123;&#123; prompt<span class="emphasis">_clean &#125;&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"># ---------------------------</span></span><br><span class="line"><span class="emphasis"># ---------------------------</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&gt;# 生成的初稿</span></span><br><span class="line"><span class="emphasis">&#123;&#123; draft_</span>clean &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="section"># ---------------------------</span></span><br><span class="line"><span class="section"># ---------------------------</span></span><br><span class="line"></span><br><span class="line">&gt;# 生成的补强章节提示词</span><br><span class="line">&#123;&#123; prompt<span class="emphasis">_clean2 &#125;&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"># ---------------------------</span></span><br><span class="line"><span class="emphasis"># ---------------------------</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&gt;# 生成的补强章节内容</span></span><br><span class="line"><span class="emphasis">&#123;&#123; draft_</span>clean2 &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="section"># ---------------------------</span></span><br><span class="line"><span class="section"># ---------------------------</span></span><br><span class="line"></span><br><span class="line">&gt;# 生成的终稿</span><br><span class="line">&#123;&#123; final<span class="emphasis">_version_</span>clean &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="最终呈现"><a href="#最终呈现" class="headerlink" title="最终呈现"></a>最终呈现</h3><p>将 生成的初始提示词、生成的初稿、补强章节提示词、补强章节内容、终稿  呈现给用户。</p><p><img src="/2025/09/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%85%9A%E5%BB%BAagent%E7%BC%96%E5%86%99/a8a8c8ae-2e87-47f4-b133-cf3c7290a55f.png" alt="a8a8c8ae-2e87-47f4-b133-cf3c7290a55f"></p>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="机器学习" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="agent" scheme="http://example.com/tags/agent/"/>
    
  </entry>
  
  <entry>
    <title>匹配大模型版本与本地显存方法</title>
    <link href="http://example.com/2025/09/07/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%8C%B9%E9%85%8D%E5%A4%A7%E6%A8%A1%E5%9E%8B%E7%89%88%E6%9C%AC%E4%B8%8E%E6%9C%AC%E5%9C%B0%E6%98%BE%E5%AD%98%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2025/09/07/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%8C%B9%E9%85%8D%E5%A4%A7%E6%A8%A1%E5%9E%8B%E7%89%88%E6%9C%AC%E4%B8%8E%E6%9C%AC%E5%9C%B0%E6%98%BE%E5%AD%98%E6%96%B9%E6%B3%95/</id>
    <published>2025-09-07T14:05:02.000Z</published>
    <updated>2025-09-07T13:57:15.927Z</updated>
    
    <content type="html"><![CDATA[<p>我们看见大量的大语言模型在 modelscope 这类平台上，如何确定我们本地的GPU显存能否匹配上这个模型的基本要求？</p><p>这次我们搞这个。 </p><h1 id="看模型显存需求"><a href="#看模型显存需求" class="headerlink" title="看模型显存需求"></a>看模型显存需求</h1><p>大模型的计算单位都是2字节，也就是8*2&#x3D;16bit ；而 我们看见 标着 AWQ 或者 4int 等就是量化压缩到4bit 的意思，最终显存需求会是原来的1&#x2F;4。</p><p>Qwen-32B-AWQ </p><p>指的是32B个计算单位，原本FP16单位是32*2&#x3D;64G的显存需求，但是AWQ的压缩，导致只需要64&#x2F;4&#x3D; 16G显存。</p><p>Qwen2.5-72B-AWQ</p><p>指的是72B个计算单位，原本FP16 是72*2&#x3D;144G的显存需求，但是AWQ的压缩，导致只需要144&#x2F;4&#x3D; 36G显存。</p><p>通义千问 QwQ-32B</p><p>指的是32B个计算单位，FP16 大小就是 16bit的单位，也就是32*2&#x3D;64G的显存需求。</p><h1 id="计算任务拆分"><a href="#计算任务拆分" class="headerlink" title="计算任务拆分"></a>计算任务拆分</h1><p>ray 搞一个2个机器的集群，然后vllm 来平分GPU显存去计算。核心是vllm对计算的拆分。 </p><p>例如：</p><p><code>tensor_parallel_size=4</code> ，我们把计算任务用vllm 分4份给到GPU集群。 </p><p>我们的算力集群是由4张24G显存的GPU组成。 </p><h1 id="GPU单卡显存计算公式"><a href="#GPU单卡显存计算公式" class="headerlink" title="GPU单卡显存计算公式"></a>GPU单卡显存计算公式</h1><h2 id="总需求"><a href="#总需求" class="headerlink" title="总需求"></a>总需求</h2><p><code>单卡需求(GB) = (量化模型大小 ÷ tensor_parallel_size) + KV_Cache + 开销</code></p><h2 id="模型分片"><a href="#模型分片" class="headerlink" title="模型分片"></a>模型分片</h2><p>模型分片 &#x3D; (量化模型大小 ÷ tensor_parallel_size)</p><h2 id="KV-Cache"><a href="#KV-Cache" class="headerlink" title="KV_Cache"></a>KV_Cache</h2><p><code>KV_Cache ≈ 2 × batch_size × seq_len × 层数 × hidden_size × dtype_size × 0.6</code></p><p>大约<code>KV_Cache(GB) ≈ batch_size × seq_len × 0.0001</code></p><p>下方为 KV_Cache(GB) 例表：</p><table><thead><tr><th>batch&#x3D;4, seq&#x3D;2048</th><th>~0.8 GB</th></tr></thead><tbody><tr><td>batch&#x3D;8, seq&#x3D;4096</td><td>~3.2 GB</td></tr><tr><td>batch&#x3D;16, seq&#x3D;8192</td><td>~12.8 GB</td></tr></tbody></table><table><thead><tr><th><strong>vLLM</strong></th><th><code>--max-num-seqs</code></th><th>最大并发请求数（直接影响 batch_size）</th></tr></thead><tbody><tr><td></td><td><code>--max-num-batched-tokens</code></td><td>批处理的最大 token 数</td></tr></tbody></table><table><thead><tr><th><strong>vLLM</strong></th><th><code>--max-model-len</code></th><th>模型支持的最大序列长度（直接影响  seq_len）</th></tr></thead><tbody><tr><td></td><td><code>--max-num-batched-tokens</code></td><td>间接限制 seq_len</td></tr></tbody></table><h2 id="开销"><a href="#开销" class="headerlink" title="开销"></a>开销</h2><p>开销（固定值）</p><ul><li><p>中间激活值：1-2 GB</p></li><li><p>框架开销：1-2 GB</p></li><li><p><strong>总计</strong>：2-4 GB</p></li></ul><h2 id="启动峰值显存"><a href="#启动峰值显存" class="headerlink" title="启动峰值显存"></a>启动峰值显存</h2><p>启动峰值显存比稳态高 15-30%</p><h1 id="查看GPU单卡显存压力"><a href="#查看GPU单卡显存压力" class="headerlink" title="查看GPU单卡显存压力"></a>查看GPU单卡显存压力</h1><p>例如：</p><p>Qwen&#x2F;Qwen-32B-Chat</p><p><strong>FP16 大小</strong>：32B × 2 &#x3D; 64 GB</p><p>KV_Cache(GB) ≈ batch_size × seq_len × 0.0001 &#x3D;  8 × 8192 × 0.0001 &#x3D; 6.5536 GB ≈ 6.4 GB </p><table><thead><tr><th><code>batch_size</code></th><th>8</th><th>并发请求数</th></tr></thead><tbody><tr><td><code>seq_len</code></td><td>8192</td><td>上下文长度</td></tr></tbody></table><p><strong>单卡需求</strong>：</p><ul><li>模型分片：64GB ÷ 4 &#x3D; 16 GB</li><li>KV Cache：6.4 GB</li><li>开销：3.0 GB</li></ul><p>单卡需求 &#x3D;  25.4 &gt; 我单一GPU 24G显存</p><p>所以我无法部署此大模型。 </p><p>同时，由于启动峰值显存比稳态高 15-25%，上面的vllm配置中，即便是batch_size&#x3D;1,seq_len&#x3D;512, 在峰值依然超过了 显存余量，所以我无法部署此大模型。 </p><p>例如：</p><p>通义千问2.5-72B-Instruct-AWQ量化</p><p><strong>单卡需求</strong>：</p><ul><li>模型分片：36GB ÷ 4 &#x3D; 9 GB</li><li>KV Cache：6.4 GB</li><li>开销：3.0 GB</li></ul><p>单卡需求 &#x3D;  18.4 &gt; 我单一GPU 24G显存</p><p>启动峰值显存 ≈  18.4 * 1.25 &#x3D; 23 &lt; 我单一GPU 24G显存, 所以可以部署。</p><h1 id="查看GPU总显存压力"><a href="#查看GPU总显存压力" class="headerlink" title="查看GPU总显存压力"></a>查看GPU总显存压力</h1><p>满足一下即可：</p><p>模型需要显存大小 &lt; vllm总显存 </p>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="机器学习" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="显存" scheme="http://example.com/tags/%E6%98%BE%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>构建一个写教案的智能体</title>
    <link href="http://example.com/2025/08/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%86%99%E6%95%99%E6%A1%88%E7%9A%84%E6%99%BA%E8%83%BD%E4%BD%93/"/>
    <id>http://example.com/2025/08/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%86%99%E6%95%99%E6%A1%88%E7%9A%84%E6%99%BA%E8%83%BD%E4%BD%93/</id>
    <published>2025-08-30T10:05:02.000Z</published>
    <updated>2025-08-30T10:06:26.915Z</updated>
    
    <content type="html"><![CDATA[<p>这里学习的是 格知智能 的直播，写的笔记。</p><p>对格知智能的老师表示感谢。</p><p>这里仅仅是用教案的例子，实际上 应用到其他的 工作 agent 编写中，是类似的。 这个可以作为参考。 </p><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>这里是通过一个教案模版的PDF文件 ，和我们工作相关的文件（教学大纲中部分内容），两个文件来生成我们文件对应的教案；</p><p>“参照教案模板，完成教学大纲中第二个教学项目的教案撰写。”</p><p>先流程拆解分步骤完成这个目标，再把这些步骤做成agent工作流；</p><h1 id="总流程"><a href="#总流程" class="headerlink" title="总流程"></a>总流程</h1><p><img src="/2025/08/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%86%99%E6%95%99%E6%A1%88%E7%9A%84%E6%99%BA%E8%83%BD%E4%BD%93/%E6%88%AA%E5%B1%8F2025-08-30%2011.05.37.jpg" alt="截屏2025-08-30 11.05.37"></p><h1 id="流程拆解"><a href="#流程拆解" class="headerlink" title="流程拆解"></a>流程拆解</h1><h2 id="一、获取教案初稿"><a href="#一、获取教案初稿" class="headerlink" title="一、获取教案初稿"></a>一、获取教案初稿</h2><p><img src="/2025/08/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%86%99%E6%95%99%E6%A1%88%E7%9A%84%E6%99%BA%E8%83%BD%E4%BD%93/%E6%88%AA%E5%B1%8F2025-08-30%2010.58.50.jpg" alt="截屏2025-08-30 10.58.50"></p><p><img src="/2025/08/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%86%99%E6%95%99%E6%A1%88%E7%9A%84%E6%99%BA%E8%83%BD%E4%BD%93/%E6%88%AA%E5%B1%8F2025-08-30%2010.33.09.jpg" alt="截屏2025-08-30 10.33.09"></p><h3 id="1、将模版重构成markdown格式模版"><a href="#1、将模版重构成markdown格式模版" class="headerlink" title="1、将模版重构成markdown格式模版"></a>1、将模版重构成markdown格式模版</h3><p>大模型难以输出结构复杂的表格，将教案模板转为半结构化的文本形式更有利于其理解和输出。</p><p>该转换工作可借助大模型完成。</p><p><img src="/2025/08/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%86%99%E6%95%99%E6%A1%88%E7%9A%84%E6%99%BA%E8%83%BD%E4%BD%93/%E6%88%AA%E5%B1%8F2025-08-30%2010.39.44.jpg" alt="截屏2025-08-30 10.39.44"></p><h4 id="提示词"><a href="#提示词" class="headerlink" title="提示词"></a>提示词</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Instruction</span></span><br><span class="line">从给定的教案模板中准确提取各信息字段，并依照原结构组织输出。</span><br><span class="line"><span class="section">## Role：教案模板分析专家</span></span><br><span class="line">你是一位教学领域的专家，特别擅长分析和创作教案模板。</span><br><span class="line"><span class="section">## Attention</span></span><br><span class="line"><span class="bullet">-</span> 1. 要确保对教案模板中的所有信息字段都仔细甄别，防止遗漏重要字段。</span><br><span class="line"><span class="bullet">-</span> 2. 严格按照原教案模板的层级结构来组织输出信息。</span><br><span class="line"><span class="bullet">-</span> 3. 只需要输出信息字段，不要具体内容，切记！！！</span><br><span class="line"><span class="section">## OutputFormat</span></span><br><span class="line"><span class="section">## 基本信息</span></span><br><span class="line"><span class="bullet">-</span> 授课题目</span><br><span class="line"><span class="bullet">-</span> 授课类型</span><br><span class="line"><span class="bullet">-</span> 授课对象</span><br><span class="line">...</span><br><span class="line"><span class="section">## 教学目标</span></span><br><span class="line"><span class="bullet">-</span> 知识目标</span><br><span class="line"><span class="bullet">-</span> 能力目标</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>用大模型在这个提示词的辅助下，得出下面的内容。</p><p><img src="/2025/08/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%86%99%E6%95%99%E6%A1%88%E7%9A%84%E6%99%BA%E8%83%BD%E4%BD%93/%E6%88%AA%E5%B1%8F2025-08-30%2010.54.13.jpg" alt="截屏2025-08-30 10.54.13"></p><p>可见基本将教案模板中的信息字段提取出来了，且遵循度非常高，这为后续具体教案撰写打下了坚实基础。</p><p><em>注：最好基于具体需求对大模型输出**进行手动微调。</em></p><h3 id="2、按模版要求完成教学大纲中具体章节教案撰写"><a href="#2、按模版要求完成教学大纲中具体章节教案撰写" class="headerlink" title="2、按模版要求完成教学大纲中具体章节教案撰写"></a>2、按模版要求完成教学大纲中具体章节教案撰写</h3><p>如果是 最简单粗暴的一句提示词就是</p><p><strong>“按照模版格式，根据教学大纲内容撰写第二个项目的教案”</strong></p><p>但是这样的提示词会导致生成的内容偏差严重。 </p><h4 id="提示词-1"><a href="#提示词-1" class="headerlink" title="提示词"></a>提示词</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Instruction</span></span><br><span class="line">根据教学大纲内容撰写第二个项目的教案。</span><br><span class="line"><span class="section">## Role: 全国优秀教师</span></span><br><span class="line"><span class="section">## Attention</span></span><br><span class="line"><span class="bullet">1.</span> 教案内容须与教学大纲对应内容相匹配。</span><br><span class="line"><span class="bullet">2.</span> 不得输出注释符号“ &lt;!-- --&gt;”中的内容。</span><br><span class="line"><span class="section">## outputformat</span></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"><span class="section">## 基本信息</span></span><br><span class="line"><span class="bullet">-</span> 授课题目</span><br><span class="line"><span class="bullet">-</span> 授课类型（理论讲授<span class="emphasis">*课时，实践*</span>课时） &lt;!-- 分类理论和实践两种方式，可并存 --&gt;</span><br><span class="line"><span class="bullet">-</span> 授课对象</span><br><span class="line"><span class="bullet">-</span> 授课时间</span><br><span class="line">... ...</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><p><img src="/2025/08/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%86%99%E6%95%99%E6%A1%88%E7%9A%84%E6%99%BA%E8%83%BD%E4%BD%93/%E6%88%AA%E5%B1%8F2025-08-30%2012.19.50.jpg" alt="截屏2025-08-30 12.19.50"></p><p>模型输出的内容基本遵循了教学大纲中的教学内容，输出体例则与限定的模板完全一致。</p><p>现在我们得到了 markdown格式模版样式的教案结果（上图右侧）。</p><p><em>缺陷：“教学设计”和“教学**实施”内容不够详实。</em></p><h2 id="二、获取外部数据优化"><a href="#二、获取外部数据优化" class="headerlink" title="二、获取外部数据优化"></a>二、获取外部数据优化</h2><p>优化“教学设计”和“教学实施”内容。</p><ol><li><p><strong>提供更丰富的教学数据供大模型阅读参考</strong></p></li><li><p><strong>编写针对该项内容的特定提示词</strong></p></li></ol><h3 id="1、丰富参考"><a href="#1、丰富参考" class="headerlink" title="1、丰富参考"></a>1、丰富参考</h3><p>像 Dify 创建的 agent 工具，在创建伊始，会有一个角色的描述，也可能是叫 workflow 或者 chatflow 的描述；</p><p>我们丰富这个描述，有助于变得专业，例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Role:Excel商务数据分析教学设计专家</span></span><br><span class="line"><span class="section">## Background: Excel商务数据分析教学设计和实施方案</span></span><br><span class="line">《Excel商务数据分析》课程旨在培养学生利用Excel进行</span><br><span class="line">教学设计需结合实际教学内容和教学目标，注重理论与实践。</span><br><span class="line"><span class="section"># Attention: 注意事项</span></span><br><span class="line"><span class="bullet">-</span> 教学设计要充分结合教学文档中的教学目标和教学内容， </span><br><span class="line"><span class="bullet">-</span> 教学实施要贴合教学设计，详细展开阐述。 </span><br><span class="line"><span class="bullet">-</span> 一定要结合上传的教学文档，切记！！! </span><br><span class="line"><span class="section">## Profile: </span></span><br><span class="line"><span class="bullet">-</span> Author:Excel商务数据分析教学设计专家</span><br><span class="line"><span class="bullet">-</span> Version: 0.1 </span><br><span class="line"><span class="bullet">-</span> Language:中文</span><br><span class="line"><span class="bullet">-</span> Description:Excel商务数据分析教学设计专家是专业从事此类工作的人，能够根据商务场景和学生需求，设计出合理的教学方案。 </span><br><span class="line"><span class="section">### Skills: </span></span><br><span class="line"><span class="bullet">-</span> 精通Excel数据处理和分析。 </span><br><span class="line"><span class="bullet">-</span> 熟悉商务数据分析的实际应用。 </span><br><span class="line"><span class="bullet">-</span> 具备良好的教学设计能力。 </span><br><span class="line"><span class="bullet">-</span> 能够有效指导学生进行实践操作。 </span><br></pre></td></tr></table></figure><h3 id="2、针对性补充优化"><a href="#2、针对性补充优化" class="headerlink" title="2、针对性补充优化"></a>2、针对性补充优化</h3><p>针对前文中 ，不够详实的薄弱部分，进行加强优化；</p><p>例如：“教学设计”和“教学**实施”内容不够详实。我们的提示词的 <code>Instruction</code>  就专门写它。</p><p>利用 <code>&lt;!-- --&gt;</code> 提示词的注释功能，让前文中的提示词尽可能细化。 </p><p> <code>&lt;!-- --&gt;</code>  的好处是要大模型看见，但是不要它输出这些注释的内容。</p><h4 id="提示词-2"><a href="#提示词-2" class="headerlink" title="提示词"></a>提示词</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Instruction </span></span><br><span class="line">结合教学大纲和相应教学材料的具体内容撰写&quot;教学设计”和”教学实施”。 </span><br><span class="line"></span><br><span class="line"><span class="section">## Role:备课专家</span></span><br><span class="line">你是一位工作经验非常丰富的高校教师，你主导的多门课程在全国教学大赛中极其优秀。 </span><br><span class="line"></span><br><span class="line"><span class="section">## Attention </span></span><br><span class="line">1.紧密结合相关内容进行撰写。 </span><br><span class="line">2.不得输出注释符号&quot;&lt;!----&gt;”中的内容。 </span><br><span class="line"></span><br><span class="line"><span class="section">## OutputFormat </span></span><br><span class="line"><span class="section">## 教学设计 &lt;!-- 请充分结合相关教学材料展开 --&gt; </span></span><br><span class="line"><span class="bullet">-</span> 设计思路 &lt;!-- 概括性阐述你的思路，字数要求300左右 --&gt; </span><br><span class="line"><span class="bullet">-</span> 课前内容 &lt;!-- 字数要求100左右 --&gt; </span><br><span class="line"><span class="bullet">-</span> 课中内容 &lt;!-- 字数要求100左右 --&gt; </span><br><span class="line"><span class="bullet">-</span> 课后内容 &lt;!-- 字数要求100左右 --&gt; </span><br><span class="line"></span><br><span class="line"><span class="section">## 教学实施 &lt;!-- 遵照教学设计展开，并一定要结合教学文档中的内容 --&gt; </span></span><br><span class="line"><span class="bullet">-</span> 课前 &lt;!-- 回顾上节课程内容或设计本节课程的引入内容 --&gt; </span><br><span class="line"><span class="bullet">-</span> 课中 &lt;!-- 严格按照教学文档中的内容编排展开，要列明具体教学内交求800左右！！! --&gt; </span><br><span class="line"><span class="bullet">-</span> 课后</span><br><span class="line"><span class="bullet">-</span> 练习题 &lt;!-- 结合课程内容生成3-5到练习题 --&gt; </span><br><span class="line"><span class="bullet">-</span> 学生复习 &lt;!-- 复习本节课内容 --&gt; </span><br><span class="line"><span class="bullet">-</span> 学生预习 &lt;!-- 预习下次课内容 --&gt;</span><br></pre></td></tr></table></figure><p>得到了补充内容，如下：</p><p><img src="/2025/08/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%86%99%E6%95%99%E6%A1%88%E7%9A%84%E6%99%BA%E8%83%BD%E4%BD%93/%E6%88%AA%E5%B1%8F2025-08-30%2013.03.54.jpg" alt="截屏2025-08-30 13.03.54"></p><h2 id="三、整合"><a href="#三、整合" class="headerlink" title="三、整合"></a>三、整合</h2><p>得到了上面的初稿内容和补充内容之后，就要进行内容整合了。</p><p><img src="/2025/08/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%86%99%E6%95%99%E6%A1%88%E7%9A%84%E6%99%BA%E8%83%BD%E4%BD%93/%E6%88%AA%E5%B1%8F2025-08-30%2013.04.30.jpg" alt="截屏2025-08-30 13.04.30"></p><h1 id="Agent搭建"><a href="#Agent搭建" class="headerlink" title="Agent搭建"></a>Agent搭建</h1><h2 id="建立节点"><a href="#建立节点" class="headerlink" title="建立节点"></a>建立节点</h2><p> 把前文中的每一步写成agent中的LLM节点，提示词中添加 输入部分，对上面的提示词稍加改动即可。</p><p><img src="/2025/08/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%86%99%E6%95%99%E6%A1%88%E7%9A%84%E6%99%BA%E8%83%BD%E4%BD%93/%E6%88%AA%E5%B1%8F2025-08-30%2017.50.44.jpg" alt="截屏2025-08-30 17.50.44"></p><p>将读取教学课件节点读取到的文档内容作为输入<code>&#123;&#123;input&#125;&#125;</code>；撰写适当的提示词。</p><p>提示词</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Instruction</span></span><br><span class="line">结合具体教学文档完成教学设计和教学实施方案撰写。</span><br><span class="line"></span><br><span class="line"><span class="section">## Role：Excel商务数据分析教学设计专家</span></span><br><span class="line">你是一位Excel商务数据分析教学设计专家，具有丰富的商务数据分析和教学经验，能够根据商务场景和学生需求，设计出合理的教学方案。</span><br><span class="line"></span><br><span class="line"><span class="section">## Attention</span></span><br><span class="line"><span class="bullet">1.</span> 紧密结合教学文档内容进行撰写。</span><br><span class="line"><span class="bullet">2.</span> 不得输出注释符号“ &lt;!-- --&gt;”中的内容。</span><br><span class="line"></span><br><span class="line"><span class="section">## 教学文档：</span></span><br><span class="line">&#123;&#123;input&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">## OutputFormat</span></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="内容整合"><a href="#内容整合" class="headerlink" title="内容整合"></a>内容整合</h2><p>添加文本处理组件作为本本节点；将教案初稿和优化内容传输给内容整合节点进行拼接输出。</p><p><img src="/2025/08/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%86%99%E6%95%99%E6%A1%88%E7%9A%84%E6%99%BA%E8%83%BD%E4%BD%93/%E6%88%AA%E5%B1%8F2025-08-30%2018.01.18.jpg" alt="截屏2025-08-30 18.01.18"></p><p>然后保存输出即可。</p>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="机器学习" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="agent" scheme="http://example.com/tags/agent/"/>
    
    <category term="提示词" scheme="http://example.com/tags/%E6%8F%90%E7%A4%BA%E8%AF%8D/"/>
    
    <category term="智能体" scheme="http://example.com/tags/%E6%99%BA%E8%83%BD%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>手写MCPserver</title>
    <link href="http://example.com/2025/08/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%8B%E5%86%99MCPserver/"/>
    <id>http://example.com/2025/08/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%8B%E5%86%99MCPserver/</id>
    <published>2025-08-24T12:07:11.000Z</published>
    <updated>2025-08-25T06:25:07.949Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装uv-x2F-npm"><a href="#安装uv-x2F-npm" class="headerlink" title="安装uv&#x2F;npm"></a>安装uv&#x2F;npm</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">curl -LsSf https://astral.sh/uv/install.sh | sh <span class="comment"># 安装uv</span></span><br><span class="line"></span><br><span class="line">uv --version <span class="comment"># uv 0.8.11</span></span><br><span class="line">node -v <span class="comment"># v22.16.0</span></span><br><span class="line">npm -v <span class="comment"># 10.9.2</span></span><br><span class="line">npx -v <span class="comment"># 10.9.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果npm相关的没有安装 用手动安装一下。</span></span><br><span class="line"><span class="comment"># 添加 Node.js 最新 LTS 版本仓库（比如 20.x）</span></span><br><span class="line">curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -</span><br><span class="line"><span class="comment"># 安装 Node.js 和 npm</span></span><br><span class="line">sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure><p><img src="/2025/08/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%8B%E5%86%99MCPserver/%E6%88%AA%E5%B1%8F2025-08-18%2020.37.21.png" alt="截屏2025-08-18 20.37.21"></p><p><img src="/2025/08/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%8B%E5%86%99MCPserver/%E6%88%AA%E5%B1%8F2025-08-18%2020.42.22.png" alt="截屏2025-08-18 20.42.22"></p><h1 id="MCP-传输协议"><a href="#MCP-传输协议" class="headerlink" title="MCP 传输协议"></a>MCP 传输协议</h1><h2 id="Stdio"><a href="#Stdio" class="headerlink" title="Stdio"></a>Stdio</h2><p>标准输入输出流，进行双向通信，客户端写入输入，服务器输出相应；无须依赖网络；多用于本地开发调试，同一个设备中多用；</p><h2 id="SSE"><a href="#SSE" class="headerlink" title="SSE"></a>SSE</h2><p>http单向推送机制，客户端http get请求建立与服务器的长连接，服务器持续以温流的形式推送事件消息，客户端接收消息；</p><h2 id="Streamable-Http"><a href="#Streamable-Http" class="headerlink" title="Streamable Http"></a>Streamable Http</h2><p>基于 <strong>HTTP 请求-响应</strong> 的标准通信方式，但响应体支持 <strong>流式传输（chunked transfer &#x2F; streaming）</strong>。</p><ul><li>客户端发起普通的 HTTP 请求（通常是 <code>POST</code>），</li><li>服务器立即返回响应，但响应体内容以流的形式逐步传输，直到完整结束；</li><li>相比 SSE：支持 <strong>双向交互</strong>，客户端可以通过请求体携带上下文，服务器端则以流式返回部分结果；</li></ul><h1 id="解释sse"><a href="#解释sse" class="headerlink" title="解释sse"></a>解释sse</h1><p>clinet.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sse_client</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="comment"># stream=False 会立即下载整个响应内容到内存，再返回给你。</span></span><br><span class="line">    <span class="comment"># 而stream 建立连接后，不立即读取响应体，而是让你通过迭代器逐块获取数据。</span></span><br><span class="line">    <span class="comment"># 如果这里是 False 会让requests一直等服务端给一个终止信号再获取响应，然而服务端是个死循环。</span></span><br><span class="line">    response = requests.get(url, stream=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> response.iter_lines(): <span class="comment"># iter_lines阻塞，直到收到新行。</span></span><br><span class="line">                <span class="keyword">if</span> line:</span><br><span class="line">                    line = line.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">                    <span class="keyword">if</span> line.startswith(<span class="string">&#x27;data:&#x27;</span>):</span><br><span class="line">                        data = line[<span class="number">5</span>:].strip()</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">f&quot;收到数据: <span class="subst">&#123;data&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;手动关闭连接&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;连接失败，状态码: <span class="subst">&#123;response.status_code&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 客户端向服务器建立 HTTP 连接，请求 /stream 资源。</span></span><br><span class="line">    sse_client(<span class="string">&quot;http://localhost:5001/stream&quot;</span>)</span><br></pre></td></tr></table></figure><p>service.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, Response,request</span><br><span class="line"><span class="keyword">import</span> time,json </span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/stream&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stream</span>():</span><br><span class="line">    question = request.args.get(<span class="string">&quot;question&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">event_stream</span>():</span><br><span class="line">        num = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">&quot;answer&quot;</span>: <span class="string">f&quot;回答片段 <span class="subst">&#123;num+<span class="number">1</span>&#125;</span> for question: <span class="subst">&#123;question&#125;</span>&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">yield</span> <span class="string">f&quot;data: <span class="subst">&#123;data&#125;</span>\n\n&quot;</span></span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 将生成器包装为持续输出的 HTTP 响应。</span></span><br><span class="line">    <span class="keyword">return</span> Response(event_stream(), mimetype=<span class="string">&#x27;text/event-stream&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5001</span>, debug=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务端视角</span></span><br><span class="line"><span class="comment"># 当客户端请求 /stream 时，Flask 调用 stream() 函数。</span></span><br><span class="line"><span class="comment"># stream() 返回一个生成器对象（event_stream() 的返回值）。</span></span><br><span class="line"><span class="comment"># Flask 将生成器包装在 Response 中，并开始迭代它：</span></span><br><span class="line"><span class="comment"># 每次迭代获取一个值（yield 的内容）。</span></span><br><span class="line"><span class="comment"># 将值发送给客户端。</span></span><br><span class="line"><span class="comment"># 等待下一次迭代。</span></span><br><span class="line"><span class="comment"># 生成器在客户端连接后立即开始执行（Flask 会调用它），但每次只执行到 yield 就暂停，暂停是为了把数据发送用的。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端视角</span></span><br><span class="line"><span class="comment"># requests.get(url, stream=True) 建立 HTTP 连接。</span></span><br><span class="line"><span class="comment"># response.iter_lines() 开始监听服务器数据：</span></span><br><span class="line"><span class="comment"># 初始时可能为空，等待服务器发送数据。</span></span><br><span class="line"><span class="comment"># 每次收到新行（\n），返回一行数据。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不会出现 服务端生成 1 2 3 4 5 客户端只收到 1 3 5 这样跳号的情况，因为 </span></span><br><span class="line"><span class="comment"># HTTP，具有以下特性：</span></span><br><span class="line"><span class="comment"># 有序传输：HTTP 是面向连接的协议，保证数据按发送顺序到达。</span></span><br><span class="line"><span class="comment"># 行分隔：SSE 消息以空行（\n\n）分隔，客户端按行解析。</span></span><br><span class="line"><span class="comment"># 自动重连：浏览器的 EventSource 内置重连机制，可恢复中断的连接。</span></span><br><span class="line"><span class="comment"># 服务端                网络                客户端</span></span><br><span class="line"><span class="comment"># ┌─────────┐      ┌─────────┐      ┌─────────┐</span></span><br><span class="line"><span class="comment"># │ 应用缓冲区│───→│ 网络缓冲区│───→│ 应用缓冲区│</span></span><br><span class="line"><span class="comment"># └─────────┘      └─────────┘      └─────────┘</span></span><br></pre></td></tr></table></figure><h1 id="stdio模式"><a href="#stdio模式" class="headerlink" title="stdio模式"></a>stdio模式</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mcp = FastMCP(name=<span class="string">&quot;weather&quot;</span>)</span><br><span class="line"><span class="comment"># ....</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 初始化并运行服务器 , 这里选传输方式。</span></span><br><span class="line">    mcp.run(transport=<span class="string">&#x27;stdio&#x27;</span>)</span><br></pre></td></tr></table></figure><p>配置json文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;weather&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;uv&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;--directory&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="string">&quot;/home/cys/data/MCPserver/my_weather_mcp_server&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;run&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;weather_stdio.py&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="sse模式"><a href="#sse模式" class="headerlink" title="sse模式"></a>sse模式</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化FastMCP服务器,取名并开启sse网络。 </span></span><br><span class="line">mcp = FastMCP(</span><br><span class="line">  name=<span class="string">&quot;weather&quot;</span>, </span><br><span class="line">  host=<span class="string">&quot;0.0.0.0&quot;</span>, </span><br><span class="line">  port=<span class="number">8005</span>, </span><br><span class="line">  sse_path=<span class="string">&quot;/sse&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ....</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>: </span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;开启 服务 starting server&#x27;</span>) </span><br><span class="line">    <span class="comment"># 初始化并运行服务器 , 这里选传输方式。 </span></span><br><span class="line">    mcp.run(transport=<span class="string">&#x27;sse&#x27;</span>)</span><br></pre></td></tr></table></figure><p>开启服务 uv run weather_http.py</p><p>修改json 配置。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;weather&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://127.0.0.1:8005/sse&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sse&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="http模式"><a href="#http模式" class="headerlink" title="http模式"></a>http模式</h1><p>weather_http.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化FastMCP服务器,取名并开启网络。 </span></span><br><span class="line">mcp = FastMCP(</span><br><span class="line">  name=<span class="string">&quot;weather&quot;</span>, </span><br><span class="line">  host=<span class="string">&quot;0.0.0.0&quot;</span>, </span><br><span class="line">  port=<span class="number">8005</span>, </span><br><span class="line">  sse_path=<span class="string">&quot;/mcp&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ....</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>: </span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;开启 服务 starting server&#x27;</span>) </span><br><span class="line">    <span class="comment"># 初始化并运行服务器 , 这里选传输方式。 </span></span><br><span class="line">    mcp.run(transport=<span class="string">&#x27;streamable-http&#x27;</span>)</span><br></pre></td></tr></table></figure><p>开启服务 uv run weather_http.py</p><p>修改json 配置。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;weather&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://172.17.0.1:8005/mcp&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;streamableHTTP&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="dify-中的-mcp-配置"><a href="#dify-中的-mcp-配置" class="headerlink" title="dify 中的 mcp 配置"></a>dify 中的 mcp 配置</h1><p>dify 中 mcp 只支持 sse 模式，所以，我们可以看见 用的 mcp 配置 按照 一些mcp 的GitHub中的 指导 ，在 Cline 或者 Cherry Studio 中可以用，但是 在 DIfy 中 是不可用的， 可以遇到 这样类型的报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to transform agent message: req_id: 74bcdf4f71 PluginInvokeError: &#123;<span class="string">&quot;args&quot;</span>:&#123;&#125;,<span class="string">&quot;error_type&quot;</span>:<span class="string">&quot;TypeError&quot;</span>,<span class="string">&quot;message&quot;</span>:<span class="string">&quot;Invalid type for url. Expected str or httpx.URL, got \u003cclass &#x27;NoneType&#x27;\u003e: None&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p> 就是因为 dify 默认用了sse 访问形式，解析studio的命令会出现 返回值和预期不一致的情况。 </p><p>为了解决这个问题，我们 有两种方法，</p><p>方法一：改代码：</p><p>方法二：用转换工具：</p><h1 id="Python开发MCP-Server"><a href="#Python开发MCP-Server" class="headerlink" title="Python开发MCP Server"></a>Python开发MCP Server</h1><h2 id="阅读："><a href="#阅读：" class="headerlink" title="阅读："></a>阅读：</h2><p>用 openweather为模版 改一个自己的。</p><p><a href="https://openweathermap.org/">https://openweathermap.org/</a></p><p>进入它的API，搜free ，看到 有一个current weather data，进入API doc。</p><p>看它需要怎么用。默认就三个参数 经纬度和APIkey。</p><p><img src="/2025/08/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%8B%E5%86%99MCPserver/%E6%88%AA%E5%B1%8F2025-08-21%2020.18.53.jpg" alt="截屏2025-08-21 20.18.53"></p><p>从右边可见 还有基于别的 方法查询，比如城市名称。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">浏览器：</span><br><span class="line">https<span class="punctuation">:</span><span class="comment">//api.openweathermap.org/data/2.5/weather?q=beijing&amp;appid=4cc5540e55d86d33858c1fdff4fda354</span></span><br><span class="line"></span><br><span class="line">返回：</span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;coord&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;lon&quot;</span><span class="punctuation">:</span><span class="number">116.3972</span><span class="punctuation">,</span><span class="attr">&quot;lat&quot;</span><span class="punctuation">:</span><span class="number">39.9075</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;weather&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">501</span><span class="punctuation">,</span><span class="attr">&quot;main&quot;</span><span class="punctuation">:</span><span class="string">&quot;Rain&quot;</span><span class="punctuation">,</span><span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;moderate rain&quot;</span><span class="punctuation">,</span><span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span><span class="string">&quot;10n&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="attr">&quot;base&quot;</span><span class="punctuation">:</span><span class="string">&quot;stations&quot;</span><span class="punctuation">,</span><span class="attr">&quot;main&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;temp&quot;</span><span class="punctuation">:</span><span class="number">299.35</span><span class="punctuation">,</span><span class="attr">&quot;feels_like&quot;</span><span class="punctuation">:</span><span class="number">299.35</span><span class="punctuation">,</span><span class="attr">&quot;temp_min&quot;</span><span class="punctuation">:</span><span class="number">299.35</span><span class="punctuation">,</span><span class="attr">&quot;temp_max&quot;</span><span class="punctuation">:</span><span class="number">299.35</span><span class="punctuation">,</span><span class="attr">&quot;pressure&quot;</span><span class="punctuation">:</span><span class="number">1003</span><span class="punctuation">,</span><span class="attr">&quot;humidity&quot;</span><span class="punctuation">:</span><span class="number">95</span><span class="punctuation">,</span><span class="attr">&quot;sea_level&quot;</span><span class="punctuation">:</span><span class="number">1003</span><span class="punctuation">,</span><span class="attr">&quot;grnd_level&quot;</span><span class="punctuation">:</span><span class="number">999</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;visibility&quot;</span><span class="punctuation">:</span><span class="number">10000</span><span class="punctuation">,</span><span class="attr">&quot;wind&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;speed&quot;</span><span class="punctuation">:</span><span class="number">1.34</span><span class="punctuation">,</span><span class="attr">&quot;deg&quot;</span><span class="punctuation">:</span><span class="number">14</span><span class="punctuation">,</span><span class="attr">&quot;gust&quot;</span><span class="punctuation">:</span><span class="number">1.94</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;rain&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;1h&quot;</span><span class="punctuation">:</span><span class="number">1.6</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;clouds&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;all&quot;</span><span class="punctuation">:</span><span class="number">90</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;dt&quot;</span><span class="punctuation">:</span><span class="number">1755778408</span><span class="punctuation">,</span><span class="attr">&quot;sys&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;country&quot;</span><span class="punctuation">:</span><span class="string">&quot;CN&quot;</span><span class="punctuation">,</span><span class="attr">&quot;sunrise&quot;</span><span class="punctuation">:</span><span class="number">1755725505</span><span class="punctuation">,</span><span class="attr">&quot;sunset&quot;</span><span class="punctuation">:</span><span class="number">1755774231</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;timezone&quot;</span><span class="punctuation">:</span><span class="number">28800</span><span class="punctuation">,</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">1816670</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Beijing&quot;</span><span class="punctuation">,</span><span class="attr">&quot;cod&quot;</span><span class="punctuation">:</span><span class="number">200</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/08/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%8B%E5%86%99MCPserver/%E6%88%AA%E5%B1%8F2025-08-21%2020.55.57.jpg" alt="截屏2025-08-21 20.55.57"></p><h2 id="建立文件夹环境："><a href="#建立文件夹环境：" class="headerlink" title="建立文件夹环境："></a>建立文件夹环境：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">uv init my_weather_mcp_server -p 3.10 <span class="comment"># 用这个初始化出一个uv环节的文件夹，python用3.10的。</span></span><br><span class="line"><span class="built_in">cd</span> my_weather_mcp_server</span><br><span class="line">uv venv                               <span class="comment"># 创建一个虚拟的python环境。文件夹中的.venv 就是虚拟环境。</span></span><br><span class="line"><span class="built_in">source</span> .venv/bin/activate             <span class="comment"># 激活这个环境，类似 conda。</span></span><br><span class="line">uv add mcp[cli] httpx                 <span class="comment"># 安装依赖</span></span><br></pre></td></tr></table></figure><h2 id="编码："><a href="#编码：" class="headerlink" title="编码："></a>编码：</h2><p>weather_stdio.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Any</span> </span><br><span class="line"><span class="keyword">import</span> httpx </span><br><span class="line"><span class="keyword">from</span> mcp.server.fastmcp <span class="keyword">import</span> FastMCP </span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化FastMCP服务器,取名</span></span><br><span class="line">mcp = FastMCP(<span class="string">&quot;weather&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常量</span></span><br><span class="line">NWS_API_BASE = <span class="string">&quot;https://api.openweathermap.org/data/2.5/weather&quot;</span></span><br><span class="line">USER_AGENT = <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开尔文转摄氏度</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">kelvin_to_celsius</span>(<span class="params">kelvin: <span class="built_in">float</span></span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">    <span class="keyword">return</span> kelvin - <span class="number">273.15</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">get_weather_from_cityname</span>(<span class="params">cityname: <span class="built_in">str</span></span>) -&gt; <span class="built_in">dict</span>[<span class="built_in">str</span>,<span class="type">Any</span>] | <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;发请求并处理错误 &quot;</span></span><br><span class="line">    <span class="comment"># ​​Accept 告知服务器客户端期望接收的数据格式​​，application/geo+json 是地理常用的json格式。</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: USER_AGENT,</span><br><span class="line">        <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;application/geo+json&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&quot;q&quot;</span>: cityname,</span><br><span class="line">        <span class="string">&quot;appid&quot;</span>: <span class="string">&quot;4cc5540e55d86d33858c1fdff4fda354&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> httpx.AsyncClient()  <span class="keyword">as</span> client:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = <span class="keyword">await</span> client.get(NWS_API_BASE,headers=headers,params=params)</span><br><span class="line">            response.raise_for_status() <span class="comment"># 自检 HTTP 响应状态码，异常抛出。</span></span><br><span class="line">            <span class="keyword">return</span> response.json()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">format_alter</span>(<span class="params">feature: <span class="built_in">dict</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;接口返回数据格式化输出&quot;</span></span><br><span class="line">    <span class="keyword">if</span> feature[<span class="string">&quot;cod&quot;</span>] == <span class="number">404</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;参数异常，查看是否输入城市名称错误&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> feature[<span class="string">&quot;cod&quot;</span>] == <span class="number">401</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;API key 异常&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> feature[<span class="string">&quot;cod&quot;</span>] == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                city:<span class="subst">&#123;feature.get(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;unknowCity&#x27;</span>)&#125;</span></span></span><br><span class="line"><span class="string">                weather:<span class="subst">&#123;feature.get(<span class="string">&#x27;weather&#x27;</span>,[&#123;&#125;</span>])[0].get(&#x27;description&#x27;,&#x27;unkonw_weather&#x27;)&#125;</span></span><br><span class="line"><span class="string">                min_temperature:<span class="subst">&#123;kelvin_to_celsius(feature.get(<span class="string">&#x27;main&#x27;</span>,&#123;&#125;</span>).get(&#x27;temp_min&#x27;,0)):.2f&#125;℃</span></span><br><span class="line"><span class="string">                max_temperature:<span class="subst">&#123;kelvin_to_celsius(feature.get(<span class="string">&#x27;main&#x27;</span>,&#123;&#125;</span>).get(&#x27;temp_max&#x27;,0)):.2f&#125;℃</span></span><br><span class="line"><span class="string">                humidity:<span class="subst">&#123;feature.get(<span class="string">&#x27;main&#x27;</span>,&#123;&#125;</span>).get(&#x27;humidity&#x27;,0)&#125;%</span></span><br><span class="line"><span class="string">                wind:<span class="subst">&#123;feature.get(<span class="string">&#x27;wind&#x27;</span>,&#123;&#125;</span>).get(&#x27;speed&#x27;,0):.2f&#125; m/s</span></span><br><span class="line"><span class="string">                &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此装饰器将业务代码转为MCP服务，让大模型去调用。</span></span><br><span class="line"><span class="meta">@mcp.tool()</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">get_weather_from_cityname_tool</span>(<span class="params">city: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="comment"># 注意方法内的引号内内容，就是通过它让大模型读到这个def方法的用处，所以要写好。</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Get weather information for a city.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        city (str): City name. For Chinese cities, please use pinyin.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        str: Weather description.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data = <span class="keyword">await</span> get_weather_from_cityname(city)</span><br><span class="line">    <span class="keyword">return</span> format_alter(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 初始化并运行服务器 , 这里选传输方式。</span></span><br><span class="line">    mcp.run(transport=<span class="string">&#x27;stdio&#x27;</span>)</span><br></pre></td></tr></table></figure><p>weather_sse.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Any</span> </span><br><span class="line"><span class="keyword">import</span> httpx </span><br><span class="line"><span class="keyword">from</span> mcp.server.fastmcp <span class="keyword">import</span> FastMCP </span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化FastMCP服务器,取名并开启sse网络。</span></span><br><span class="line">mcp = FastMCP(name=<span class="string">&quot;weather&quot;</span>,</span><br><span class="line">              host=<span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line">              port=<span class="number">8005</span>,</span><br><span class="line">              sse_path=<span class="string">&quot;/sse&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常量</span></span><br><span class="line">NWS_API_BASE = <span class="string">&quot;https://api.openweathermap.org/data/2.5/weather&quot;</span></span><br><span class="line">USER_AGENT = <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开尔文转摄氏度</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">kelvin_to_celsius</span>(<span class="params">kelvin: <span class="built_in">float</span></span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">    <span class="keyword">return</span> kelvin - <span class="number">273.15</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">get_weather_from_cityname</span>(<span class="params">cityname: <span class="built_in">str</span></span>) -&gt; <span class="built_in">dict</span>[<span class="built_in">str</span>,<span class="type">Any</span>] | <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;发请求并处理错误 &quot;</span></span><br><span class="line">    <span class="comment"># ​​Accept 告知服务器客户端期望接收的数据格式​​，application/geo+json 是地理常用的json格式。</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: USER_AGENT,</span><br><span class="line">        <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;application/geo+json&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&quot;q&quot;</span>: cityname,</span><br><span class="line">        <span class="string">&quot;appid&quot;</span>: <span class="string">&quot;4cc5540e55d86d33858c1fdff4fda354&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> httpx.AsyncClient()  <span class="keyword">as</span> client:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = <span class="keyword">await</span> client.get(NWS_API_BASE,headers=headers,params=params)</span><br><span class="line">            response.raise_for_status() <span class="comment"># 自检 HTTP 响应状态码，异常抛出。</span></span><br><span class="line">            <span class="keyword">return</span> response.json()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">format_alter</span>(<span class="params">feature: <span class="built_in">dict</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;接口返回数据格式化输出&quot;</span></span><br><span class="line">    <span class="keyword">if</span> feature[<span class="string">&quot;cod&quot;</span>] == <span class="number">404</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;参数异常，查看是否输入城市名称错误&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> feature[<span class="string">&quot;cod&quot;</span>] == <span class="number">401</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;API key 异常&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> feature[<span class="string">&quot;cod&quot;</span>] == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                city:<span class="subst">&#123;feature.get(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;unknowCity&#x27;</span>)&#125;</span></span></span><br><span class="line"><span class="string">                weather:<span class="subst">&#123;feature.get(<span class="string">&#x27;weather&#x27;</span>,[&#123;&#125;</span>])[0].get(&#x27;description&#x27;,&#x27;unkonw_weather&#x27;)&#125;</span></span><br><span class="line"><span class="string">                min_temperature:<span class="subst">&#123;kelvin_to_celsius(feature.get(<span class="string">&#x27;main&#x27;</span>,&#123;&#125;</span>).get(&#x27;temp_min&#x27;,0)):.2f&#125;℃</span></span><br><span class="line"><span class="string">                max_temperature:<span class="subst">&#123;kelvin_to_celsius(feature.get(<span class="string">&#x27;main&#x27;</span>,&#123;&#125;</span>).get(&#x27;temp_max&#x27;,0)):.2f&#125;℃</span></span><br><span class="line"><span class="string">                humidity:<span class="subst">&#123;feature.get(<span class="string">&#x27;main&#x27;</span>,&#123;&#125;</span>).get(&#x27;humidity&#x27;,0)&#125;%</span></span><br><span class="line"><span class="string">                wind:<span class="subst">&#123;feature.get(<span class="string">&#x27;wind&#x27;</span>,&#123;&#125;</span>).get(&#x27;speed&#x27;,0):.2f&#125; m/s</span></span><br><span class="line"><span class="string">                &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此装饰器将业务代码转为MCP服务，让大模型去调用。</span></span><br><span class="line"><span class="meta">@mcp.tool()</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">get_weather_from_cityname_tool</span>(<span class="params">city: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="comment"># 注意方法内的引号内内容，就是通过它让大模型读到这个def方法的用处，所以要写好。</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Get weather information for a city.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        city (str): City name. For Chinese cities, please use pinyin.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        str: Weather description.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data = <span class="keyword">await</span> get_weather_from_cityname(city)</span><br><span class="line">    <span class="keyword">return</span> format_alter(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;开启 服务 starting server&#x27;</span>)</span><br><span class="line">    <span class="comment"># 初始化并运行服务器 , 这里选传输方式。</span></span><br><span class="line">    mcp.run(transport=<span class="string">&#x27;sse&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="写MCP的json配置："><a href="#写MCP的json配置：" class="headerlink" title="写MCP的json配置："></a>写MCP的json配置：</h2><h3 id="stdio-传输方式"><a href="#stdio-传输方式" class="headerlink" title="stdio 传输方式"></a>stdio 传输方式</h3><p>配置json文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;weather&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;uv&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;--directory&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="string">&quot;/home/cys/data/MCPserver/my_weather_mcp_server&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;run&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;weather_stdio.py&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="sse-传输方式"><a href="#sse-传输方式" class="headerlink" title="sse 传输方式"></a>sse 传输方式</h3><p>先开启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv run weather_sse.py</span><br></pre></td></tr></table></figure><p><img src="/2025/08/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%8B%E5%86%99MCPserver/%E6%88%AA%E5%B1%8F2025-08-22%2014.08.57.jpg" alt="截屏2025-08-22 14.08.57"></p><p>再配置json文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;weather&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://127.0.0.1:8005/sse&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sse&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>对于运行在docker容器中的dify而言，还需要如下配置。</strong></p><p>宿主机运行命令，查出docker容器访问宿主机的IP。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ip addr show docker0</span><br><span class="line"></span><br><span class="line">7: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default</span><br><span class="line">    <span class="built_in">link</span>/ether 3a:60:3b:3b:d5:f4 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>172.17.0.1 就是默认的 容器访问宿主机的地址。</p><p>上面的json配置改写</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;weather&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://172.17.0.1:8005/sse&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sse&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/08/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%8B%E5%86%99MCPserver/%E6%88%AA%E5%B1%8F2025-08-22%2014.30.25.jpg" alt="截屏2025-08-22 14.30.25"></p><p><img src="/2025/08/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%8B%E5%86%99MCPserver/%E6%88%AA%E5%B1%8F2025-08-22%2014.29.59.jpg" alt="截屏2025-08-22 14.29.59"></p><h1 id="手写-MCP-遇到的一个常见问题"><a href="#手写-MCP-遇到的一个常见问题" class="headerlink" title="手写 MCP 遇到的一个常见问题"></a>手写 MCP 遇到的一个常见问题</h1><p>如果在 自己写的 MCP服务的 后台已经看见了 200 的日志，说明 Dify 已经能成功连到你的  服务了。</p><p>但是遇到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Run failed: Failed to transform agent message: req_id: 52df8d2480 PluginInvokeError: &#123;<span class="string">&quot;args&quot;</span>:&#123;&#125;,<span class="string">&quot;error_type&quot;</span>:<span class="string">&quot;AttributeError&quot;</span>,<span class="string">&quot;message&quot;</span>:<span class="string">&quot;&#x27;NoneType&#x27; object has no attribute &#x27;parameters&#x27;&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>这个意思是 PluginInvokeError MCP插件没调用起来，</p><p><code>FastMCP</code> 的 <code>@mcp.tool()</code> 装饰器会自动从 <strong>函数签名</strong>和<strong>docstring</strong>生成 JSON Schema，返回给 Dify。<br> 但是 docstring 写法有点“模糊”，导致 schema 生成失败：</p><p>比如这种风格的 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Get weather information for a city.</span></span><br><span class="line"><span class="string">Args:</span></span><br><span class="line"><span class="string">    city: city name. for chinese cities,please use pinyin.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><code>fastmcp</code> 并不解析这种 <code>Args:</code> 风格，它期望 <strong>Google &#x2F; NumPy 风格</strong> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Get weather information for a city.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Args:</span></span><br><span class="line"><span class="string">    city (str): City name. For Chinese cities, please use pinyin.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Returns:</span></span><br><span class="line"><span class="string">    str: Weather description.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>可以直接手写你的原始doctoring，然后要大模型给你 改写成 <strong>Google &#x2F; NumPy 风格</strong> ，再 贴进代码中。</p><p>另外，还有一个问题是 ，一个 agent 只要被 大模型调用，就会进入 MCP 的业务中，如果这个 MCP 业务是处理 单个城市信息的，你问了一堆 城市信息，如果大模型不懂的拆分问题，一个一个去调用 MCP业务查询，那就会 一股脑丢进 MCP 业务中，然后导致 查不到东西。<br>除非让大模型懂拆分，或者在 MCP 中 写好 业务逻辑，或者在 docstring 中解释清楚看看大模型能不能解决这个拆分查询的问题。</p>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="机器学习" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="dify" scheme="http://example.com/tags/dify/"/>
    
    <category term="MCP" scheme="http://example.com/tags/MCP/"/>
    
  </entry>
  
  <entry>
    <title>Dify笔记</title>
    <link href="http://example.com/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/</id>
    <published>2025-08-13T08:27:21.000Z</published>
    <updated>2025-08-25T02:26:52.979Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dify-可以做什么"><a href="#Dify-可以做什么" class="headerlink" title="Dify 可以做什么"></a>Dify 可以做什么</h1><ul><li>聊天助手</li><li>文本生成应用</li><li>Agent</li><li>Chatflow 对话流：复杂流程的多轮对话场景，支持记忆，动态应用编排；</li><li>workflow 工作流：自动化、批处理等单轮生成类型任务的应用编排方式，单向生成结果；</li></ul><h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/cys/data/docker-data</span><br><span class="line"></span><br><span class="line">git https://github.com/langgenius/dify.git</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /home/cys/data/docker-data/dify/docker</span><br><span class="line"></span><br><span class="line">docker compose up -d </span><br></pre></td></tr></table></figure><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-01%2023.07.40.png" alt="截屏2025-05-01 23.07.40"></p><h1 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/cys/data/docker-data/dify/docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里的 docker-compose.yaml 文件我就不全部展开了，服务很多，写了灵活的配置，会从 .env 文件中 调用，我们对 几个关键的位置 就行修改。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们 需要 先明白几个点，在 yaml 文件中的那个服务 如果没有明确宿主机和容器的映射关系，那就是只在这个容器中内部使用，然后通过yaml 中写的 docker network 连接 其他几个容器，没有和宿主机扯上关系；一个宿主机下有几个这样不端口映射的容器，那么几个（如radis） 的容器运行是不会相互影响的。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="存储位置"><a href="#存储位置" class="headerlink" title="存储位置"></a>存储位置</h2><p>从你的 <code>docker-compose.yml</code> 文件可以看出，当前数据存储主要通过以下服务挂载到容器中：</p><ol><li><strong>PostgreSQL（db服务）</strong>：<code>./volumes/db/data</code></li><li><strong>Redis</strong>：<code>./volumes/redis/data</code></li><li><strong>Weaviate&#x2F;Qdrant&#x2F;Chroma等向量库</strong>：<code>./volumes/weaviate</code>、<code>./volumes/qdrant</code></li><li><strong>插件和存储目录</strong>：<code>./volumes/app/storage</code></li><li><strong>其他辅助服务</strong>：如 <code>sandbox</code>、<code>plugin_daemon</code> 等</li></ol><p>而我的dify 下载的位置本身就在 <code>/home/cys/data/docker-data/dify</code>，<code>/home/cys/data</code> 下挂了52T的raid 磁盘空间是足够的。所以就不需要再修改了。</p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250515100036_463.png" alt="微信图片_20250515100036_463"></p><p>可以看见 数据其实都在 <code>/home/cys/data/docker-data/dify/docker/volumes</code> 中。</p><h2 id="核心服务列表"><a href="#核心服务列表" class="headerlink" title="核心服务列表"></a><strong>核心服务列表</strong></h2><table><thead><tr><th align="center">服务名称</th><th align="center">功能说明</th><th align="center">端口映射&#x2F;内部端口</th></tr></thead><tbody><tr><td align="center"><strong>nginx</strong></td><td align="center">反向代理，对外暴露 Web 和 API 服务</td><td align="center"><code>80:80</code>、<code>443:443</code></td></tr><tr><td align="center"><strong>web</strong></td><td align="center">Dify 前端界面</td><td align="center">通过 nginx 代理（默认 80）</td></tr><tr><td align="center"><strong>api</strong></td><td align="center">Dify 后端 API</td><td align="center">通过 nginx 代理（默认 80）</td></tr><tr><td align="center"><strong>worker</strong></td><td align="center">异步任务处理服务（如数据集处理、模型调用）</td><td align="center">无直接暴露</td></tr><tr><td align="center"><strong>db</strong></td><td align="center">PostgreSQL 数据库</td><td align="center">内部 5432</td></tr><tr><td align="center"><strong>redis</strong></td><td align="center">Redis 缓存</td><td align="center">内部 6379</td></tr><tr><td align="center"><strong>sandbox</strong></td><td align="center">代码沙箱环境（用于插件安全执行）</td><td align="center">内部 8194</td></tr><tr><td align="center"><strong>ssrf_proxy</strong></td><td align="center">安全代理服务（防止 SSRF 攻击）</td><td align="center">内部 3128</td></tr><tr><td align="center"><strong>plugin_daemon</strong></td><td align="center">插件守护进程（用于插件管理）</td><td align="center">外部 <code>5003:5003</code></td></tr><tr><td align="center"><strong>weaviate</strong></td><td align="center">向量数据库（需手动启用）</td><td align="center">内部 8080</td></tr><tr><td align="center"><strong>qdrant</strong></td><td align="center">向量数据库（需手动启用）</td><td align="center">内部 6333</td></tr><tr><td align="center"><strong>elasticsearch</strong></td><td align="center">全文搜索服务（需手动启用）</td><td align="center">外部 <code>9200:9200</code></td></tr></tbody></table><h2 id="修改端口"><a href="#修改端口" class="headerlink" title="修改端口"></a>修改端口</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我想把 默认的Dify前端后端的port改成 8003 和 8004；</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保宿主机的 8003 和 8004 端口未被占用：# 若无输出，则表示端口可用</span></span><br><span class="line">sudo netstat -tuln | grep -E <span class="string">&#x27;8003|8004&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于Dify的访问是通过 nginx 代理（默认 80），所以我们实际上是对yaml中 nginx 相关内容修改。</span></span><br></pre></td></tr></table></figure><p>Docker-compose.yaml 的services:中，修改nginx服务的映射端口：</p><p><code>$&#123;EXPOSE_NGINX_PORT:-8003&#125;:$&#123;NGINX_PORT:-8003&#125;</code></p><p><code>&#39;$&#123;EXPOSE_NGINX_SSL_PORT:-8004&#125;:$&#123;NGINX_SSL_PORT:-8004&#125;&#39;</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">------------------------------------------------------------------------</span></span><br><span class="line"> <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nginx/nginx.conf.template:/etc/nginx/nginx.conf.template</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nginx/proxy.conf.template:/etc/nginx/proxy.conf.template</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nginx/https.conf.template:/etc/nginx/https.conf.template</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nginx/conf.d:/etc/nginx/conf.d</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nginx/docker-entrypoint.sh:/docker-entrypoint-mount.sh</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./nginx/ssl:/etc/ssl</span> <span class="comment"># cert dir (legacy)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./volumes/certbot/conf/live:/etc/letsencrypt/live</span> <span class="comment"># cert dir (with certbot container)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./volumes/certbot/conf:/etc/letsencrypt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./volumes/certbot/www:/var/www/html</span></span><br><span class="line">    <span class="attr">entrypoint:</span> [ <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, <span class="string">&quot;cp /docker-entrypoint-mount.sh /docker-entrypoint.sh &amp;&amp; sed -i &#x27;s/\r$$//&#x27; /docker-entrypoint.sh &amp;&amp; chmod +x /docker-entrypoint.sh &amp;&amp; /docker-entrypoint.sh&quot;</span> ]</span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">NGINX_SERVER_NAME:</span> <span class="string">$&#123;NGINX_SERVER_NAME:-_&#125;</span></span><br><span class="line">      <span class="attr">NGINX_HTTPS_ENABLED:</span> <span class="string">$&#123;NGINX_HTTPS_ENABLED:-false&#125;</span></span><br><span class="line">      <span class="attr">NGINX_SSL_PORT:</span> <span class="string">$&#123;NGINX_SSL_PORT:-8004&#125;</span>  <span class="comment">#$&#123;NGINX_SSL_PORT:-443&#125;</span></span><br><span class="line">      <span class="attr">NGINX_PORT:</span> <span class="string">$&#123;NGINX_PORT:-8003&#125;</span> <span class="comment">#$&#123;NGINX_PORT:-80&#125;</span></span><br><span class="line">      <span class="comment"># You&#x27;re required to add your own SSL certificates/keys to the `./nginx/ssl` directory</span></span><br><span class="line">      <span class="comment"># and modify the env vars below in .env if HTTPS_ENABLED is true.</span></span><br><span class="line">      <span class="attr">NGINX_SSL_CERT_FILENAME:</span> <span class="string">$&#123;NGINX_SSL_CERT_FILENAME:-dify.crt&#125;</span></span><br><span class="line">      <span class="attr">NGINX_SSL_CERT_KEY_FILENAME:</span> <span class="string">$&#123;NGINX_SSL_CERT_KEY_FILENAME:-dify.key&#125;</span></span><br><span class="line">      <span class="attr">NGINX_SSL_PROTOCOLS:</span> <span class="string">$&#123;NGINX_SSL_PROTOCOLS:-TLSv1.1</span> <span class="string">TLSv1.2</span> <span class="string">TLSv1.3&#125;</span></span><br><span class="line">      <span class="attr">NGINX_WORKER_PROCESSES:</span> <span class="string">$&#123;NGINX_WORKER_PROCESSES:-auto&#125;</span></span><br><span class="line">      <span class="attr">NGINX_CLIENT_MAX_BODY_SIZE:</span> <span class="string">$&#123;NGINX_CLIENT_MAX_BODY_SIZE:-15M&#125;</span></span><br><span class="line">      <span class="attr">NGINX_KEEPALIVE_TIMEOUT:</span> <span class="string">$&#123;NGINX_KEEPALIVE_TIMEOUT:-65&#125;</span></span><br><span class="line">      <span class="attr">NGINX_PROXY_READ_TIMEOUT:</span> <span class="string">$&#123;NGINX_PROXY_READ_TIMEOUT:-3600s&#125;</span></span><br><span class="line">      <span class="attr">NGINX_PROXY_SEND_TIMEOUT:</span> <span class="string">$&#123;NGINX_PROXY_SEND_TIMEOUT:-3600s&#125;</span></span><br><span class="line">      <span class="attr">NGINX_ENABLE_CERTBOT_CHALLENGE:</span> <span class="string">$&#123;NGINX_ENABLE_CERTBOT_CHALLENGE:-false&#125;</span></span><br><span class="line">      <span class="attr">CERTBOT_DOMAIN:</span> <span class="string">$&#123;CERTBOT_DOMAIN:-&#125;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">api</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">web</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;$&#123;EXPOSE_NGINX_PORT:-8003&#125;:$&#123;NGINX_PORT:-8003&#125;&#x27;</span>  <span class="comment">#&#x27;$&#123;EXPOSE_NGINX_PORT:-80&#125;:$&#123;NGINX_PORT:-80&#125;&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;$&#123;EXPOSE_NGINX_SSL_PORT:-8004&#125;:$&#123;NGINX_SSL_PORT:-8004&#125;&#x27;</span>  <span class="comment">#&#x27;$&#123;EXPOSE_NGINX_SSL_PORT:-443&#125;:$&#123;NGINX_SSL_PORT:-443&#125;&#x27;</span></span><br><span class="line"><span class="string">------------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure><p>.env</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找到 nginx 的外部端口 和容器内端口 一共四个地方，修改即可，这里用 https的 走8004，http走8003 ；</span></span><br><span class="line"><span class="string">EXPOSE_NGINX_PORT=8003</span></span><br><span class="line"><span class="string">EXPOSE_NGINX_SSL_PORT=8004</span></span><br><span class="line"><span class="string">NGINX_PORT=8003</span></span><br><span class="line"><span class="string">NGINX_SSL_PORT=8004</span></span><br></pre></td></tr></table></figure><p>防火墙给端口开一下；</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow 8003/tcp</span><br><span class="line">sudo ufw allow 8004/tcp</span><br></pre></td></tr></table></figure><p>重启开启一下 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker compose down</span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p>如果没有 成功开启 可以 <code>docker compose logs nginx</code> 检查一下 容器日志。</p><p><code>./nginx/docker-entrypoint.sh </code>这个脚本会决定最终生成的  <code>default.conf</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cys@cysserver:~/data/docker-data/dify/docker/nginx$ <span class="built_in">ls</span></span><br><span class="line">conf.d  docker-entrypoint.sh  https.conf.template  nginx.conf.template  proxy.conf.template  ssl</span><br><span class="line"></span><br><span class="line">cys@cysserver:~/data/docker-data/dify/docker/nginx/conf.d$ <span class="built_in">ls</span></span><br><span class="line">default.conf  default.conf.template  default.conf~</span><br></pre></td></tr></table></figure><p>我们可以看到 这个 <code>default.conf</code> 文件 中 监听的端口已经是8003了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 8003;</span><br><span class="line">    server_name _;</span><br><span class="line"></span><br><span class="line">    location /console/api &#123;</span><br><span class="line">      proxy_pass http://api:5001;</span><br><span class="line">      include proxy.conf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /api &#123;</span><br><span class="line">      proxy_pass http://api:5001;</span><br><span class="line">      include proxy.conf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /v1 &#123;</span><br><span class="line">      proxy_pass http://api:5001;</span><br><span class="line">      include proxy.conf;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="进入web页面"><a href="#进入web页面" class="headerlink" title="进入web页面"></a>进入web页面</h2><p>访问：   <a href="http://10.5.9.252:8003/">http://10.5.9.252:8003/</a></p><p>注册一下Dify。</p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-07%2021.50.46.png" alt="截屏2025-05-07 21.50.46"></p><p>在设置中安装模型供应商的插件，我们之前在本地部署了 vllm集群的 Deepseek，也可以换大模型，但是换了模型就要在这里换一下对应的插件。</p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-08%2009.43.46.jpg" alt="截屏2025-05-08 09.43.46"></p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-08%2009.46.50.jpg" alt="截屏2025-05-08 09.46.50"></p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-14%2010.39.53.jpg" alt="截屏2025-05-14 10.39.53"></p><p>在这里可以 把我们之前本地部署的大模型和嵌入模型等等 都配置进去；</p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-14%2010.38.13.jpg" alt="截屏2025-05-14 10.38.13"></p><p>同样的道理，我之前在本地部署的 嵌入模型 也可以用同样的方法添加进来，在模型供应商中找啊到 我用的Text Embedding Inference。</p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-15%2010.17.21.jpg" alt="截屏2025-05-15 10.17.21"></p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-15%2010.22.42.jpg" alt="截屏2025-05-15 10.22.42"></p><p>我这里的 URL 是 <code>http://10.5.9.252:8002</code> 没有 带 &#x2F;v1 。</p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-15%2010.31.24.jpg" alt="截屏2025-05-15 10.31.24"></p><p>插件中可见 已经有了 嵌入模型了。</p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-15%2010.35.20.jpg" alt="截屏2025-05-15 10.35.20"></p><h1 id="AI-应用的创建"><a href="#AI-应用的创建" class="headerlink" title="AI 应用的创建"></a>AI 应用的创建</h1><p>点击“工作室” 创建空白应用。</p><h2 id="创建聊天助手"><a href="#创建聊天助手" class="headerlink" title="创建聊天助手"></a>创建聊天助手</h2><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-14%2010.48.53.jpg" alt="截屏2025-05-14 10.48.53"></p><p>填写提示词</p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-14%2010.52.30.jpg" alt="截屏2025-05-14 10.52.30"></p><p>推荐用 大语言模型生成提示词，等个几十秒吧。<img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-14%2011.01.53.jpg" alt="截屏2025-05-14 11.01.53"></p><p>生成以后再应用一下就好。</p><p>在调试和预览、对话、知识库什么的都可以用，右上角可以换大模型。</p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-15%2010.33.00.jpg" alt="截屏2025-05-15 10.33.00"></p><h2 id="创建Agent"><a href="#创建Agent" class="headerlink" title="创建Agent"></a>创建Agent</h2><p>打个比方 是 生成 图片的 Agent ，可以先本地运行一个 多模态的模型，然后 在插件中 下载一个 stability，在 工作室 Agent 界面下方 工具中添加 stability 插件。</p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-15%2014.50.36.png" alt="截屏2025-05-15 14.50.36"></p><h2 id="创建文本生成应用"><a href="#创建文本生成应用" class="headerlink" title="创建文本生成应用"></a>创建文本生成应用</h2><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-15%2014.55.28.jpg" alt="截屏2025-05-15 14.55.28"></p><p>打一个 <code>&#123;</code> 就会让你选择是否新建变量。</p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-15%2014.57.37.jpg" alt="截屏2025-05-15 14.57.37"></p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-15%2014.58.14.jpg" alt="截屏2025-05-15 14.58.14"></p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-15%2015.01.29.jpg" alt="截屏2025-05-15 15.01.29"></p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-15%2015.02.29.jpg" alt="截屏2025-05-15 15.02.29"></p><p>可见 右边 “调试与预览” 中 出现了左边 提示词的 内容；</p><p>点击运行</p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-15%2016.52.43.jpg" alt="截屏2025-05-15 16.52.43"></p><h1 id="AI应用工具箱"><a href="#AI应用工具箱" class="headerlink" title="AI应用工具箱"></a>AI应用工具箱</h1><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-15%2017.20.55.png" alt="截屏2025-05-15 17.20.55"></p><p>以聊天助手为例</p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-15%2017.25.30.jpg" alt="截屏2025-05-15 17.25.30"></p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-15%2017.25.16.jpg" alt="截屏2025-05-15 17.25.16"></p><p>对话开场白 可以手动给用户选择，下一步问题的建议、 实现内容审查等等。<img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-15%2017.28.42.png" alt="截屏2025-05-15 17.28.42"><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-15%2017.29.05.png" alt="截屏2025-05-15 17.29.05"></p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/../%E6%88%AA%E5%B1%8F2025-05-15%2017.29.39.png" alt="截屏2025-05-15 17.30.26"></p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-15%2017.30.26-7301625.png" alt="截屏2025-05-15 17.30.26"></p><h1 id="工作流（关键）"><a href="#工作流（关键）" class="headerlink" title="工作流（关键）"></a>工作流（关键）</h1><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-15%2021.16.09.png" alt="截屏2025-05-15 21.16.09"></p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-15%2021.17.23.png" alt="截屏2025-05-15 21.17.23"></p><p>系统变量（sys.xxx）、环境变量、会话变量 其实都是和编程语言类似的逻辑。</p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-15%2021.33.37.png" alt="截屏2025-05-15 21.33.37"></p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-15%2021.34.52.png" alt="截屏2025-05-15 21.34.52"></p><h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-15%2021.38.21.png" alt="截屏2025-05-15 21.38.21"></p><h2 id="chatflow工作流"><a href="#chatflow工作流" class="headerlink" title="chatflow工作流"></a>chatflow工作流</h2><p>我新建了一个 chatflow工作流（和workflow区别就是chatflow是对话形式）</p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-15%2021.46.07.jpg" alt="截屏2025-05-15 21.46.07"></p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-15%2021.47.14.jpg" alt="截屏2025-05-15 21.47.14"></p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-15%2021.55.06.jpg" alt="截屏2025-05-15 21.55.06"></p><p>选择直接回复大模型的text。</p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-15%2021.56.45.jpg" alt="截屏2025-05-15 21.56.45"></p><p>一个节点的输出喂下一个节点。</p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-15%2022.18.22.jpg" alt="截屏2025-05-15 22.18.22"></p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-15%2022.20.24.jpg" alt="截屏2025-05-15 22.20.24"></p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-05-15%2022.30.19.png" alt="截屏2025-05-15 22.30.19"></p><h2 id="workflow工作流"><a href="#workflow工作流" class="headerlink" title="workflow工作流"></a>workflow工作流</h2><p>workflow类似我原来开发的自动化处理流程，而chatflow类似于对话的形式；</p><p>一个是工作软件一个对对话助手。</p><h1 id="知识库"><a href="#知识库" class="headerlink" title="知识库"></a>知识库</h1><p>RAG 可视化界面操作。</p><p>一个文件大小上限15M，<img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/123.png" alt="123"></p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250516101549_501.png" alt="微信图片_20250516101549_501">这里来设置如何切文档或者表格、文件的嵌入模型和检索设置；向量、全文还是混合搜索，之前的文档中我有过介绍。这样直接可视化的切分确实比open webUI看起来直观很多。</p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250516101727_502.png" alt="微信图片_20250516101727_502"><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250516101720_503.png" alt="微信图片_20250516101720_503"></p><p>这样就添加好了一个 文件。</p><p>关联上知识库以后，就可以用了。</p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250516103408_504.png" alt="微信图片_20250516103408_504"></p><h1 id="发布AI应用"><a href="#发布AI应用" class="headerlink" title="发布AI应用"></a>发布AI应用</h1><p>由于我们是内网使用，所以直接运行在服务器上就可以了。</p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250516110401_5.png" alt="微信图片_20250516110401_5"></p><ul><li><p>点击运行，会直接出现一个网址，别的机器访问这个url就可以实现访问dify。</p></li><li><p>或者点击下方的嵌入到网页，把一段它给出的 代码 粘贴进 html 的前端页面中即可。</p></li><li><p>或者 直接用 APIs ，不关注后端情况，直接用接口。</p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/564.png" alt="564"></p></li></ul><p>这样的做法可以让应用更加定制化一些，相比于open webUI。</p><h1 id="动态更新"><a href="#动态更新" class="headerlink" title="动态更新"></a>动态更新</h1><p>对于 docker compose 的 yaml 部署的 dify ，仅仅需要更新这三个容器就可以实现版本更新，但是注意好备份。注意步骤：</p><p>1、备份 PostgreSQL</p><p>2、备份你的挂载目录</p><p>3、备份配置文件.env 和yaml</p><p>4、修改docker-compose.yaml文件</p><p>5、拉取镜像，并重新启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据你实际的容器名和用户名修改命令。在 .env 和 docker ps 中可以看见。</span></span><br><span class="line"><span class="comment"># postgres 表示使用用户名；dify 是要备份的数据库名；docker-db-1 是容器名； </span></span><br><span class="line">docker <span class="built_in">exec</span> -t docker-db-1 pg_dump -U postgres dify &gt; ./backup/dify_backup_$(<span class="built_in">date</span> +%F).sql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 至少打包 Dify 主体部分 + PostgreSQL + Redis：</span></span><br><span class="line">tar czf backup_volumes_$(<span class="built_in">date</span> +%F).tar.gz ./volumes/app ./volumes/db ./volumes/redis</span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> .<span class="built_in">env</span> backup/.env.bak_$(<span class="built_in">date</span> +%F)</span><br><span class="line"><span class="built_in">cp</span> docker-compose.yml backup/docker-compose.yml.bak_$(<span class="built_in">date</span> +%F)</span><br><span class="line"></span><br><span class="line"><span class="comment"># yaml 文件中对以下三个容器修改。</span></span><br><span class="line">services:</span><br><span class="line">  api:</span><br><span class="line">    image: langgenius/dify-api:latest</span><br><span class="line">  web:</span><br><span class="line">    image: langgenius/dify-web:latest</span><br><span class="line">  worker:</span><br><span class="line">    image: langgenius/dify-api:latest</span><br><span class="line">    </span><br><span class="line">docker-compose pull</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>在docker ps 中可以看见 dify 版本。</p><h1 id="遇到的问题以及解决方法"><a href="#遇到的问题以及解决方法" class="headerlink" title="遇到的问题以及解决方法"></a>遇到的问题以及解决方法</h1><h3 id="1、发布的时候，会出现404分不到，在“探索”中打开却能正常访问。"><a href="#1、发布的时候，会出现404分不到，在“探索”中打开却能正常访问。" class="headerlink" title="1、发布的时候，会出现404分不到，在“探索”中打开却能正常访问。"></a><strong>1、发布的时候，会出现404分不到，在“探索”中打开却能正常访问。</strong></h3><p>这是因为我前面yaml配置中env配置中修改过端口号。手动在生成的URL中的IP后添加端口即可。</p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/333.png" alt="333"></p><p>同样的道理，在 **嵌入到前端页面 **中的时候也要加上端口号。</p><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="variable language_">window</span>.<span class="property">difyChatbotConfig</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">token</span>: <span class="string">&#x27;RtixHB3eI1lQvUsR&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">baseUrl</span>: <span class="string">&#x27;http://10.5.9.252&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">systemVariables</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// user_id: &#x27;YOU CAN DEFINE USER ID HERE&#x27;,</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// conversation_id: &#x27;YOU CAN DEFINE CONVERSATION ID HERE, IT MUST BE A VALID UUID&#x27;,</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript"> &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag"> <span class="attr">src</span>=<span class="string">&quot;http://10.5.9.252/embed.min.js&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">id</span>=<span class="string">&quot;RtixHB3eI1lQvUsR&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">defer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#dify-chatbot-bubble-button</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#1C64F2</span> <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#dify-chatbot-bubble-window</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">24rem</span> <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">40rem</span> <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上方统一需要在252后加 8003 我前面改的端口号。</p><h3 id="2、Failed-to-parse-response-from-plugin-daemon-to-PluginDaemonBasicResponse"><a href="#2、Failed-to-parse-response-from-plugin-daemon-to-PluginDaemonBasicResponse" class="headerlink" title="2、Failed to parse response from plugin daemon to PluginDaemonBasicResponse"></a>2、Failed to parse response from plugin daemon to PluginDaemonBasicResponse</h3><p>遇到报错：</p><blockquote><p>Failed to parse response from plugin daemon to PluginDaemonBasicResponse [PluginListResponse], url: plugin&#x2F;a7060300-e4d0-426c-8690-5036fef955e7&#x2F;management&#x2F;list</p></blockquote><p>分析问题，是一个守护进程不停的访问，然后返回的格式又不匹配导致的。以下是分析过程：<br>我们先通过 日志确定问题 <code>docker logs -f docker-plugin_daemon-1</code>,发现 </p><blockquote><p>2025&#x2F;08&#x2F;12 13:02:09 stdio.go:160: [INFO]plugin langgenius&#x2F;huggingface_tei:0.0.3: Installed model: huggingface_tei 2025&#x2F;08&#x2F;12 13:02:09 stdio.go:160: [INFO]plugin langgenius&#x2F;azure_openai:0.0.17: Installed model: azure_openai [GIN] 2025&#x2F;08&#x2F;12 - 13:02:23 | 200 |   19.930974ms |      172.20.0.8 | GET      “&#x2F;plugin&#x2F;a7060300-e4d0-426c-8690-5036fef955e7&#x2F;management&#x2F;list?page&#x3D;1&amp;page_size&#x3D;100”</p></blockquote><p>而我通过 <code>docker network ls</code> 找到 <code>3efdfbe91ed7 docker_default</code>；</p><p><code> docker network inspect dify_default</code> 发现 前面日志中的 172.20.0.8 就是 docker-api-1。我们进一步看它的日志。</p><p><code>docker logs -f docker-api-1</code> 提示说 返回的格式不匹配:</p><blockquote><p> File “&#x2F;app&#x2F;api&#x2F;.venv&#x2F;lib&#x2F;python3.12&#x2F;site-packages&#x2F;pydantic&#x2F;main.py”, line 253, in <strong>init</strong>    validated_self &#x3D; self.<strong>pydantic_validator</strong>.validate_python(data, self_instance&#x3D;self)                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pydantic_core._pydantic_core.ValidationError: 1 validation error for PluginDaemonBasicResponse[PluginListResponse] data  Input should be a valid dictionary or instance of PluginListResponse [type&#x3D;model_type, input_value&#x3D;[{‘id’: ‘f45acc46-9e4d-4f…5c71c2231’, ‘meta’: {}}], input_type&#x3D;list]    For further information visit <a href="https://errors.pydantic.dev/2.11/v/model_type">https://errors.pydantic.dev/2.11/v/model_type</a></p></blockquote><p>我确定了是之前的 插件或者插件容器相关的内容导致的问题，</p><p>解决思路如下：</p><p>1、清理 PostgreSQL + Redis 中的内容；</p><p>2、清理 本地残留插件文件；</p><p>3、进入 docker-compose.yaml 文件查看是否版本有明显偏差；</p><p>步骤：</p><p>1、清理 PostgreSQL + Redis 中的内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看有哪些表</span></span><br><span class="line">docker <span class="built_in">exec</span> -it docker-db-1 psql -U postgres -l</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it docker-db-1 psql -U postgres -d dify_plugin</span><br><span class="line">\dt</span><br><span class="line"><span class="comment"># 以 dify_plugin 为例，逐个检查，发现 a7060300-e4d0-426c-8690-5036fef955e7 相关的就删除。</span></span><br><span class="line">select * from tool_installations;</span><br><span class="line">delete from tool_installations <span class="built_in">where</span> tenant_id=<span class="string">&#x27;a7060300-e4d0-426c-8690-5036fef955e7&#x27;</span> ;</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理 redis</span></span><br><span class="line">docker <span class="built_in">exec</span> -it docker-redis-1 redis-cli</span><br><span class="line">FLUSHALL</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-08-12%2020.37.51.png" alt="截屏2025-08-12 20.37.51"></p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-08-12%2023.00.55.png" alt="截屏2025-08-12 23.00.55"></p><p>但是一个一个删除很慢，用下面的脚本 模糊搜索 删除也行；</p><p><code>vim  clean_plugin.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line">PLUGIN_ID=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$PLUGIN_ID</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;❌ 用法: <span class="variable">$0</span> &lt;插件ID或关键字&gt;&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器名（改成你的）</span></span><br><span class="line">PG_CONTAINER=<span class="string">&quot;docker-db-1&quot;</span></span><br><span class="line">REDIS_CONTAINER=<span class="string">&quot;docker-redis-1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;🔍 开始在 PostgreSQL 中搜索包含 [<span class="variable">$PLUGIN_ID</span>] 的记录...&quot;</span></span><br><span class="line">PG_MATCHES=$(docker <span class="built_in">exec</span> -i <span class="string">&quot;<span class="variable">$PG_CONTAINER</span>&quot;</span> psql -U postgres -d dify -t -A -c <span class="string">&quot;</span></span><br><span class="line"><span class="string">SELECT table_name, column_name</span></span><br><span class="line"><span class="string">FROM information_schema.columns</span></span><br><span class="line"><span class="string">WHERE table_schema=&#x27;public&#x27;;</span></span><br><span class="line"><span class="string">&quot;</span> | <span class="keyword">while</span> IFS=<span class="string">&quot;|&quot;</span> <span class="built_in">read</span> -r table column; <span class="keyword">do</span></span><br><span class="line">    docker <span class="built_in">exec</span> -i <span class="string">&quot;<span class="variable">$PG_CONTAINER</span>&quot;</span> psql -U postgres -d dify -t -A -c \</span><br><span class="line">    <span class="string">&quot;SELECT &#x27;<span class="variable">$table</span>&#x27;, &#x27;<span class="variable">$column</span>&#x27;, <span class="variable">$column</span> FROM \&quot;<span class="variable">$table</span>\&quot; WHERE CAST(<span class="variable">$column</span> AS TEXT) LIKE &#x27;%<span class="variable">$PLUGIN_ID</span>%&#x27;&quot;</span> \</span><br><span class="line">    2&gt;/dev/null</span><br><span class="line"><span class="keyword">done</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$PG_MATCHES</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;找到以下匹配记录：&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$PG_MATCHES</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;✅ PostgreSQL 未找到匹配记录。&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;⚠️ 是否删除这些 PostgreSQL 记录？(y/n) &quot;</span> confirm</span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$confirm</span>&quot;</span> == <span class="string">&quot;y&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    docker <span class="built_in">exec</span> -i <span class="string">&quot;<span class="variable">$PG_CONTAINER</span>&quot;</span> psql -U postgres -d dify -t -A -c <span class="string">&quot;</span></span><br><span class="line"><span class="string">    SELECT table_name, column_name</span></span><br><span class="line"><span class="string">    FROM information_schema.columns</span></span><br><span class="line"><span class="string">    WHERE table_schema=&#x27;public&#x27;;</span></span><br><span class="line"><span class="string">    &quot;</span> | <span class="keyword">while</span> IFS=<span class="string">&quot;|&quot;</span> <span class="built_in">read</span> -r table column; <span class="keyword">do</span></span><br><span class="line">        docker <span class="built_in">exec</span> -i <span class="string">&quot;<span class="variable">$PG_CONTAINER</span>&quot;</span> psql -U postgres -d dify -c \</span><br><span class="line">        <span class="string">&quot;DELETE FROM \&quot;<span class="variable">$table</span>\&quot; WHERE CAST(<span class="variable">$column</span> AS TEXT) LIKE &#x27;%<span class="variable">$PLUGIN_ID</span>%&#x27;&quot;</span> \</span><br><span class="line">        2&gt;/dev/null || <span class="literal">true</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;🗑 PostgreSQL 相关记录已删除。&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;🔍 开始在 Redis 中搜索包含 [<span class="variable">$PLUGIN_ID</span>] 的键和值...&quot;</span></span><br><span class="line">REDIS_KEYS=$(docker <span class="built_in">exec</span> -i <span class="string">&quot;<span class="variable">$REDIS_CONTAINER</span>&quot;</span> redis-cli --scan | grep <span class="string">&quot;<span class="variable">$PLUGIN_ID</span>&quot;</span> || <span class="literal">true</span>)</span><br><span class="line">REDIS_VAL_KEYS=$(docker <span class="built_in">exec</span> -i <span class="string">&quot;<span class="variable">$REDIS_CONTAINER</span>&quot;</span> redis-cli --scan | <span class="keyword">while</span> <span class="built_in">read</span> -r key; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> docker <span class="built_in">exec</span> -i <span class="string">&quot;<span class="variable">$REDIS_CONTAINER</span>&quot;</span> redis-cli GET <span class="string">&quot;<span class="variable">$key</span>&quot;</span> 2&gt;/dev/null | grep -q <span class="string">&quot;<span class="variable">$PLUGIN_ID</span>&quot;</span>; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$key</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;$REDIS_KEYS<span class="variable">$REDIS_VAL_KEYS</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;找到以下 Redis 相关键：&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$REDIS_KEYS</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$REDIS_VAL_KEYS</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;✅ Redis 未找到匹配记录。&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;⚠️ 是否删除这些 Redis 键？(y/n) &quot;</span> confirm</span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$confirm</span>&quot;</span> == <span class="string">&quot;y&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$REDIS_KEYS</span>&quot;</span> <span class="string">&quot;<span class="variable">$REDIS_VAL_KEYS</span>&quot;</span> | <span class="built_in">tr</span> <span class="string">&#x27; &#x27;</span> <span class="string">&#x27;\n&#x27;</span> | <span class="built_in">sort</span> -u | <span class="keyword">while</span> <span class="built_in">read</span> -r key; <span class="keyword">do</span></span><br><span class="line">        docker <span class="built_in">exec</span> -i <span class="string">&quot;<span class="variable">$REDIS_CONTAINER</span>&quot;</span> redis-cli DEL <span class="string">&quot;<span class="variable">$key</span>&quot;</span> &gt;/dev/null</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;🗑 Redis 相关键已删除。&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;🎯 清理完成。&quot;</span></span><br></pre></td></tr></table></figure><p>运行上面脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x clean_plugin.sh</span><br><span class="line">./clean_plugin.sh a7060300-e4d0-426c-8690-5036fef955e7 </span><br><span class="line"><span class="comment"># a7060300-e4d0-426c-8690-5036fef955e7 是我的插件报错的提示内容。</span></span><br></pre></td></tr></table></figure><p>2、清理 本地残留插件文件：</p><p><code>/home/cys/data/docker-data/dify/docker/volumes</code> 是我的本地位置，如果你的目录结构不同，请替换路径。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分别进入下面两个文件夹中，然后删除和报错相关的内容。</span></span><br><span class="line"><span class="built_in">cd</span> /home/cys/data/docker-data/dify/docker/volumes/plugin_daemon/plugin</span><br><span class="line"><span class="comment"># 逐个检查，发现就 a7060300-e4d0-426c-8690-5036fef955e7 相关的就删除 rm 。</span></span><br><span class="line"><span class="built_in">cd</span> /home/cys/data/docker-data/dify/docker/volumes/plugin_daemon/plugin_packages</span><br><span class="line"><span class="comment"># 逐个检查，发现就 a7060300-e4d0-426c-8690-5036fef955e7 相关的就删除 rm 。</span></span><br></pre></td></tr></table></figure><p>3、进入 docker-compose.yaml 文件修改；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker-compose stop plugin_daemon</span><br><span class="line">docker-compose <span class="built_in">rm</span> -f plugin_daemon</span><br><span class="line"></span><br><span class="line">docker rmi &lt;plugin_daemon_image_name&gt;</span><br></pre></td></tr></table></figure><p>查看 GitHub中 项目的 <code>docker-compose.yaml </code>中的 <code>plugin_daemon</code>:</p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-08-13%2013.55.24.png" alt="截屏2025-08-13 13.55.24"></p><p>进入我们的  <code>docker-compose.yaml </code>中修改  <code>plugin_daemon</code>:，然后重新拉取，我这里是把  <code>langgenius/dify-plugin-daemon:latest:0.0.9-local</code> 改成 <code>langgenius/dify-plugin-daemon:0.2.0-local </code>。</p><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-08-13%2013.57.24.png" alt="截屏2025-08-13 13.57.24"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把yaml修改与Dify官方GitHub一致</span></span><br><span class="line">vim docker-compose.yaml </span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取</span></span><br><span class="line">docker-compose up -d plugin_daemon</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查</span></span><br><span class="line">docker images | grep langgenius/dify-plugin-daemon</span><br></pre></td></tr></table></figure><p><img src="/2025/08/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/Dify%E7%AC%94%E8%AE%B0/%E6%88%AA%E5%B1%8F2025-08-13%2013.59.54.png" alt="截屏2025-08-13 13.59.54">问题解决了。</p><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://docs.dify.ai/zh-hans/guides/workflow/node/doc-extractor">https://docs.dify.ai/zh-hans/guides/workflow/node/doc-extractor</a></p>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="机器学习" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="dify" scheme="http://example.com/tags/dify/"/>
    
    <category term="workflow" scheme="http://example.com/tags/workflow/"/>
    
    <category term="chatflow" scheme="http://example.com/tags/chatflow/"/>
    
  </entry>
  
  <entry>
    <title>Cloudflare免费代理节点（可用chatgpt、X等）教程</title>
    <link href="http://example.com/2025/08/08/%E7%A7%91%E5%AD%A6%E9%82%A3%E4%B8%AA%E4%B8%8A%E7%BD%91/Cloudflare%E5%85%8D%E8%B4%B9%E4%BB%A3%E7%90%86%E8%8A%82%E7%82%B9%EF%BC%88%E5%8F%AF%E7%94%A8chatgpt%E3%80%81X%E7%AD%89%EF%BC%89%E6%95%99%E7%A8%8B/"/>
    <id>http://example.com/2025/08/08/%E7%A7%91%E5%AD%A6%E9%82%A3%E4%B8%AA%E4%B8%8A%E7%BD%91/Cloudflare%E5%85%8D%E8%B4%B9%E4%BB%A3%E7%90%86%E8%8A%82%E7%82%B9%EF%BC%88%E5%8F%AF%E7%94%A8chatgpt%E3%80%81X%E7%AD%89%EF%BC%89%E6%95%99%E7%A8%8B/</id>
    <published>2025-08-08T00:08:18.000Z</published>
    <updated>2025-08-25T02:26:52.996Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>利用 cloudflare 中的 workers ，我们自行修改 脚本实现代码 完成科学上网。</p><p><img src="/2025/08/08/%E7%A7%91%E5%AD%A6%E9%82%A3%E4%B8%AA%E4%B8%8A%E7%BD%91/Cloudflare%E5%85%8D%E8%B4%B9%E4%BB%A3%E7%90%86%E8%8A%82%E7%82%B9%EF%BC%88%E5%8F%AF%E7%94%A8chatgpt%E3%80%81X%E7%AD%89%EF%BC%89%E6%95%99%E7%A8%8B/%E6%88%AA%E5%B1%8F2025-08-08%2015.48.17.png" alt="截屏2025-08-08 15.48.17"></p><p>实测效果相当优秀，4k视频毫无压力。好评，感谢  甬哥 提供的代码和 <a href="https://7techlife.blogspot.com/">Seven科技生活</a>的讲解；</p><h2 id="解决问题："><a href="#解决问题：" class="headerlink" title="解决问题："></a>解决问题：</h2><p>1、之前通过 cloudflare 代理有时候 会失效是 因为proxyip 经常久了以后就失效了；</p><p>2、同时通过 cloudflare代理 不能访问 chatgpt、X等 网站。这是因为 这些网站也是cloudflare来解析的域名，cloudflare 为了避免内部相互访问加了措施，所以不能访问。</p><p>这里我们用了 甬哥代码方案解决上述两个问题，实现科学上网，这种方法是把我们的cloudflare伪装成了外部的，从而实现对 chatgpt 、X等 网站，同时用了 甬哥 代码避开了proxyip，不再当心proxyip失效。</p><h2 id="存在问题："><a href="#存在问题：" class="headerlink" title="存在问题："></a>存在问题：</h2><p>IP不停跳转，有一些网站或者一些网站的文件 写有对IP的限制，就会被限，但是这样的概率是很小的，我们最好留一个便宜的备用 科学上网代理 如proton 。</p><h1 id="一、在cloudflare创建worker"><a href="#一、在cloudflare创建worker" class="headerlink" title="一、在cloudflare创建worker"></a>一、在cloudflare创建worker</h1><p>worker命名不要写vpn、vps、代理、翻墙、科学上网 之类的词，避免被cloudflare查出来然后限掉。</p><p><img src="/2025/08/08/%E7%A7%91%E5%AD%A6%E9%82%A3%E4%B8%AA%E4%B8%8A%E7%BD%91/Cloudflare%E5%85%8D%E8%B4%B9%E4%BB%A3%E7%90%86%E8%8A%82%E7%82%B9%EF%BC%88%E5%8F%AF%E7%94%A8chatgpt%E3%80%81X%E7%AD%89%EF%BC%89%E6%95%99%E7%A8%8B/6a2292e308ec6a45c8d9161e2b3328b1.png" alt="6a2292e308ec6a45c8d9161e2b3328b1"></p><p><img src="/2025/08/08/%E7%A7%91%E5%AD%A6%E9%82%A3%E4%B8%AA%E4%B8%8A%E7%BD%91/Cloudflare%E5%85%8D%E8%B4%B9%E4%BB%A3%E7%90%86%E8%8A%82%E7%82%B9%EF%BC%88%E5%8F%AF%E7%94%A8chatgpt%E3%80%81X%E7%AD%89%EF%BC%89%E6%95%99%E7%A8%8B/8b6f801636850c85e77a99d0ba4c2a91.png" alt="8b6f801636850c85e77a99d0ba4c2a91"></p><h1 id="二、复制代码到worker"><a href="#二、复制代码到worker" class="headerlink" title="二、复制代码到worker"></a>二、复制代码到worker</h1><p>我们选择了<a href="https://github.com/yonggekkk/Cloudflare-vless-trojan/tree/main/Vless_workers_pages">Vless_workers_pages</a>，<a href="https://github.com/yonggekkk/Cloudflare-vless-trojan/commit/ccf3b0b7a160cac7f1ca5c4fe3d0efcfab85ce14">vless无需proxyip的nat64套壳版 (推荐使用).js</a></p><p><img src="/2025/08/08/%E7%A7%91%E5%AD%A6%E9%82%A3%E4%B8%AA%E4%B8%8A%E7%BD%91/Cloudflare%E5%85%8D%E8%B4%B9%E4%BB%A3%E7%90%86%E8%8A%82%E7%82%B9%EF%BC%88%E5%8F%AF%E7%94%A8chatgpt%E3%80%81X%E7%AD%89%EF%BC%89%E6%95%99%E7%A8%8B/c2e6be635ddea0c6fb5edcfdc2f07484-4641484.png" alt="c2e6be635ddea0c6fb5edcfdc2f07484"></p><p><img src="/2025/08/08/%E7%A7%91%E5%AD%A6%E9%82%A3%E4%B8%AA%E4%B8%8A%E7%BD%91/Cloudflare%E5%85%8D%E8%B4%B9%E4%BB%A3%E7%90%86%E8%8A%82%E7%82%B9%EF%BC%88%E5%8F%AF%E7%94%A8chatgpt%E3%80%81X%E7%AD%89%EF%BC%89%E6%95%99%E7%A8%8B/08d7365ac07f541098274c7b35479aea-4641565.png" alt="08d7365ac07f541098274c7b35479aea"></p><h1 id="三、通过环境变量修改uuid"><a href="#三、通过环境变量修改uuid" class="headerlink" title="三、通过环境变量修改uuid"></a>三、通过环境变量修改uuid</h1><p><img src="/2025/08/08/%E7%A7%91%E5%AD%A6%E9%82%A3%E4%B8%AA%E4%B8%8A%E7%BD%91/Cloudflare%E5%85%8D%E8%B4%B9%E4%BB%A3%E7%90%86%E8%8A%82%E7%82%B9%EF%BC%88%E5%8F%AF%E7%94%A8chatgpt%E3%80%81X%E7%AD%89%EF%BC%89%E6%95%99%E7%A8%8B/f22fbaba26feb01cb38803a6d29ebb28-4641379.png" alt="f22fbaba26feb01cb38803a6d29ebb28"></p><h1 id="四、使用自定义域名"><a href="#四、使用自定义域名" class="headerlink" title="四、使用自定义域名"></a>四、使用自定义域名</h1><p><img src="/2025/08/08/%E7%A7%91%E5%AD%A6%E9%82%A3%E4%B8%AA%E4%B8%8A%E7%BD%91/Cloudflare%E5%85%8D%E8%B4%B9%E4%BB%A3%E7%90%86%E8%8A%82%E7%82%B9%EF%BC%88%E5%8F%AF%E7%94%A8chatgpt%E3%80%81X%E7%AD%89%EF%BC%89%E6%95%99%E7%A8%8B/b5bc13c194f2f6817ae1b108a49a4401.png" alt="b5bc13c194f2f6817ae1b108a49a4401"></p><h1 id="五、查看节点连接并使用"><a href="#五、查看节点连接并使用" class="headerlink" title="五、查看节点连接并使用"></a>五、查看节点连接并使用</h1><p>我们用 cloudflare中worker下的  “自定义域”+斜杆&#x2F;+“自定义的文本变量uuid”来访问节点指导页面；</p><p><img src="/2025/08/08/%E7%A7%91%E5%AD%A6%E9%82%A3%E4%B8%AA%E4%B8%8A%E7%BD%91/Cloudflare%E5%85%8D%E8%B4%B9%E4%BB%A3%E7%90%86%E8%8A%82%E7%82%B9%EF%BC%88%E5%8F%AF%E7%94%A8chatgpt%E3%80%81X%E7%AD%89%EF%BC%89%E6%95%99%E7%A8%8B/%E6%88%AA%E5%B1%8F2025-08-08%2016.30.08.png" alt="截屏2025-08-08 16.30.08"></p><p><img src="/2025/08/08/%E7%A7%91%E5%AD%A6%E9%82%A3%E4%B8%AA%E4%B8%8A%E7%BD%91/Cloudflare%E5%85%8D%E8%B4%B9%E4%BB%A3%E7%90%86%E8%8A%82%E7%82%B9%EF%BC%88%E5%8F%AF%E7%94%A8chatgpt%E3%80%81X%E7%AD%89%EF%BC%89%E6%95%99%E7%A8%8B/%E6%88%AA%E5%B1%8F2025-08-08%2016.31.49.png" alt="截屏2025-08-08 16.31.49"></p><h2 id="以macOS下v2rayN为例："><a href="#以macOS下v2rayN为例：" class="headerlink" title="以macOS下v2rayN为例："></a>以macOS下v2rayN为例：</h2><p>我们用上图中的 “聚合通用订阅链接”，用GitHub 中的v2rayN 项目操作；</p><p>导入链接：</p><p><img src="/2025/08/08/%E7%A7%91%E5%AD%A6%E9%82%A3%E4%B8%AA%E4%B8%8A%E7%BD%91/Cloudflare%E5%85%8D%E8%B4%B9%E4%BB%A3%E7%90%86%E8%8A%82%E7%82%B9%EF%BC%88%E5%8F%AF%E7%94%A8chatgpt%E3%80%81X%E7%AD%89%EF%BC%89%E6%95%99%E7%A8%8B/2f85fe107c9d501af2056cbc7e3c59ab-4642195.png" alt="2f85fe107c9d501af2056cbc7e3c59ab"></p><p>更新订阅（不通过代理）：</p><p><img src="/2025/08/08/%E7%A7%91%E5%AD%A6%E9%82%A3%E4%B8%AA%E4%B8%8A%E7%BD%91/Cloudflare%E5%85%8D%E8%B4%B9%E4%BB%A3%E7%90%86%E8%8A%82%E7%82%B9%EF%BC%88%E5%8F%AF%E7%94%A8chatgpt%E3%80%81X%E7%AD%89%EF%BC%89%E6%95%99%E7%A8%8B/cba492cf556fbd28a6ef300c393d5a52.png" alt="cba492cf556fbd28a6ef300c393d5a52"></p><p><img src="/2025/08/08/%E7%A7%91%E5%AD%A6%E9%82%A3%E4%B8%AA%E4%B8%8A%E7%BD%91/Cloudflare%E5%85%8D%E8%B4%B9%E4%BB%A3%E7%90%86%E8%8A%82%E7%82%B9%EF%BC%88%E5%8F%AF%E7%94%A8chatgpt%E3%80%81X%E7%AD%89%EF%BC%89%E6%95%99%E7%A8%8B/f99915de4db2db677ed9d55e0623a7ff.png" alt="f99915de4db2db677ed9d55e0623a7ff"></p><p><img src="/2025/08/08/%E7%A7%91%E5%AD%A6%E9%82%A3%E4%B8%AA%E4%B8%8A%E7%BD%91/Cloudflare%E5%85%8D%E8%B4%B9%E4%BB%A3%E7%90%86%E8%8A%82%E7%82%B9%EF%BC%88%E5%8F%AF%E7%94%A8chatgpt%E3%80%81X%E7%AD%89%EF%BC%89%E6%95%99%E7%A8%8B/def170f7f1b0e8eb02289a9a9ccfb425.png" alt="def170f7f1b0e8eb02289a9a9ccfb425"></p><p>注意 v2rayN 左下角处，代理走的都是 10808 端口，如果chromo浏览器中有 ZeroOmega 代理插件的话，也要设置一个新的 10808端口的情景模式；</p><p>复制终端代理命令以后，在终端运行后，可以用下面命令来检查是否已经定位到了外部：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl ipinfo.io       <span class="comment"># 看你的所在位置。</span></span><br><span class="line">curl -I google.com   <span class="comment"># 返回200 2XX 就是 成功了。</span></span><br></pre></td></tr></table></figure><p>推荐用 curl 命令来经验而不用ping，是因为</p><p><code>ping</code> 命令使用的协议是 <strong>ICMP（Internet Control Message Protocol）</strong>，它工作在网络层（OSI 模型的第三层）。<code>ping</code> 命令会直接向目标服务器发送 ICMP Echo Request 数据包，并期待收到 Echo Reply 数据包。</p><p>而设置的代理 (<code>http_proxy</code>, <code>https_proxy</code>, <code>all_proxy</code> 等) 都是应用层代理，它们工作在 TCP&#x2F;IP 协议栈的上层。</p><h2 id="移动端的v2rayNG为例："><a href="#移动端的v2rayNG为例：" class="headerlink" title="移动端的v2rayNG为例："></a>移动端的v2rayNG为例：</h2><p>移动端的v2rayNG应用中需要启用本地dns、虚拟dns、分片Fragment； </p><p><img src="/2025/08/08/%E7%A7%91%E5%AD%A6%E9%82%A3%E4%B8%AA%E4%B8%8A%E7%BD%91/Cloudflare%E5%85%8D%E8%B4%B9%E4%BB%A3%E7%90%86%E8%8A%82%E7%82%B9%EF%BC%88%E5%8F%AF%E7%94%A8chatgpt%E3%80%81X%E7%AD%89%EF%BC%89%E6%95%99%E7%A8%8B/b87269748c92e254eca78e4bc22a4a46.jpg" alt="b87269748c92e254eca78e4bc22a4a46"></p><p><img src="/2025/08/08/%E7%A7%91%E5%AD%A6%E9%82%A3%E4%B8%AA%E4%B8%8A%E7%BD%91/Cloudflare%E5%85%8D%E8%B4%B9%E4%BB%A3%E7%90%86%E8%8A%82%E7%82%B9%EF%BC%88%E5%8F%AF%E7%94%A8chatgpt%E3%80%81X%E7%AD%89%EF%BC%89%E6%95%99%E7%A8%8B/28262364b250a64fc38a56cfb426ae5a.jpg" alt="28262364b250a64fc38a56cfb426ae5a"></p><h3 id="追加HTTP代理至VPN"><a href="#追加HTTP代理至VPN" class="headerlink" title="追加HTTP代理至VPN"></a>追加HTTP代理至VPN</h3><p>​按照上面的操作，手机浏览器是可以科学上网的，但是ChatGPT等相关应用是不行的。为了解决这个应用都能科学上网，我们需要追加HTTP代理至VPN。</p><p>​需要关闭 “分片Fragment”，而开启 “追加HTTP代理至VPN”，才能访问Chatgpt，而且需要重启一下 v2rayNG 一次，才能生效；</p><p>原理解释是：</p><p>就是把原本的“间接”转发方式改成了“直接”转发。</p><ul><li><p><strong>传统方式 (未开启此选项)：</strong> </p><p>浏览器 -&gt; 虚拟网卡设备 -&gt; v2rayNG -&gt; 代理服务器</p></li><li><p><strong>开启此选项后 (针对支持的应用)：</strong> </p><p>浏览器 -&gt; v2rayNG (直接HTTP代理) -&gt; 代理服务器</p></li></ul><p>无论你的流量是经过虚拟网卡还是直接通过HTTP代理转发，v2rayNG都会对其进行<strong>加密和代理</strong>。最终，你的数据还是会以加密的形式传输到v2ray服务器，再由服务器转发到目标网站。</p><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://www.youtube.com/watch?v=HcD4xYKXuRY&amp;t=178s">https://www.youtube.com/watch?v=HcD4xYKXuRY&amp;t=178s</a></p><h2 id="相关连接："><a href="#相关连接：" class="headerlink" title="相关连接："></a>相关连接：</h2><p>Cloudflare：<a href="https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbDB6dmw3NDBxMXhVVzJLVHAwdGVyZmNQTEE5d3xBQ3Jtc0tsQk1Tb1hBS2NLN0ZEZTRZNE02RXY0Rnc2THZUY1ZLSS1jRGNzSG1KeTIzYWZMZzVhNFotcDE0UXpoMVZyRjZTb0ZhNng0SnhhNXk3RmoxQVNlZjF1QU02a2xqODE0aXlGZzhJTXRDSTVLLThSZE9iRQ&q=https://dash.cloudflare.com/&v=HcD4xYKXuRY">https://dash.cloudflare.com</a> </p><p>甬哥代码地址：<a href="https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa3BSNnNiN3JnVHNPSnI0RWs2S2IyOE9mbk9fd3xBQ3Jtc0ttTFhEbF9RZk9YREtoQ1BTb3A3T2FjMXMtMXNMYXUwZTRUa0l1NXZlT095VF9falI0VHVLRUE1NWNRWkdud0dGVFVRenZLZk9HQTNGbjdkSFVHUFdFMURjdGFNYk5VUFEzRW5uLVRaemgyaTNLMUJjVQ&q=https://github.com/yonggekkk/Cloudflare-vless-trojan&v=HcD4xYKXuRY">https://github.com/yonggekkk/Cloudfla...</a> </p><p>UUID生成器：<a href="https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqbkx6TmQtczJudWhicFg3Uk9oWHMyVFppMmFnUXxBQ3Jtc0tuNUdBcGxYcjBlYU8xRnR1Y1ZfSjYzcUJEeE5oLVQ5eGQ0MmJGWjVqQWdEbFA4Y3F1T0dBYlZ1cXhRTExKNUM2S3E1WXBQYmVwUVNEbFRFajM3Z2hwTEVvTjFCTTdFdUxITXgxQl9rNEttdWliV3J2OA&q=https://www.uuidgenerator.net/&v=HcD4xYKXuRY">https://www.uuidgenerator.net/</a></p>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="科学那个上网" scheme="http://example.com/categories/%E7%A7%91%E5%AD%A6%E9%82%A3%E4%B8%AA%E4%B8%8A%E7%BD%91/"/>
    
    
    <category term="cloudflare" scheme="http://example.com/tags/cloudflare/"/>
    
    <category term="域名" scheme="http://example.com/tags/%E5%9F%9F%E5%90%8D/"/>
    
    <category term="代理" scheme="http://example.com/tags/%E4%BB%A3%E7%90%86/"/>
    
    <category term="科学上网" scheme="http://example.com/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>获取DigitalPlat免费域名</title>
    <link href="http://example.com/2025/08/08/%E7%A7%91%E5%AD%A6%E9%82%A3%E4%B8%AA%E4%B8%8A%E7%BD%91/%E8%8E%B7%E5%8F%96DigitalPlat%E5%85%8D%E8%B4%B9%E5%9F%9F%E5%90%8D/"/>
    <id>http://example.com/2025/08/08/%E7%A7%91%E5%AD%A6%E9%82%A3%E4%B8%AA%E4%B8%8A%E7%BD%91/%E8%8E%B7%E5%8F%96DigitalPlat%E5%85%8D%E8%B4%B9%E5%9F%9F%E5%90%8D/</id>
    <published>2025-08-07T23:08:18.000Z</published>
    <updated>2025-08-25T02:26:53.098Z</updated>
    
    <content type="html"><![CDATA[<p>按照这个 注册地址：<a href="https://dash.domain.digitalplat.org/">https://dash.domain.digitalplat.org</a> 或 <a href="https://register.us.kg/">https://register.us.kg</a> 一步一步来注册就好。</p><h1 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h1><p>KYC验证 ， 用GitHub等验证一下的意思。</p><h2 id="一、填写名称服务器"><a href="#一、填写名称服务器" class="headerlink" title="一、填写名称服务器"></a>一、填写名称服务器</h2><p>按照注册地址一步一步申请免费域名会遇到以下 需要填写 域名名称服务器的步骤；</p><p><img src="/2025/08/08/%E7%A7%91%E5%AD%A6%E9%82%A3%E4%B8%AA%E4%B8%8A%E7%BD%91/%E8%8E%B7%E5%8F%96DigitalPlat%E5%85%8D%E8%B4%B9%E5%9F%9F%E5%90%8D/ef6a7edf0e161c574322c839bf87d6e9.png" alt="ef6a7edf0e161c574322c839bf87d6e9"></p><p>这里的几个 Name Server 我们都用 cloudflare 来做。按照以下的来就行；</p><p>1、在cloudflare 中点击 “加入域”</p><p><img src="/2025/08/08/%E7%A7%91%E5%AD%A6%E9%82%A3%E4%B8%AA%E4%B8%8A%E7%BD%91/%E8%8E%B7%E5%8F%96DigitalPlat%E5%85%8D%E8%B4%B9%E5%9F%9F%E5%90%8D/129d96be3f717f06f5b9768189712267.png" alt="129d96be3f717f06f5b9768189712267"></p><p>2、一步一步来，复制好 dpdns中想申请的域名，填写好；然后看见以下情况；</p><p><img src="/2025/08/08/%E7%A7%91%E5%AD%A6%E9%82%A3%E4%B8%AA%E4%B8%8A%E7%BD%91/%E8%8E%B7%E5%8F%96DigitalPlat%E5%85%8D%E8%B4%B9%E5%9F%9F%E5%90%8D/32a7aefb17e8f089c959720c934a2c90.png" alt="32a7aefb17e8f089c959720c934a2c90"></p><p>可见两个域名名称服务器，把它们填写如前面的 域名申请中的 Name Server 1、2、3.中。</p><h2 id="二、等待生效"><a href="#二、等待生效" class="headerlink" title="二、等待生效"></a>二、等待生效</h2><p>前面的步骤全部完毕之后，我们还需要等待 cloudflare  “域” 中的 “SSL&#x2F;TLS” 的“边缘证书” 生效；</p><p><img src="/2025/08/08/%E7%A7%91%E5%AD%A6%E9%82%A3%E4%B8%AA%E4%B8%8A%E7%BD%91/%E8%8E%B7%E5%8F%96DigitalPlat%E5%85%8D%E8%B4%B9%E5%9F%9F%E5%90%8D/%E6%88%AA%E5%B1%8F2025-08-08%2015.30.42.png" alt="截屏2025-08-08 15.30.42"></p><h2 id="三、每半年需要续一次："><a href="#三、每半年需要续一次：" class="headerlink" title="三、每半年需要续一次："></a>三、每半年需要续一次：</h2><p><img src="/2025/08/08/%E7%A7%91%E5%AD%A6%E9%82%A3%E4%B8%AA%E4%B8%8A%E7%BD%91/%E8%8E%B7%E5%8F%96DigitalPlat%E5%85%8D%E8%B4%B9%E5%9F%9F%E5%90%8D/00c160b2da732711cebe1fe25f1bb759.png" alt="00c160b2da732711cebe1fe25f1bb759"></p><p>参考：<a href="https://www.youtube.com/watch?v=K_cqWsHQaGI&amp;t=603s">https://www.youtube.com/watch?v=K_cqWsHQaGI&amp;t=603s</a></p><h3 id="相关链接："><a href="#相关链接：" class="headerlink" title="相关链接："></a>相关链接：</h3><p>注册地址：<a href="https://dash.domain.digitalplat.org/">https://dash.domain.digitalplat.org</a> 或 <a href="https://register.us.kg/">https://register.us.kg</a></p><p>美国地址生成器：<a href="https://meiguodizhi.com/">https://meiguodizhi.com</a></p><p>DigitalPlat的Github仓库：<a href="https://github.com/DigitalPlatDev/FreeDomain">https://github.com/DigitalPlatDev/FreeDomain</a></p><p>Github官网：<a href="https://github.com/">https://github.com</a></p><p>Cloudflare官网：<a href="https://cloudflare.com/">https://cloudflare.com</a></p><p>Cloudflare Pages自定义域及SSL证书问题可查看这期视频</p><p><a href="https://youtu.be/cYud83gAhbs">https://youtu.be/cYud83gAhbs</a></p>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="科学那个上网" scheme="http://example.com/categories/%E7%A7%91%E5%AD%A6%E9%82%A3%E4%B8%AA%E4%B8%8A%E7%BD%91/"/>
    
    
    <category term="域名" scheme="http://example.com/tags/%E5%9F%9F%E5%90%8D/"/>
    
    <category term="digitalplat" scheme="http://example.com/tags/digitalplat/"/>
    
  </entry>
  
  <entry>
    <title>利用Dify+MCP开发定制功能Agent</title>
    <link href="http://example.com/2025/06/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%88%A9%E7%94%A8Dify+MCP%E5%BC%80%E5%8F%91%E5%AE%9A%E5%88%B6%E5%8A%9F%E8%83%BDAgent/"/>
    <id>http://example.com/2025/06/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%88%A9%E7%94%A8Dify+MCP%E5%BC%80%E5%8F%91%E5%AE%9A%E5%88%B6%E5%8A%9F%E8%83%BDAgent/</id>
    <published>2025-06-13T12:27:21.000Z</published>
    <updated>2025-08-25T02:26:52.991Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用国内MCP市场"><a href="#使用国内MCP市场" class="headerlink" title="使用国内MCP市场"></a>使用国内MCP市场</h1><p>Dify 和 MCP 我们之前 都学习过了，现在我们 来 搞一个 Dify 的chatflow ，其中用到 MCP。 </p><p>MCP 市场 ，如 <a href="https://mcp.so/">https://mcp.so/</a> 虽然很繁荣，但是都是 海外的，在大陆我们推荐还是使用 modelscope 社区的MCP广场 <a href="https://www.modelscope.cn/mcp">https://www.modelscope.cn/mcp</a> 。</p><p><img src="/2025/06/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%88%A9%E7%94%A8Dify+MCP%E5%BC%80%E5%8F%91%E5%AE%9A%E5%88%B6%E5%8A%9F%E8%83%BDAgent/%E6%88%AA%E5%B1%8F2025-06-11%2009.44.21.jpg" alt="截屏2025-06-11 09.44.21"></p><h1 id="以高德地图MCP为例"><a href="#以高德地图MCP为例" class="headerlink" title="以高德地图MCP为例"></a>以高德地图MCP为例</h1><h2 id="获取json配置"><a href="#获取json配置" class="headerlink" title="获取json配置"></a>获取json配置</h2><p><img src="/2025/06/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%88%A9%E7%94%A8Dify+MCP%E5%BC%80%E5%8F%91%E5%AE%9A%E5%88%B6%E5%8A%9F%E8%83%BDAgent/%E6%88%AA%E5%B1%8F2025-06-11%2009.48.57.jpg" alt="截屏2025-06-11 09.48.57"></p><p>点击 这个通用级 SSE 协议。</p><p><img src="/2025/06/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%88%A9%E7%94%A8Dify+MCP%E5%BC%80%E5%8F%91%E5%AE%9A%E5%88%B6%E5%8A%9F%E8%83%BDAgent/%E6%88%AA%E5%B1%8F2025-06-11%2010.01.51.jpg" alt="截屏2025-06-11 10.01.51"></p><p><img src="/2025/06/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%88%A9%E7%94%A8Dify+MCP%E5%BC%80%E5%8F%91%E5%AE%9A%E5%88%B6%E5%8A%9F%E8%83%BDAgent/%E6%88%AA%E5%B1%8F2025-06-11%2010.08.10.jpg" alt="截屏2025-06-11 10.08.10"></p><p>在配置 APIkey 时可见高德的 这个MCP不仅仅是地图功能，还能使用 天气 行政区 等等功能。</p><p><img src="/2025/06/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%88%A9%E7%94%A8Dify+MCP%E5%BC%80%E5%8F%91%E5%AE%9A%E5%88%B6%E5%8A%9F%E8%83%BDAgent/%E6%88%AA%E5%B1%8F2025-06-11%2010.50.14.jpg" alt="截屏2025-06-11 10.50.14"></p><p>填写APIkey</p><p><img src="/2025/06/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%88%A9%E7%94%A8Dify+MCP%E5%BC%80%E5%8F%91%E5%AE%9A%E5%88%B6%E5%8A%9F%E8%83%BDAgent/%E6%88%AA%E5%B1%8F2025-06-11%2010.21.04.jpg" alt="截屏2025-06-11 10.21.04"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mcpServers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;amap-maps&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sse&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://mcp.api-inference.modelscope.net/ce3a4f094e6d48/sse&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/06/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%88%A9%E7%94%A8Dify+MCP%E5%BC%80%E5%8F%91%E5%AE%9A%E5%88%B6%E5%8A%9F%E8%83%BDAgent/%E6%88%AA%E5%B1%8F2025-06-11%2010.24.34.jpg" alt="截屏2025-06-11 10.24.34"></p><p><strong>注意：</strong><br>这个 mcpserver 的 URL地址是 <code>mcp.api-inference.modelscope.net</code>，这说明什么，说明这个URL是专门用来给modelscope的试验场用的，不要在后续自己正式的在MCP host 或者 Dify 中配置的时候，使用这个 mcp的json 配置！！！亲。</p><h2 id="去MCP试验场测试"><a href="#去MCP试验场测试" class="headerlink" title="去MCP试验场测试"></a>去MCP试验场测试</h2><p>添加刚才的 json配置，点击保存。</p><p><img src="/2025/06/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%88%A9%E7%94%A8Dify+MCP%E5%BC%80%E5%8F%91%E5%AE%9A%E5%88%B6%E5%8A%9F%E8%83%BDAgent/%E6%88%AA%E5%B1%8F2025-06-11%2010.27.35.jpg" alt="截屏2025-06-11 10.27.35"></p><p>点击试验场的小扳手🔧图标，确保默认的 高德地图插件处于关闭状态，而我们刚刚保存的MCP server处于开启。</p><p><img src="/2025/06/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%88%A9%E7%94%A8Dify+MCP%E5%BC%80%E5%8F%91%E5%AE%9A%E5%88%B6%E5%8A%9F%E8%83%BDAgent/%E6%88%AA%E5%B1%8F2025-06-11%2010.37.12.jpg" alt="截屏2025-06-11 10.37.12"></p><p><img src="/2025/06/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%88%A9%E7%94%A8Dify+MCP%E5%BC%80%E5%8F%91%E5%AE%9A%E5%88%B6%E5%8A%9F%E8%83%BDAgent/%E6%88%AA%E5%B1%8F2025-06-11%2010.46.48.jpg" alt="截屏2025-06-11 10.46.48"></p><p>它先查看了两地的天气，然后又规划了路线，由于我只在问题中说了潮汕，不是一个具体城市导致了 潮汕天气搜索失败，但是不影响大模型 思考了一下 用别的路线规划。</p><h2 id="在Dify中添加MCP"><a href="#在Dify中添加MCP" class="headerlink" title="在Dify中添加MCP"></a>在Dify中添加MCP</h2><p>搜索安装Agent策略（支持MCP工具）。</p><p><img src="/2025/06/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%88%A9%E7%94%A8Dify+MCP%E5%BC%80%E5%8F%91%E5%AE%9A%E5%88%B6%E5%8A%9F%E8%83%BDAgent/%E6%88%AA%E5%B1%8F2025-06-11%2015.17.30.jpg" alt="截屏2025-06-11 15.17.30"></p><p><img src="/2025/06/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%88%A9%E7%94%A8Dify+MCP%E5%BC%80%E5%8F%91%E5%AE%9A%E5%88%B6%E5%8A%9F%E8%83%BDAgent/%E6%88%AA%E5%B1%8F2025-06-11%2016.05.45.jpg" alt="截屏2025-06-11 16.05.45"></p><p>我这里新建了一个对话任务流，先对问题分类，然后接上了一个 agent，这个agent策略用的是 ReAct，模型还是本地的 70b的deepseek，工具添加了一个时间戳。</p><p>MCP服务配置中不能填写前面的 json配置文件”mcpServers”: 包裹住的部分</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;amap-maps&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sse&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://mcp.api-inference.modelscope.net/ce3a4f094e6d48/sse&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>而是要从高德MCP的文档中找到 快速使用的介绍</p><p><img src="/2025/06/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%88%A9%E7%94%A8Dify+MCP%E5%BC%80%E5%8F%91%E5%AE%9A%E5%88%B6%E5%8A%9F%E8%83%BDAgent/%E6%88%AA%E5%B1%8F2025-06-13%2011.11.59.jpg" alt="截屏2025-06-13 11.11.59"></p><p>用这个json配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;amap-amap-sse&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://mcp.amap.com/sse?key=您在高德官网上申请的key&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>可见<code>https://mcp.amap.com/sse</code> 这个就是 高德开放的mcp访问地址。 </p><p>指令 写的是 <code>根据用户的问题选择 配置的MCP 工具amap-maps 查询结果来回答</code></p><p><img src="/2025/06/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%88%A9%E7%94%A8Dify+MCP%E5%BC%80%E5%8F%91%E5%AE%9A%E5%88%B6%E5%8A%9F%E8%83%BDAgent/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250613111943_1837.png" alt="微信图片_20250613111943_1837"></p><p>迭代次数推荐 多一点。</p><p>我用一个 问题 来测试      <code>请帮我规划一下长春的旅游规划，注意查看未来三天天气情况，下不下雨温度等等情况，根据这个情况来规划旅游。</code></p><p>我们来分析一下 agent 的思考过程</p><p><img src="/2025/06/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%88%A9%E7%94%A8Dify+MCP%E5%BC%80%E5%8F%91%E5%AE%9A%E5%88%B6%E5%8A%9F%E8%83%BDAgent/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250613203730_1914.png" alt="微信图片_20250613203730_1914"></p><p>round1 中有2个log ,<code>deepseek-r1-70b-AWQ Thought</code>  、<code>deepseek-r1-70b-AWQ Thought</code>。</p><p><code>deepseek-r1-70b-AWQ Thought</code>  内容是</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;action&quot;</span><span class="punctuation">:</span> <span class="string">&quot;maps_weather&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;action_input&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;长春&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;thought&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;think&gt;\n好，用户希望规划长春的旅游，并关心未来三天的天气情况。首先，我需要查询长春接下来的三天天气，包括天气情况和温度。\n\n使用maps_weather工具，传入城市名称“长春”获取天气数据。假设接下来的三天分别是晴天、多云和小雨天，温度在20°C左右。\n\n根据天气情况，制定适合的旅游计划。晴天适合户外活动，像伪满皇宫和净月潭公园都是不错的选择。多云适合文化景点，如长影世纪城。预计到第三天有小雨，应选择带有室内展区的景点，如长春电影博物馆。\n\n参考高德地图的信息，规划景点之间的路线和交通方式，建议合理安排时间，避免因天气原因造成的不便。\n\n因此，建议用户按天气情况分别安排光顾的景点，确保旅途顺利且乐趣多样。\n&lt;/think&gt;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>deepseek-r1-70b-AWQ Thought</code> 内容是</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;output&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Tool execution result: [&#123;&#x27;type&#x27;: &#x27;text&#x27;, &#x27;text&#x27;: &#x27;&#123;\&quot;city\&quot;:\&quot;长春市\&quot;,\&quot;forecasts\&quot;:[&#123;\&quot;date\&quot;:\&quot;2025-06-13\&quot;,\&quot;week\&quot;:\&quot;5\&quot;,\&quot;dayweather\&quot;:\&quot;多云\&quot;,\&quot;nightweather\&quot;:\&quot;阴\&quot;,\&quot;daytemp\&quot;:\&quot;29\&quot;,\&quot;nighttemp\&quot;:\&quot;18\&quot;,\&quot;daywind\&quot;:\&quot;西南\&quot;,\&quot;nightwind\&quot;:\&quot;西南\&quot;,\&quot;daypower\&quot;:\&quot;1-3\&quot;,\&quot;nightpower\&quot;:\&quot;1-3\&quot;,\&quot;daytemp_float\&quot;:\&quot;29.0\&quot;,\&quot;nighttemp_float\&quot;:\&quot;18.0\&quot;&#125;,&#123;\&quot;date\&quot;:\&quot;2025-06-14\&quot;,\&quot;week\&quot;:\&quot;6\&quot;,\&quot;dayweather\&quot;:\&quot;多云\&quot;,\&quot;nightweather\&quot;:\&quot;阴\&quot;,\&quot;daytemp\&quot;:\&quot;28\&quot;,\&quot;nighttemp\&quot;:\&quot;19\&quot;,\&quot;daywind\&quot;:\&quot;西南\&quot;,\&quot;nightwind\&quot;:\&quot;西南\&quot;,\&quot;daypower\&quot;:\&quot;1-3\&quot;,\&quot;nightpower\&quot;:\&quot;1-3\&quot;,\&quot;daytemp_float\&quot;:\&quot;28.0\&quot;,\&quot;nighttemp_float\&quot;:\&quot;19.0\&quot;&#125;,&#123;\&quot;date\&quot;:\&quot;2025-06-15\&quot;,\&quot;week\&quot;:\&quot;7\&quot;,\&quot;dayweather\&quot;:\&quot;雷阵雨\&quot;,\&quot;nightweather\&quot;:\&quot;雷阵雨\&quot;,\&quot;daytemp\&quot;:\&quot;25\&quot;,\&quot;nighttemp\&quot;:\&quot;19\&quot;,\&quot;daywind\&quot;:\&quot;东\&quot;,\&quot;nightwind\&quot;:\&quot;东\&quot;,\&quot;daypower\&quot;:\&quot;1-3\&quot;,\&quot;nightpower\&quot;:\&quot;1-3\&quot;,\&quot;daytemp_float\&quot;:\&quot;25.0\&quot;,\&quot;nighttemp_float\&quot;:\&quot;19.0\&quot;&#125;,&#123;\&quot;date\&quot;:\&quot;2025-06-16\&quot;,\&quot;week\&quot;:\&quot;1\&quot;,\&quot;dayweather\&quot;:\&quot;阴\&quot;,\&quot;nightweather\&quot;:\&quot;多云\&quot;,\&quot;daytemp\&quot;:\&quot;26\&quot;,\&quot;nighttemp\&quot;:\&quot;15\&quot;,\&quot;daywind\&quot;:\&quot;东南\&quot;,\&quot;nightwind\&quot;:\&quot;东南\&quot;,\&quot;daypower\&quot;:\&quot;1-3\&quot;,\&quot;nightpower\&quot;:\&quot;1-3\&quot;,\&quot;daytemp_float\&quot;:\&quot;26.0\&quot;,\&quot;nighttemp_float\&quot;:\&quot;15.0\&quot;&#125;]&#125;&#x27;&#125;]&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tool_call_args&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;长春&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tool_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;maps_weather&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>round2 中有1个log ,<code>deepseek-r1-70b-AWQ Thought</code>  内容是</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;action&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Final Answer&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;action_input&quot;</span><span class="punctuation">:</span> <span class="string">&quot;根据长春未来三天的天气情况，天气主要以多云和雷阵雨为主，温度在15°C到29°C之间。建议您做好雨具准备，以下是为您规划的旅游行程：\n  第 1 天：游览净月潭公园和长影世纪城，适合户外活动。\n  第 2 天：探访伪满皇宫和长春世界雕塑公园。\n  第 3 天：（雷阵雨）建议安排室内活动，如长春电影城市和博物馆。\n  第 4 天：（阴天）适合步行游览南湖公园和致远市场。\n  希望这能帮助您顺利进行旅游!&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;thought&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;think&gt;\n好，我先看看用户的需求。用户想要规划长春的旅游，特别关注未来三天的天气情况，包括是否下雨和温度，这样可以根据这些信息来安排行程。\n\n首先，我需要调用高德地图的天气API，查询长春市接下来的三天的天气情况。确保获取的信息准确，包括每天的天气状况、温度和风力等。\n\n接下来，分析天气数据。第一个两天是多云，气温适中，适合外出游览。第三天有雷阵雨，最好避免在户外活动。第四天则是阴天，仍然适合游览。\n\n然后，考虑长春的主要景点，如净月潭公园、长影世纪城、伪满皇宫等，确保在晴天安排户外活动，在可能有雨的天气安排室内景点。\n\n最后，综合天气情况，制定一个详细的每日行程，确保游客能合理安排时间，享受旅游行程而不受到天气影响。\n&lt;/think&gt;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>我在预览中运行一下，发现 和 前面 agent 试运行的时候是不一样的回答，说明 deepseek 思考过程每一次都有不一样。这次就没有 调用温度查询的 内容。</p><p><img src="/2025/06/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%88%A9%E7%94%A8Dify+MCP%E5%BC%80%E5%8F%91%E5%AE%9A%E5%88%B6%E5%8A%9F%E8%83%BDAgent/c8f2b1f5-c3e7-4015-8b5a-0a6239c7e482.png" alt="c8f2b1f5-c3e7-4015-8b5a-0a6239c7e482"></p><h1 id="用自己的MCP"><a href="#用自己的MCP" class="headerlink" title="用自己的MCP"></a>用自己的MCP</h1><p>下载插件 MCP SSE</p><p><img src="/2025/06/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%88%A9%E7%94%A8Dify+MCP%E5%BC%80%E5%8F%91%E5%AE%9A%E5%88%B6%E5%8A%9F%E8%83%BDAgent/%E6%88%AA%E5%B1%8F2025-06-11%2022.32.36.jpg" alt="截屏2025-06-11 22.32.36"></p><p>在MCP SSE 插件的授权中，写上 我们自己写的 MCP server的 服务器名和 开放连接的IP:port 。<br>这里是可以添加多个 自己写的 MCP server。</p><p><img src="/2025/06/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%88%A9%E7%94%A8Dify+MCP%E5%BC%80%E5%8F%91%E5%AE%9A%E5%88%B6%E5%8A%9F%E8%83%BDAgent/%E6%88%AA%E5%B1%8F2025-06-11%2022.36.24.jpg" alt="截屏2025-06-11 22.36.24"></p><p>注意一下 这个 json配置 中最好不要有空格。</p><h1 id="遇到的若干问题"><a href="#遇到的若干问题" class="headerlink" title="遇到的若干问题"></a>遇到的若干问题</h1><h2 id="1、Dify-中-不能在应用市场中一键安装插件"><a href="#1、Dify-中-不能在应用市场中一键安装插件" class="headerlink" title="1、Dify 中 不能在应用市场中一键安装插件"></a>1、Dify 中 不能在应用市场中一键安装插件</h2><p>解决办法：先下载，再手动安装。</p><p><img src="/2025/06/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%88%A9%E7%94%A8Dify+MCP%E5%BC%80%E5%8F%91%E5%AE%9A%E5%88%B6%E5%8A%9F%E8%83%BDAgent/%E6%88%AA%E5%B1%8F2025-06-11%2015.58.14.jpg" alt="截屏2025-06-11 15.58.14"></p><p><img src="/2025/06/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%88%A9%E7%94%A8Dify+MCP%E5%BC%80%E5%8F%91%E5%AE%9A%E5%88%B6%E5%8A%9F%E8%83%BDAgent/%E6%88%AA%E5%B1%8F2025-06-11%2016.00.58.jpg" alt="截屏2025-06-11 16.00.58"></p><p>可见在我的插件中已经有了 这个新下载的插件。</p><p><img src="/2025/06/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%88%A9%E7%94%A8Dify+MCP%E5%BC%80%E5%8F%91%E5%AE%9A%E5%88%B6%E5%8A%9F%E8%83%BDAgent/%E6%88%AA%E5%B1%8F2025-06-11%2016.02.44.jpg" alt="截屏2025-06-11 16.02.44"></p><h1 id="一些概念的理解"><a href="#一些概念的理解" class="headerlink" title="一些概念的理解"></a>一些概念的理解</h1><h2 id="1、uv-uvx-等-本地部署MCP-server"><a href="#1、uv-uvx-等-本地部署MCP-server" class="headerlink" title="1、uv uvx 等 本地部署MCP server"></a>1、uv uvx 等 本地部署MCP server</h2><p>uv 和 uvx 都是全局的，uvx 带运行的意思，uv 有点 pip 的意思，但是以文件夹为单位进行了隔离，每个 运行的文件夹会生成一个 .venv 文件夹，里面存各种下载的包。<br><strong>本地部署MCP server</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;fetch&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/Users/chenyushao/.local/bin/uvx&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;mcp-server-fetch&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>在配置文件中如果没有写具体在哪个文件夹中运行 ，那 <code>.venv</code> 会在哪里？</p><blockquote><p>答案是：取决于 <strong>运行这个命令时的“当前工作目录”</strong>（working directory）。</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;weather&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/Users/chenyushao/.local/bin/uv&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">     <span class="string">&quot;--directory&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="string">&quot;/Users/chenyushao/mcp_server/weather-mcp&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="string">&quot;run&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="string">&quot;-m&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="string">&quot;weather_mcp_server.main&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="string">&quot;--api-key&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="string">&quot;xxx&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>而配置文件 写明了 –directory，.venv 自然会在 这个 指定的文件夹中。</p><h2 id="2、sse-调用第三方在线服务-MCP-server"><a href="#2、sse-调用第三方在线服务-MCP-server" class="headerlink" title="2、sse 调用第三方在线服务 MCP server"></a>2、sse 调用第三方在线服务 MCP server</h2><p><strong>调用第三方在线服务 MCP server</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;amap-amap-sse&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://mcp.amap.com/sse?key=您在高德官网上申请的key&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>SSE 全称是 <strong>Server-Sent Events</strong>，意思是：</p><blockquote><p><strong>服务器主动向客户端持续推送数据</strong>的一种 Web 通信方式。</p></blockquote><p>客户端只发一次请求，服务器就可以不断发送更新（比如天气、消息、进度），常用于实时数据流。</p>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="机器学习" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="dify" scheme="http://example.com/tags/dify/"/>
    
    <category term="MCP" scheme="http://example.com/tags/MCP/"/>
    
  </entry>
  
  <entry>
    <title>A2A学习</title>
    <link href="http://example.com/2025/06/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/A2A%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2025/06/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/A2A%E5%AD%A6%E4%B9%A0/</id>
    <published>2025-06-12T12:27:21.000Z</published>
    <updated>2025-06-13T12:57:22.205Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是Agent"><a href="#什么是Agent" class="headerlink" title="什么是Agent"></a>什么是Agent</h1><p>之前 学过的 在 vscode 中的 cline 可以视为一个专门写代码的 agent。</p><p>A2A 就是 在 这样类似的多个agent之间合作，它需要一个调度agent 来实现。</p><p><img src="/2025/06/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/A2A%E5%AD%A6%E4%B9%A0/%E6%88%AA%E5%B1%8F2025-06-10%2021.15.56.png" alt="截屏2025-06-10 21.15.56"></p><p><img src="/2025/06/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/A2A%E5%AD%A6%E4%B9%A0/%E6%88%AA%E5%B1%8F2025-06-10%2021.19.47.png" alt="截屏2025-06-10 21.19.47"></p><p><img src="/2025/06/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/A2A%E5%AD%A6%E4%B9%A0/%E6%88%AA%E5%B1%8F2025-06-10%2021.21.38.png" alt="截屏2025-06-10 21.21.38"></p><p>其实 这个 有点 像 MCP host  扮演 agent 来调度 协调 大模型和 MCP工具箱。</p><p>但是 MCP 在上面的图中 是被封装在 每一个Agent的内部的。</p><h1 id="单Agent例子"><a href="#单Agent例子" class="headerlink" title="单Agent例子"></a>单Agent例子</h1><p>这里以一个单独的agent调用为例子说明</p><p><img src="/2025/06/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/A2A%E5%AD%A6%E4%B9%A0/%E6%88%AA%E5%B1%8F2025-06-10%2021.26.40.png" alt="截屏2025-06-10 21.26.40"></p><p><img src="/2025/06/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/A2A%E5%AD%A6%E4%B9%A0/%E6%88%AA%E5%B1%8F2025-06-10%2021.57.48.png" alt="截屏2025-06-10 21.57.48"></p><p><img src="/2025/06/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/A2A%E5%AD%A6%E4%B9%A0/%E6%88%AA%E5%B1%8F2025-06-10%2021.58.23.png" alt="截屏2025-06-10 21.58.23"></p><p>红框部分用到了A2A协议。</p><p>但是遗憾的是 A2A 都是 谷歌 搞的 协议，需要注册 谷歌API 总是依赖 外部网络访问，</p><p>于是我直接放弃 使用 这个 东西 ，除非 可以完全开源在本地部署。 </p>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="机器学习" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="A2A" scheme="http://example.com/tags/A2A/"/>
    
  </entry>
  
  <entry>
    <title>大陆使用okx接口</title>
    <link href="http://example.com/2025/05/28/%E5%8C%BA%E5%9D%97%E9%93%BE/%E5%A4%A7%E9%99%86%E4%BD%BF%E7%94%A8okx%E6%8E%A5%E5%8F%A3/"/>
    <id>http://example.com/2025/05/28/%E5%8C%BA%E5%9D%97%E9%93%BE/%E5%A4%A7%E9%99%86%E4%BD%BF%E7%94%A8okx%E6%8E%A5%E5%8F%A3/</id>
    <published>2025-05-28T14:17:12.000Z</published>
    <updated>2025-05-28T00:39:58.974Z</updated>
    
    <content type="html"><![CDATA[<p>简介 <span id="more"></span></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>我使用的是 MacBook，用 clash 走代理，clash 的config 文件如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat ~/.config/clash/config.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------------------------------#</span></span><br><span class="line"><span class="comment">## 配置文件需要放置在 $HOME/.config/clash/*.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 这份文件是clashX的基础配置文件，请尽量新建配置文件进行修改。</span></span><br><span class="line"><span class="comment">## ！！！只有这份文件的端口设置会随ClashX启动生效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 如果您不知道如何操作，请参阅 官方Github文档 https://github.com/Dreamacro/clash/blob/dev/README.md</span></span><br><span class="line"><span class="comment">#---------------------------------------------------#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># (HTTP and SOCKS5 in one port) 原来是7890</span></span><br><span class="line"><span class="attr">mixed-port:</span> <span class="number">7890</span></span><br><span class="line"><span class="attr">socks-port:</span> <span class="number">7891</span>  <span class="comment"># 启用SOCKS5代理,这个是我自己加的。</span></span><br><span class="line"><span class="comment"># RESTful API for clash</span></span><br><span class="line"><span class="attr">external-controller:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9090</span></span><br><span class="line"><span class="attr">allow-lan:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">rule</span></span><br><span class="line"><span class="attr">log-level:</span> <span class="string">warning</span></span><br><span class="line"></span><br><span class="line"><span class="attr">proxies:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">proxy-groups:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,google.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-KEYWORD,google,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN,google.com,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,ad.com,REJECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">GEOIP,CN,DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">MATCH,DIRECT</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在终端 使用代理命令（本终端生效）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> https_proxy=http://127.0.0.1:7890 </span><br><span class="line"><span class="built_in">export</span> http_proxy=http://127.0.0.1:7890 </span><br><span class="line"><span class="built_in">export</span> all_proxy=socks5://127.0.0.1:7891</span><br><span class="line"></span><br><span class="line"><span class="comment"># 依次是 https 走 http://127.0.0.1:7890 代理 ；http 也走 http://127.0.0.1:7890  代理。</span></span><br><span class="line"><span class="comment"># 全局代理 走 socks5://127.0.0.1:7891</span></span><br><span class="line"></span><br><span class="line">lsof -i :7891  <span class="comment"># 检查端口监听状态*</span></span><br><span class="line">lsof -i :7890</span><br></pre></td></tr></table></figure><h1 id="读API"><a href="#读API" class="headerlink" title="读API"></a>读API</h1><p>看见 okx 的文档中写着</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取交易产品基础信息</span></span><br><span class="line">GET /api/v5/account/instruments?instType=SPOT</span><br></pre></td></tr></table></figure><p><img src="/2025/05/28/%E5%8C%BA%E5%9D%97%E9%93%BE/%E5%A4%A7%E9%99%86%E4%BD%BF%E7%94%A8okx%E6%8E%A5%E5%8F%A3/%E6%88%AA%E5%B1%8F2025-05-27%2022.32.51.jpg" alt="截屏2025-05-27 22.32.51"></p><h1 id="写脚本"><a href="#写脚本" class="headerlink" title="写脚本"></a>写脚本</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cd ~/chainApiUse </span></span><br><span class="line"><span class="comment"># vim getInstruments.py </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.okx.com/api/v5/public/instruments&quot;</span></span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&quot;instType&quot;</span>: <span class="string">&quot;SPOT&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(url, params=params, timeout=<span class="number">10</span>)</span><br><span class="line">    response.raise_for_status()</span><br><span class="line">    <span class="built_in">print</span>(response.json())</span><br><span class="line"><span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请求失败：&quot;</span>, e)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行<br><code>python getInstruments.py &gt; output.json</code> </p><p>从output.json 中可见 </p><p><img src="/2025/05/28/%E5%8C%BA%E5%9D%97%E9%93%BE/%E5%A4%A7%E9%99%86%E4%BD%BF%E7%94%A8okx%E6%8E%A5%E5%8F%A3/%E6%88%AA%E5%B1%8F2025-05-27%2022.46.39.jpg" alt="截屏2025-05-27 22.46.39"></p><p>我们修改一下 脚本，让看起来 更加好理解一点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim okx_spot_to_csv.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.okx.com/api/v5/public/instruments&quot;</span></span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&quot;instType&quot;</span>: <span class="string">&quot;SPOT&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(url, params=params, timeout=<span class="number">10</span>)</span><br><span class="line">    response.raise_for_status()</span><br><span class="line">    data = response.json().get(<span class="string">&quot;data&quot;</span>, [])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入 CSV 文件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;okx_spot.csv&quot;</span>, <span class="string">&quot;w&quot;</span>, newline=<span class="string">&quot;&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        writer = csv.writer(f)</span><br><span class="line">        <span class="comment"># 写表头</span></span><br><span class="line">        writer.writerow([<span class="string">&quot;交易对&quot;</span>, <span class="string">&quot;基础币种&quot;</span>, <span class="string">&quot;报价币种&quot;</span>, <span class="string">&quot;最小交易量&quot;</span>, <span class="string">&quot;精度&quot;</span>, <span class="string">&quot;状态&quot;</span>, <span class="string">&quot;上线时间戳&quot;</span>])</span><br><span class="line">        <span class="comment"># 写每一行数据</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> data:</span><br><span class="line">            writer.writerow([</span><br><span class="line">                item[<span class="string">&quot;instId&quot;</span>],</span><br><span class="line">                item[<span class="string">&quot;baseCcy&quot;</span>],</span><br><span class="line">                item[<span class="string">&quot;quoteCcy&quot;</span>],</span><br><span class="line">                item[<span class="string">&quot;minSz&quot;</span>],</span><br><span class="line">                item[<span class="string">&quot;tickSz&quot;</span>],</span><br><span class="line">                item[<span class="string">&quot;state&quot;</span>],</span><br><span class="line">                item[<span class="string">&quot;listTime&quot;</span>]</span><br><span class="line">            ])</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数据已写入 okx_spot.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请求失败：&quot;</span>, e)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行 </p><p>在 <code>okx_spot.csv</code> 中可见 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line">SHIB-USDT,SHIB,USDT,100000,0.000000001,live,1620446728000</span><br><span class="line">SKL-USDT,SKL,USDT,100,0.00001,live,1617007316000</span><br><span class="line">SLERF-USDT,SLERF,USDT,10,0.00001,live,1721721600000</span><br><span class="line">SLP-USDT,SLP,USDT,100,0.000001,live,1629354310000</span><br><span class="line">SNT-USDT,SNT,USDT,100,0.00001,live,1611907686000</span><br><span class="line">SNX-USDT,SNX,USDT,1,0.0001,live,1611907686000</span><br><span class="line">SONIC-USDT,SONIC,USDT,10,0.00001,live,1736247600000</span><br><span class="line">SPURS-USDT,SPURS,USDT,1,0.0001,live,1698314400000</span><br><span class="line">SSV-USDT,SSV,USDT,0.1,0.001,live,1677664800000</span><br><span class="line">STETH-USDT,STETH,USDT,0.001,0.01,live,1689674400000</span><br><span class="line">STORJ-USDT,STORJ,USDT,10,0.0001,live,1611907686000</span><br><span class="line">STRK-USDT,STRK,USDT,1,0.0001,live,1708432800000</span><br><span class="line">STX-USDT,STX,USDT,1,0.0001,live,1614853497000</span><br><span class="line">SUI-USDT,SUI,USDT,1,0.0001,live,1683114000000</span><br><span class="line">SUSHI-USDT,SUSHI,USDT,1,0.0001,live,1611907686000</span><br><span class="line">SWEAT-USDT,SWEAT,USDT,100,0.000001,live,1663051473000</span><br><span class="line">SWFTC-USDT,SWFTC,USDT,100,0.000001,live,1611907686000</span><br><span class="line">T-USDT,T,USDT,100,0.00001,live,1648699657000</span><br><span class="line">THETA-USDT,THETA,USDT,1,0.0001,live,1611907686000</span><br><span class="line">TIA-USDT,TIA,USDT,0.1,0.001,live,1698775200000</span><br><span class="line">TNSR-USDT,TNSR,USDT,1,0.0001,live,1712589300000</span><br><span class="line">TRA-USDT,TRA,USDT,1,0.0001,live,1617963219000</span><br><span class="line">TRB-USDT,TRB,USDT,0.01,0.01,live,1611907686000</span><br><span class="line">TRX-USDT,TRX,USDT,1,0.00001,live,1611907686000</span><br><span class="line">TURBO-USDT,TURBO,USDT,1000,0.000001,live,1684742400000</span><br><span class="line">ULTI-USDT,ULTI,USDT,100,0.000001,live,1717668000000</span><br><span class="line">UMA-USDT,UMA,USDT,1,0.001,live,1611907686000</span><br><span class="line">UNI-USDT,UNI,USDT,0.1,0.001,live,1611907686000</span><br><span class="line">USDC-USDT,USDC,USDT,1,0.0001,live,1611907686000</span><br><span class="line">USTC-USDT,USTC,USDT,100,0.00001,live,1653637616000</span><br><span class="line">UXLINK-USDT,UXLINK,USDT,10,0.0001,live,1721289600000</span><br><span class="line">VELO-USDT,VELO,USDT,100,0.000001,live,1615192253000</span><br><span class="line">VELODROME-USDT,VELODROME,USDT,10,0.00001,live,1679040000000</span><br><span class="line">VENOM-USDT,VENOM,USDT,10,0.00001,live,1711353600000</span><br><span class="line">VINE-USDT,VINE,USDT,10,0.00001,live,1737882000000</span><br><span class="line">VRA-USDT,VRA,USDT,100,0.000001,live,1619591733000</span><br><span class="line">W-USDT,W,USDT,10,0.00001,live,1712145600000</span><br><span class="line">WAXP-USDT,WAXP,USDT,100,0.00001,live,1644555324000</span><br><span class="line">WBTC-USDT,WBTC,USDT,0.0001,0.1,live,1611907686000</span><br><span class="line">WCT-USDT,WCT,USDT,10,0.0001,live,1744711200000</span><br><span class="line">WIF-USDT,WIF,USDT,1,0.0001,live,1713171600000</span><br><span class="line">WIN-USDT,WIN,USDT,10000,0.00000001,live,1638426346000</span><br><span class="line">WLD-USDT,WLD,USDT,1,0.0001,live,1690190400000</span><br><span class="line">WOO-USDT,WOO,USDT,10,0.00001,live,1639549699000</span><br><span class="line">X-USDT,X,USDT,10000,0.00000001,live,1729767600000</span><br><span class="line">XAUT-USDT,XAUT,USDT,0.001,0.1,live,1658200770000</span><br><span class="line">XCH-USDT,XCH,USDT,0.1,0.01,live,1620050929000</span><br><span class="line">XLM-USDT,XLM,USDT,10,0.00001,live,1611907686000</span><br><span class="line">XNO-USDT,XNO,USDT,1,0.0001,live,1654683315000</span><br><span class="line">XTZ-USDT,XTZ,USDT,1,0.0001,live,1611907686000</span><br><span class="line">YFI-USDT,YFI,USDT,0.0005,1,live,1611907686000</span><br><span class="line">YGG-USDT,YGG,USDT,10,0.0001,live,1627468177000</span><br><span class="line">ZBCN-USDT,ZBCN,USDT,1000,0.0000001,live,1713254400000</span><br><span class="line">ZENT-USDT,ZENT,USDT,100,0.000001,live,1714975200000</span><br><span class="line">ZERO-USDT,ZERO,USDT,10000,0.00000001,live,1714982400000</span><br><span class="line">ZETA-USDT,ZETA,USDT,1,0.0001,live,1706756400000</span><br><span class="line">ZEUS-USDT,ZEUS,USDT,10,0.0001,live,1712239200000</span><br><span class="line">ZIL-USDT,ZIL,USDT,100,0.00001,live,1611907686000</span><br><span class="line">ZK-USDT,ZK,USDT,10,0.00001,live,1718697600000</span><br><span class="line">ZKJ-USDT,ZKJ,USDT,1,0.0001,live,1718607600000</span><br><span class="line">ZRO-USDT,ZRO,USDT,1,0.001,live,1718884800000</span><br><span class="line">ZRX-USDT,ZRX,USDT,10,0.0001,live,1611907686000</span><br><span class="line">BTC-USDC,BTC,USDC,0.00001,0.1,live,1611907686000</span><br><span class="line">ETH-USDC,ETH,USDC,0.0001,0.01,live,1611907686000</span><br><span class="line">OKB-USDC,OKB,USDC,0.1,0.01,live,1611907686000</span><br><span class="line">SOL-USDC,SOL,USDC,0.01,0.01,live,1653285156000</span><br><span class="line">TON-USDC,TON,USDC,0.1,0.001,live,1656387593000</span><br><span class="line">DOGE-USDC,DOGE,USDC,10,0.00001,live,1653285260000</span><br><span class="line">XRP-USDC,XRP,USDC,1,0.0001,live,1611907686000</span><br><span class="line">PEPE-USDC,PEPE,USDC,100000,0.000000001,live,1715670000000</span><br><span class="line">1INCH-USDC,1INCH,USDC,10,0.0001,live,1655787020000</span><br><span class="line">AAVE-USDC,AAVE,USDC,0.01,0.01,live,1654583929000</span><br><span class="line">ADA-USDC,ADA,USDC,10,0.0001,live,1653286080000</span><br><span class="line">AEVO-USDC,AEVO,USDC,1,0.00001,live,1728896400000</span><br><span class="line">AGLD-USDC,AGLD,USDC,1,0.0001,live,1658815263000</span><br><span class="line">ALGO-USDC,ALGO,USDC,10,0.0001,live,1655119932000</span><br><span class="line">APE-USDC,APE,USDC,1,0.0001,live,1653285819000</span><br><span class="line">APT-USDC,APT,USDC,0.1,0.001,live,1666086889000</span><br><span class="line">ARB-USDC,ARB,USDC,1,0.0001,live,1716188400000</span><br><span class="line">ARKM-USDC,ARKM,USDC,1,0.0001,live,1731922500000</span><br><span class="line">ATH-USDC,ATH,USDC,100,0.00001,live,1728896700000</span><br><span class="line">ATOM-USDC,ATOM,USDC,0.1,0.001,live,1653974613000</span><br><span class="line">AVAX-USDC,AVAX,USDC,0.1,0.001,live,1653285982000</span><br><span class="line">BCH-USDC,BCH,USDC,0.01,0.1,live,1611907686000</span><br><span class="line">BLUR-USDC,BLUR,USDC,10,0.00001,live,1676356333000</span><br><span class="line">BONK-USDC,BONK,USDC,100000,0.000000001,live,1730190000000</span><br><span class="line">CATI-USDC,CATI,USDC,10,0.00001,live,1728897000000</span><br><span class="line">CHZ-USDC,CHZ,USDC,10,0.00001,live,1655785198000</span><br><span class="line">COMP-USDC,COMP,USDC,0.1,0.01,live,1656386558000</span><br><span class="line">CRO-USDC,CRO,USDC,10,0.00001,live,1655784892000</span><br><span class="line">CRV-USDC,CRV,USDC,1,0.0001,live,1653974689000</span><br><span class="line">DAI-USDC,DAI,USDC,1,0.0001,live,1722235500000</span><br><span class="line">DOGS-USDC,DOGS,USDC,1000,0.0000001,live,1726812300000</span><br><span class="line">DOT-USDC,DOT,USDC,0.1,0.001,live,1653285472000</span><br><span class="line">DYDX-USDC,DYDX,USDC,1,0.0001,live,1655785076000</span><br><span class="line">EIGEN-USDC,EIGEN,USDC,1,0.0001,live,1729155600000</span><br><span class="line">ENS-USDC,ENS,USDC,0.1,0.001,live,1720666800000</span><br><span class="line">ETC-USDC,ETC,USDC,0.1,0.01,live,1660022233000</span><br><span class="line">ETHW-USDC,ETHW,USDC,1,0.001,live,1663296038000</span><br><span class="line">ETHFI-USDC,ETHFI,USDC,1,0.0001,live,1728897300000</span><br><span class="line">FIL-USDC,FIL,USDC,0.1,0.001,live,1653285381000</span><br><span class="line">FLR-USDC,FLR,USDC,100,0.00001,live,1673256144000</span><br><span class="line">GALA-USDC,GALA,USDC,100,0.00001,live,1654584967000</span><br><span class="line">GRT-USDC,GRT,USDC,10,0.00001,live,1655120006000</span><br><span class="line">HBAR-USDC,HBAR,USDC,10,0.00001,live,1660022454000</span><br><span class="line">ICP-USDC,ICP,USDC,0.1,0.001,live,1654584395000</span><br><span class="line">JTO-USDC,JTO,USDC,1,0.001,live,1715331600000</span><br><span class="line">JUP-USDC,JUP,USDC,10,0.0001,live,1728897600000</span><br><span class="line">LDO-USDC,LDO,USDC,1,0.0001,live,1720667100000</span><br><span class="line">LINK-USDC,LINK,USDC,0.1,0.001,live,1654583999000</span><br><span class="line">LRC-USDC,LRC,USDC,10,0.00001,live,1654584131000</span><br><span class="line">LTC-USDC,LTC,USDC,0.01,0.01,live,1611907686000</span><br><span class="line">LUNC-USDC,LUNC,USDC,10000,0.00000001,live,1653637053000</span><br><span class="line">LUNA-USDC,LUNA,USDC,10,0.0001,live,1653732118000</span><br><span class="line">MERL-USDC,MERL,USDC,10,0.00001,live,1717405200000</span><br><span class="line">MKR-USDC,MKR,USDC,0.001,0.1,live,1658815781000</span><br><span class="line">MOODENG-USDC,MOODENG,USDC,10,0.00001,live,1731918900000</span><br><span class="line">MORPHO-USDC,MORPHO,USDC,1,0.0001,live,1732786500000</span><br><span class="line">MOVE-USDC,MOVE,USDC,10,0.00001,live,1733754600000</span><br><span class="line">NEAR-USDC,NEAR,USDC,1,0.001,live,1653285574000</span><br><span class="line">NEIRO-USDC,NEIRO,USDC,1000,0.0000001,live,1730189700000</span><br><span class="line">NOT-USDC,NOT,USDC,100,0.000001,live,1726812000000</span><br><span class="line">OKT-USDC,OKT,USDC,0.1,0.001,live,1656387780000</span><br><span class="line">ONDO-USDC,ONDO,USDC,1,0.0001,live,1724915100000</span><br><span class="line">OP-USDC,OP,USDC,1,0.0001,live,1654009129000</span><br><span class="line">PNUT-USDC,PNUT,USDC,1,0.0001,live,1731918600000</span><br><span class="line">PYTH-USDC,PYTH,USDC,10,0.0001,live,1720667400000</span><br><span class="line">RDNT-USDC,RDNT,USDC,10,0.00001,live,1679385600000</span><br><span class="line">SAND-USDC,SAND,USDC,10,0.0001,live,1653974760000</span><br><span class="line">SHIB-USDC,SHIB,USDC,100000,0.000000001,live,1653286153000</span><br><span class="line">STRK-USDC,STRK,USDC,1,0.0001,live,1712811000000</span><br><span class="line">STX-USDC,STX,USDC,1,0.0001,live,1660022629000</span><br><span class="line">SUI-USDC,SUI,USDC,1,0.0001,live,1715332200000</span><br><span class="line">TIA-USDC,TIA,USDC,0.1,0.001,live,1720668000000</span><br><span class="line">TRX-USDC,TRX,USDC,10,0.00001,live,1611907686000</span><br><span class="line">TURBO-USDC,TURBO,USDC,1000,0.000001,live,1729156500000</span><br><span class="line">UNI-USDC,UNI,USDC,0.1,0.001,live,1653974977000</span><br><span class="line">USDT-USDC,USDT,USDC,1,0.0001,live,1675305962000</span><br><span class="line">WBTC-USDC,WBTC,USDC,0.0001,0.1,live,1723100100000</span><br><span class="line">WIF-USDC,WIF,USDC,1,0.0001,live,1715332800000</span><br><span class="line">WLD-USDC,WLD,USDC,1,0.0001,live,1717146000000</span><br><span class="line">XLM-USDC,XLM,USDC,10,0.00001,live,1655785301000</span><br><span class="line">YGG-USDC,YGG,USDC,10,0.0001,live,1658814984000</span><br><span class="line">ZENT-USDC,ZENT,USDC,100,0.000001,live,1719910500000</span><br><span class="line">ZETA-USDC,ZETA,USDC,1,0.0001,live,1728897900000</span><br><span class="line">ZEUS-USDC,ZEUS,USDC,10,0.0001,live,1732785600000</span><br><span class="line">ZK-USDC,ZK,USDC,10,0.00001,live,1722675000000</span><br><span class="line">ZRO-USDC,ZRO,USDC,1,0.001,live,1724914800000</span><br><span class="line">ETH-BTC,ETH,BTC,0.0001,0.00001,live,1611907686000</span><br><span class="line">OKB-BTC,OKB,BTC,0.1,0.0000001,live,1611907686000</span><br><span class="line">SOL-BTC,SOL,BTC,0.001,0.0000001,live,1611907686000</span><br><span class="line">BCH-BTC,BCH,BTC,0.01,0.000001,live,1611907686000</span><br><span class="line">BSV-BTC,BSV,BTC,0.1,0.0000001,live,1611907686000</span><br><span class="line">LTC-BTC,LTC,BTC,0.01,0.0000001,live,1611907686000</span><br><span class="line">STX-BTC,STX,BTC,1,0.000000001,live,1614853497000</span><br><span class="line">WBTC-BTC,WBTC,BTC,0.0001,0.0001,live,1611907686000</span><br><span class="line">SOL-ETH,SOL,ETH,0.001,0.00001,live,1611907686000</span><br><span class="line">BETH-ETH,BETH,ETH,0.001,0.0001,live,1611907686000</span><br><span class="line">STETH-ETH,STETH,ETH,0.001,0.0001,live,1689674400000</span><br></pre></td></tr></table></figure><p><img src="/2025/05/28/%E5%8C%BA%E5%9D%97%E9%93%BE/%E5%A4%A7%E9%99%86%E4%BD%BF%E7%94%A8okx%E6%8E%A5%E5%8F%A3/%E6%88%AA%E5%B1%8F2025-05-27%2022.53.26.jpg" alt="截屏2025-05-27 22.53.26"></p>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="区块链" scheme="http://example.com/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
    <category term="接口" scheme="http://example.com/tags/%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>flask-study</title>
    <link href="http://example.com/2025/05/20/%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/flask_study/"/>
    <id>http://example.com/2025/05/20/%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/flask_study/</id>
    <published>2025-05-20T02:21:02.000Z</published>
    <updated>2025-05-21T13:25:00.615Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flask整体框架流程"><a href="#Flask整体框架流程" class="headerlink" title="Flask整体框架流程"></a>Flask整体框架流程</h1><p><img src="/2025/05/20/%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/flask_study/%E6%88%AA%E5%B1%8F2024-01-04%2015.28.48.jpg" alt="截屏2024-01-04 15.28.48"></p><h2 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 脚本 要以 app.py 命名。然后用 flask run。</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask </span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 路由装饰器 装饰一个 视图函数。</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&lt;p&gt;Hello,world!&lt;/p&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index_test</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Index 页面&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 启动服务器</span></span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>建立一个项目，项目下由app.py、templates&#x2F;index.html、static&#x2F;index.css 组成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app.py</span></span><br><span class="line"><span class="comment"># 脚本 要以 app.py 命名。然后用 flask run。</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 路由装饰器 装饰一个 视图函数。</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&lt;b&gt;Flask Home&lt;/b&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index_test</span>():</span><br><span class="line">    <span class="comment"># return &#x27;Index 页面2&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 模版渲染，所谓渲染就是 从后端找变量给前端填空。</span></span><br><span class="line">    <span class="comment"># 自动去templates下找 index.html。</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,name=<span class="string">&#x27;法外狂徒&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># json</span></span><br><span class="line">    <span class="comment"># return jsonify(&#123;&#x27;name&#x27;:&#x27;张三&#x27;,&#x27;age&#x27;:100&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 启动服务器</span></span><br><span class="line">    <span class="comment"># debug 开启调试模式，修改代码后，自动重启。</span></span><br><span class="line">    <span class="comment"># 端口可以自己指定，</span></span><br><span class="line">    <span class="comment"># 0.0.0.0 表示本机所有IP都能访问，包括本机局域网IP（可以让局域网都能访问）。</span></span><br><span class="line">    app.run(debug=<span class="literal">True</span>,port=<span class="number">5000</span>,host=<span class="string">&#x27;0.0.0.0&#x27;</span>) </span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- &lt;link rel=&quot;stylesheet&quot; href=&quot;../static/index.css&quot;&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;,filename=&#x27;index.css&#x27;)&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Index<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>name: &#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">h4</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/05/20/%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/flask_study/%E6%88%AA%E5%B1%8F2024-01-05%2010.13.52.jpg" alt="截屏2024-01-05 10.13.52"></p><p>​注意上面的 <code>app = Flask(__name__)</code> 是在 “第一个flask项目” 下创建的，app对象实际上的执行 是发生在“第一个flask项目”下的。</p><h1 id="项目的拆分"><a href="#项目的拆分" class="headerlink" title="项目的拆分"></a>项目的拆分</h1><p><img src="/2025/05/20/%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/flask_study/%E6%88%AA%E5%B1%8F2024-01-05%2011.13.35.jpg" alt="截屏2024-01-05 11.13.35"></p><p>直接从App包 下调用 <strong>init</strong>.py 中的方法创建app对象就 好了。一个 App 就是一个 flask 应用。</p><p>app.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接从App包 下调用 __init__.py 中的方法创建app对象就 好了。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> App <span class="keyword">import</span> create_app </span><br><span class="line"></span><br><span class="line">app = create_app()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>App&#x2F; <strong>init</strong> .py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入上一层级的 App 的包的时候，这个 __init__.py自动执行</span></span><br><span class="line"><span class="comment"># 一个 App 就是一个 flask 应用。</span></span><br><span class="line"><span class="comment"># 注意不要循环导入，这里统一外部向 __init__ 导入；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask </span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> blue </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不必每一次 导入app包都新建一个 app 对象，所以封装进方法等待调用。jdong</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_app</span>():</span><br><span class="line">    app = Flask(__name__)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 给app对象 注册 blue蓝图，把他们关联上。</span></span><br><span class="line">    app.register_blueprint(blueprint=blue)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> app </span><br></pre></td></tr></table></figure><p>App&#x2F;views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint </span><br><span class="line"></span><br><span class="line"><span class="comment"># 蓝图用于规划 url</span></span><br><span class="line">blue = Blueprint(<span class="string">&#x27;user&#x27;</span>,__name__) <span class="comment"># __name__表示导入到当前模块</span></span><br><span class="line">blue2 = Blueprint(<span class="string">&#x27;product&#x27;</span>,__name__) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 给蓝图对象加上 路由；</span></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@blue2.route(<span class="params"><span class="string">&#x27;/goods&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;goods&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p><img src="/2025/05/20/%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/flask_study/%E6%88%AA%E5%B1%8F2024-01-05%2020.41.25.jpg" alt="截屏2024-01-05 20.41.25"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py 下补充 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 路由参数</span></span><br><span class="line"><span class="comment"># string </span></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/string/&lt;string:name&gt;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_string</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(name)) </span><br><span class="line">    <span class="keyword">return</span> name</span><br><span class="line"><span class="comment"># int</span></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/int/&lt;int:age&gt;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_int</span>(<span class="params">age</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(age)) </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(age) </span><br><span class="line"><span class="comment"># uuid</span></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/getuuid&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_uuid2</span>():</span><br><span class="line">    <span class="keyword">import</span> uuid </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(uuid.uuid4())</span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/uuid/&lt;uuid:id&gt;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_uuid</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">id</span>)) </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(<span class="built_in">id</span>) </span><br><span class="line"><span class="comment"># any</span></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/any/&lt;any(apple,orange,banana):id&gt;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_any</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">id</span>)) </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(<span class="built_in">id</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># method : 请求方式 默认 get请求</span></span><br><span class="line"><span class="comment"># 如果要 get 和 post 都支持，需要改写一下。</span></span><br><span class="line"><span class="comment"># http状态码 1XX 成功一部分；2XX成功；3XX重定向；4XX客户端错误；5XX服务端错误。</span></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/methods&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_methods</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;methods&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># spider.py </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests </span><br><span class="line"></span><br><span class="line"><span class="comment"># get 请求</span></span><br><span class="line">res = requests.get(<span class="string">&#x27;http://127.0.0.1:5000/methods&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># post 请求</span></span><br><span class="line">res = requests.post(<span class="string">&#x27;http://127.0.0.1:5000/methods&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><h1 id="Flask请求request-x2F-响应response"><a href="#Flask请求request-x2F-响应response" class="headerlink" title="Flask请求request&#x2F;响应response"></a>Flask请求request&#x2F;响应response</h1><p><img src="/2025/05/20/%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/flask_study/%E6%88%AA%E5%B1%8F2024-01-06%2017.39.53.jpg" alt="截屏2024-01-06 17.39.53"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint, Response,jsonify, render_template,request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 蓝图用于规划 url</span></span><br><span class="line">blue = Blueprint(<span class="string">&#x27;user&#x27;</span>,__name__) <span class="comment"># __name__表示导入到当前模块</span></span><br><span class="line">blue1 = Blueprint(<span class="string">&#x27;product1&#x27;</span>,__name__) </span><br><span class="line">blue2 = Blueprint(<span class="string">&#x27;product2&#x27;</span>,__name__) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端向 服务端 发送请求</span></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/request/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_request</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;look here ! this is:&#x27;</span>,request)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 重要属性</span></span><br><span class="line">    <span class="built_in">print</span>(request.method)<span class="comment"># &#x27;get&#x27; &#x27;post&#x27; ...</span></span><br><span class="line">    <span class="built_in">print</span>(request.args)  <span class="comment"># 获取 GET 请求的参数</span></span><br><span class="line">    <span class="built_in">print</span>(request.args.get(<span class="string">&#x27;name&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(request.form)  <span class="comment"># 获取 POST 请求的参数</span></span><br><span class="line">    <span class="built_in">print</span>(request.form.get(<span class="string">&#x27;name&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(request.cookies)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;request ok!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># response 服务端 向 客户端发送响应</span></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/response/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_response</span>():</span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line">    <span class="comment"># 响应的几种方式</span></span><br><span class="line">    <span class="comment"># 1.返回字符串 return &#x27;response is ok!&#x27;</span></span><br><span class="line">    <span class="comment"># 2.模版渲染,需要渲染相应的html文件.     </span></span><br><span class="line">    <span class="comment"># return render_template(&#x27;index.html&#x27;,name=&#x27;zs&#x27;,age=100)</span></span><br><span class="line">    <span class="comment"># 3.返回json数据。</span></span><br><span class="line">    <span class="comment"># data = &#123;&#x27;name&#x27;:&#x27;李四&#x27;,&#x27;age&#x27;:100&#125;</span></span><br><span class="line">    <span class="comment"># # return data </span></span><br><span class="line">    <span class="comment"># return jsonify(data) # 序列化一下，把字典变成str。</span></span><br><span class="line">    <span class="comment"># 4.自定义response对象。</span></span><br><span class="line">    html = render_template(<span class="string">&#x27;index.html&#x27;</span>,name=<span class="string">&#x27;小城&#x27;</span>,age=<span class="number">100</span>)</span><br><span class="line">    <span class="built_in">print</span>(html,<span class="built_in">type</span>(html))    </span><br><span class="line">    res = Response(html)</span><br><span class="line">    <span class="keyword">return</span> res </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests </span><br><span class="line"><span class="comment"># 模拟前端的请求。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get 请求 ?后加参数。</span></span><br><span class="line">res = requests.get(<span class="string">&#x27;http://127.0.0.1:5000/request/?name=lisi&amp;name=zhangsan&amp;age=22&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># post 请求 字典形式加参数。</span></span><br><span class="line">res = requests.post(<span class="string">&#x27;http://127.0.0.1:5000/request/&#x27;</span>,</span><br><span class="line">                    data=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;lucy&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">33</span>&#125;,</span><br><span class="line">                    cookies=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;hello&#x27;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面代码 模拟发送了两次请求，每一个请求都会触发一次 view.py中的request方法。</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- &lt;link rel=&quot;stylesheet&quot; href=&quot;../static/index.css&quot;&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;,filename=&#x27;index.css&#x27;)&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Index<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>name: &#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>age: &#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint, Response,jsonify, redirect, render_template,request, url_for</span><br><span class="line"></span><br><span class="line"><span class="comment"># 蓝图用于规划 url</span></span><br><span class="line">blue = Blueprint(<span class="string">&#x27;user&#x27;</span>,__name__) <span class="comment"># __name__表示导入到当前模块</span></span><br><span class="line">blue1 = Blueprint(<span class="string">&#x27;product1&#x27;</span>,__name__) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端向 服务端 发送请求</span></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/request/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_request</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;look here ! this is:&#x27;</span>,request)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 重要属性</span></span><br><span class="line">    <span class="built_in">print</span>(request.method)<span class="comment"># &#x27;get&#x27; &#x27;post&#x27; ...</span></span><br><span class="line">    <span class="built_in">print</span>(request.args)  <span class="comment"># 获取 GET 请求的参数</span></span><br><span class="line">    <span class="built_in">print</span>(request.args.get(<span class="string">&#x27;name&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(request.form)  <span class="comment"># 获取 POST 请求的参数</span></span><br><span class="line">    <span class="built_in">print</span>(request.form.get(<span class="string">&#x27;name&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(request.cookies)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;request ok!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># response 服务端 向 客户端发送响应</span></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/response/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_response</span>():</span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line">    <span class="comment"># 响应的几种方式</span></span><br><span class="line">    <span class="comment"># 1.返回字符串 return &#x27;response is ok!&#x27;</span></span><br><span class="line">    <span class="comment"># 2.模版渲染,需要渲染相应的html文件.     </span></span><br><span class="line">    <span class="comment"># return render_template(&#x27;index.html&#x27;,name=&#x27;zs&#x27;,age=100)</span></span><br><span class="line">    <span class="comment"># 3.返回json数据。</span></span><br><span class="line">    <span class="comment"># data = &#123;&#x27;name&#x27;:&#x27;李四&#x27;,&#x27;age&#x27;:100&#125;</span></span><br><span class="line">    <span class="comment"># # return data </span></span><br><span class="line">    <span class="comment"># return jsonify(data) # 序列化一下，把字典变成str。</span></span><br><span class="line">    <span class="comment"># 4.自定义response对象。</span></span><br><span class="line">    html = render_template(<span class="string">&#x27;index.html&#x27;</span>,name=<span class="string">&#x27;小城&#x27;</span>,age=<span class="number">100</span>)</span><br><span class="line">    <span class="built_in">print</span>(html,<span class="built_in">type</span>(html))    </span><br><span class="line">    res = Response(html)</span><br><span class="line">    <span class="keyword">return</span> res </span><br><span class="line"></span><br><span class="line"><span class="comment"># Redirect 重定向</span></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/redirect&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_redirect</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># 1.</span></span><br><span class="line">    <span class="comment"># return redirect(&#x27;https://www.qq.com&#x27;) # 重定向到外部网站。</span></span><br><span class="line">    <span class="comment"># 2.</span></span><br><span class="line">    <span class="comment"># return redirect(&#x27;/response/&#x27;) # 重定向到本地path路径，可能会触发路由修饰器的 视图函数。</span></span><br><span class="line">    <span class="comment"># 3.</span></span><br><span class="line">    <span class="comment"># 反向解析 url_for 通过视图函数 反过来找到 路由。</span></span><br><span class="line">    <span class="comment"># url_for(&#x27;蓝图名称.视图函数名&#x27;) 注意是蓝图名称，不是蓝图对象。</span></span><br><span class="line">    ret = url_for(<span class="string">&#x27;user.get_response&#x27;</span>,) <span class="comment"># ret 其实是路由 path。</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;ret is:&#x27;</span>,ret) <span class="comment"># 打印 ret is: /response/</span></span><br><span class="line">    <span class="comment"># url_for的重定向是能够传参的。</span></span><br><span class="line">    ret2 = url_for(<span class="string">&#x27;user.get_request&#x27;</span>,name=<span class="string">&#x27;张飞&#x27;</span>,age=<span class="number">100</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(ret2)</span><br></pre></td></tr></table></figure><h1 id="cookie实现"><a href="#cookie实现" class="headerlink" title="cookie实现"></a>cookie实现</h1><p>​cookie的记忆是基于用户而不是浏览器；<img src="/2025/05/20/%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/flask_study/%E6%88%AA%E5%B1%8F2024-01-06%2020.23.45.jpg" alt="截屏2024-01-06 20.23.45"></p><p><img src="/2025/05/20/%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/flask_study/%E6%88%AA%E5%B1%8F2024-01-07%2020.07.43.jpg" alt="截屏2024-01-07 20.07.43"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint, redirect, render_template, request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 蓝图用于规划 url</span></span><br><span class="line">blue = Blueprint(<span class="string">&#x27;user&#x27;</span>,__name__) <span class="comment"># __name__表示导入到当前模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首页</span></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/home/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>():</span><br><span class="line">    <span class="comment"># 4. 获取 cookie</span></span><br><span class="line">    username = request.cookies.get(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;/home.html&#x27;</span>,username=username)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录</span></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/login/&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="comment"># GET 访问登录页面</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">pass</span> </span><br><span class="line">        <span class="comment"># 1.获取前端提交过来的数据</span></span><br><span class="line">        username = request.form.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.form.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="comment"># 2.模拟登录，验证用户名密码</span></span><br><span class="line">        <span class="keyword">if</span> username==<span class="string">&#x27;chen&#x27;</span> <span class="keyword">and</span> password==<span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">            <span class="comment"># success  则重定向到 home 中</span></span><br><span class="line">            response = redirect(<span class="string">&#x27;/home&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(response,<span class="string">&#x27;look here&#x27;</span>)</span><br><span class="line">            <span class="comment"># 3. 设置 cookie ，cookie中不能有中文。</span></span><br><span class="line">            response.set_cookie(<span class="string">&#x27;user&#x27;</span>,username,max_age=<span class="number">3600</span>*<span class="number">24</span>*<span class="number">7</span>)</span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;用户名或密码错误&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注销</span></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/logout&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>():</span><br><span class="line">    response = redirect(<span class="string">&#x27;/home&#x27;</span>)</span><br><span class="line">    <span class="comment"># 5.删除cookie</span></span><br><span class="line">    response.delete_cookie(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- /home.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- &lt;link rel=&quot;stylesheet&quot; href=&quot;../static/index.css&quot;&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;,filename=&#x27;index.css&#x27;)&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &#123;% if username %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            当前用户是:&#123;&#123;username&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/logout&quot;</span>&gt;</span>注销<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/login&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 注意要避免前端跳前端，那样会数据渲染不了,一定要经过后端。 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /login 的路径在后端有对应的处理，那么就说明点击链接时涉及到后端路由。</span></span><br><span class="line"><span class="comment">        否则，可能是前端路由或者直接的页面跳转。 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;a href=&quot;/login&quot;&gt;登录&lt;/a&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- /login.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- &lt;link rel=&quot;stylesheet&quot; href=&quot;../static/index.css&quot;&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;,filename=&#x27;index.css&#x27;)&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 登录表格 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;form action=&quot;&quot; method=&quot;post&quot;&gt;  写法1 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&#123;&#123;url_for(&#x27;user.login&#x27;)&#125;&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span> <span class="comment">&lt;!-- 写法2 用反向解析 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="session实现"><a href="#session实现" class="headerlink" title="session实现"></a>session实现</h1><p><img src="/2025/05/20/%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/flask_study/%E6%88%AA%E5%B1%8F2024-01-07%2020.46.56.jpg" alt="截屏2024-01-07 20.46.56"></p><p><img src="/2025/05/20/%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/flask_study/%E6%88%AA%E5%B1%8F2024-01-07%2021.18.45.jpg" alt="截屏2024-01-07 21.18.45"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint, redirect, render_template, request, session</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 蓝图用于规划 url</span></span><br><span class="line">blue = Blueprint(<span class="string">&#x27;user&#x27;</span>,__name__) <span class="comment"># __name__表示导入到当前模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首页</span></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/home/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>():</span><br><span class="line">    <span class="comment">#  获取 session</span></span><br><span class="line">    username = session.get(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;/home.html&#x27;</span>,username=username)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录</span></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/login/&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="comment"># GET 访问登录页面</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">pass</span> </span><br><span class="line">        <span class="comment"># 1.获取前端提交过来的数据</span></span><br><span class="line">        username = request.form.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.form.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="comment"># 2.模拟登录，验证用户名密码</span></span><br><span class="line">        <span class="keyword">if</span> username==<span class="string">&#x27;chen&#x27;</span> <span class="keyword">and</span> password==<span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">            response = redirect(<span class="string">&#x27;/home/&#x27;</span>)</span><br><span class="line">            <span class="comment"># 设置 session </span></span><br><span class="line">            session[<span class="string">&#x27;user&#x27;</span>] = username </span><br><span class="line">            session.permanent = <span class="literal">True</span> </span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;用户名或密码错误&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注销</span></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/logout&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>():</span><br><span class="line">    response = redirect(<span class="string">&#x27;/home&#x27;</span>)</span><br><span class="line">    <span class="comment"># 删除 session</span></span><br><span class="line">    session.pop(<span class="string">&#x27;user&#x27;</span>)  </span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># __init__.py</span></span><br><span class="line"><span class="comment"># 导入上一层级的 App 的包的时候，这个 __init__.py自动执行</span></span><br><span class="line"><span class="comment"># 一个 App 就是一个 flask 应用。</span></span><br><span class="line"><span class="comment"># 注意不要循环导入，这里统一外部向 __init__ 导入；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask </span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> blue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不必每一次 导入app包都新建一个 app 对象，所以封装进方法等待调用。jdong</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_app</span>():</span><br><span class="line">    app = Flask(__name__)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 给app对象 注册 blue蓝图，把他们关联上。</span></span><br><span class="line">    app.register_blueprint(blueprint=blue)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># session 配置</span></span><br><span class="line">    <span class="built_in">print</span>(app.config)</span><br><span class="line">    app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="string">&#x27;123&#x27;</span> <span class="comment"># 对称加密</span></span><br><span class="line">    app.config[<span class="string">&#x27;PERMANENT_SESSION_LIFETIME&#x27;</span>] = datetime.timedelta(days=<span class="number">8</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> app </span><br></pre></td></tr></table></figure><h1 id="template"><a href="#template" class="headerlink" title="template"></a>template</h1><p>Flask 使用 jinja2模版引擎。</p><p><img src="/2025/05/20/%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/flask_study/%E6%88%AA%E5%B1%8F2024-01-11%2010.42.45.jpg" alt="截屏2024-01-11 10.42.45"></p><p><img src="/2025/05/20/%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/flask_study/%E6%88%AA%E5%B1%8F2024-01-11%2010.45.46.jpg" alt="截屏2024-01-11 10.45.46"></p><p><img src="/2025/05/20/%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/flask_study/%E6%88%AA%E5%B1%8F2024-01-11%2010.46.38.jpg" alt="截屏2024-01-11 10.46.38"></p><p><img src="/2025/05/20/%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/flask_study/%E6%88%AA%E5%B1%8F2024-01-11%2019.43.24.jpg" alt="截屏2024-01-11 19.43.24"></p><p>view.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint, render_template </span><br><span class="line"></span><br><span class="line"><span class="comment"># 蓝图用于规划 url</span></span><br><span class="line">blue = Blueprint(<span class="string">&#x27;user&#x27;</span>,__name__) <span class="comment"># __name__表示导入到当前模块</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>():</span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;ikun ikun ikun&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>:<span class="number">7</span>,</span><br><span class="line">        <span class="string">&#x27;likes&#x27;</span>:[<span class="string">&#x27;ball&#x27;</span>,<span class="string">&#x27;sing&#x27;</span>,<span class="string">&#x27;dance&#x27;</span>,<span class="string">&#x27;code&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># return render_template(&#x27;home.html&#x27;,**data)</span></span><br><span class="line">    <span class="comment"># return render_template(&#x27;base.html&#x27;)</span></span><br><span class="line">    <span class="comment"># return render_template(&#x27;child1.html&#x27;)</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;child2.html&#x27;</span>,**data)</span><br></pre></td></tr></table></figure><p>home.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    &#123;# 模版语言的注释 #&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>变量:<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>name:&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>age:&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>likes:&#123;&#123;likes&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>标签:<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>if语句<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    &#123;% if age &gt;= 18 %&#125; </span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;name&#125;&#125;已经成年了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;% elif age&gt;=6 %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>可以上学了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;name&#125;&#125;还是小孩<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;  </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>for循环<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    &#123;% for like in likes %&#125;</span><br><span class="line">        &#123;% if loop.first %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:red;&quot;</span>&gt;</span>&#123;&#123;like&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        &#123;% elif loop.last %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:blue;&quot;</span>&gt;</span>&#123;&#123;like&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;like&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;  </span><br><span class="line">        index:&#123;&#123; loop.index &#125;&#125;</span><br><span class="line">        index2:&#123;&#123; loop.index0 &#125;&#125;</span><br><span class="line">        revindex:&#123;&#123; loop.revindex &#125;&#125;</span><br><span class="line">        revindex0:&#123;&#123; loop.revindex0 &#125;&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span>  </span><br></pre></td></tr></table></figure><p>base.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>父模版<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &#123;# 在html的head中导入css文件，static中 #&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123;url_for(&#x27;static&#x27;,filename=&#x27;css/base.css&#x27;)&#125;&#125;&quot;</span>&gt;</span>        </span><br><span class="line">    &#123;% block extcss %&#125;</span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;% block head %&#125;</span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    &#123;% block content %&#125;</span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    &#123;% block foot %&#125;</span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;# 导入js文件，static中 #&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;url_for(&#x27;static&#x27;,filename=&#x27;js/base.js&#x27;)&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    &#123;% block extjs %&#125;</span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span>  </span><br></pre></td></tr></table></figure><p>child1.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#x27;base.html&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block head %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>ok,ok,ok.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>child2.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#x27;child1.html&#x27; %&#125; &#123;# 继承 #&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block head %&#125;</span><br><span class="line">    &#123;&#123; super() &#125;&#125; &#123;# 保留父辈block head内容 #&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>python<span class="tag">&lt;/<span class="name">p</span>&gt;</span> &#123;# 如果没有super就,覆盖重写了 #&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    &#123;% include &#x27;child2_include.html&#x27; %&#125; &#123;# 导入include内容 #&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Flask content <span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 宏定义 ： python的函数 --&gt;</span></span><br><span class="line">&#123;% macro person(name,age) %&#125;    </span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span>&gt;</span>姓名 : &#123;&#123;name&#125;&#125;, 年龄 : &#123;&#123;age&#125;&#125; <span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">&#123;% endmacro %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block foot %&#125;</span><br><span class="line">    &#123;&#123; person(&#x27;小鸟&#x27;,100) &#125;&#125;</span><br><span class="line">    </span><br><span class="line">    &#123;# 过滤器 #&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;name | capitalize &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;name | title &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;name | upper &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;name | upper | first |lower &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>child2_include.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是child2中include的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h1><h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><p>object relational mapping 对象关系映射；</p><p>数据库的表 映射到对象，对对象操作。 </p><p><code>pip install flask-sqlalchemy  pip install flask-migrate   pip install pymysql</code></p><p><img src="/2025/05/20/%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/flask_study/%E6%88%AA%E5%B1%8F2024-01-14%2019.49.26.jpg" alt="截屏2024-01-14 19.49.26"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  __init__.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入上一层级的 App 的包的时候，这个 __init__.py自动执行</span></span><br><span class="line"><span class="comment"># 一个 App 就是一个 flask 应用。</span></span><br><span class="line"><span class="comment"># 注意不要循环导入，这里统一外部向 __init__ 导入；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask </span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> blue</span><br><span class="line"><span class="keyword">from</span> .exts <span class="keyword">import</span> init_exit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不必每一次 导入app包都新建一个 app 对象，所以封装进方法等待调用。jdong</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_app</span>():</span><br><span class="line">    app = Flask(__name__)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 给app对象 注册 blue蓝图，把他们关联上。</span></span><br><span class="line">    app.register_blueprint(blueprint=blue)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 配置数据库</span></span><br><span class="line">    db_uri = <span class="string">&#x27;sqlite:///sqlite3.db&#x27;</span></span><br><span class="line">    app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = db_uri <span class="comment"># 配置数据库路径</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 把 插件和app关联上</span></span><br><span class="line">    init_exit(app=app)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> app </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># exts.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># exts.py 插件管理</span></span><br><span class="line"><span class="comment"># 扩展的第三方插件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.导入第三方插件。</span></span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">from</span> flask_migrate <span class="keyword">import</span> Migrate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.初始化。</span></span><br><span class="line">db = SQLAlchemy()    <span class="comment"># ORM (让类变成模型)</span></span><br><span class="line">migrate = Migrate()  <span class="comment"># 数据迁移 (让模型变成表)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.和app对象绑定。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_exit</span>(<span class="params">app</span>):</span><br><span class="line">    db.init_app(app=app)</span><br><span class="line">    migrate.init_app(app=app,db=db)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># models.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .exts <span class="keyword">import</span> db </span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型中的 （对应）   数据库中的</span></span><br><span class="line"><span class="comment"># 类        --&gt;     表</span></span><br><span class="line"><span class="comment"># 类属性     --&gt;     表的字段</span></span><br><span class="line"><span class="comment"># 对象       --&gt;     表中的一行数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型 (就是一个继承了db.Model的类)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(db.Model):</span><br><span class="line">    <span class="comment"># 表名</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;tb_user&#x27;</span></span><br><span class="line">    <span class="comment"># 定义表的字段 </span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">30</span>),unique=<span class="literal">True</span>,index=<span class="literal">True</span>)</span><br><span class="line">    age = db.Column(db.Integer,default=<span class="number">1</span>)</span><br><span class="line">    sex = db.Column(db.Boolean,default=<span class="literal">True</span>)</span><br><span class="line">    salary = db.Column(db.Float,default=<span class="number">1000000000</span>,nullable=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint </span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> * </span><br><span class="line"><span class="comment"># 通过导入models模块，让models模块执行，间接让exits模块执行，也就有了db。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 蓝图用于规划 url</span></span><br><span class="line">blue = Blueprint(<span class="string">&#x27;user&#x27;</span>,__name__) <span class="comment"># __name__表示导入到当前模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给蓝图对象加上 路由；</span></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;home&#x27;</span> </span><br><span class="line"><span class="comment"># 路由参数</span></span><br><span class="line"><span class="comment"># string </span></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/string/&lt;string:name&gt;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_string</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(name)) </span><br><span class="line">    <span class="keyword">return</span> name</span><br></pre></td></tr></table></figure><p>进入 app.py 文件夹所在的目录，执行</p><p><code>flask db init（创建迁移文件夹migrates;只调用一次）  </code><br><code>flask db migrate (生成迁移文件;自动搜索继承了db.Model的类) </code><br><code>flask db upgrade (把类都转换成表)  </code><br><code>flask db downgrade (撤回把类都转换成表)</code></p><p>每一次执行 <code>flask db migrate</code> 都会在migrations&#x2F;versions 中生成新的py文件，在表格变动的时候记得生成，然后 再 upgrade 变成表，在instance 下的db文件可见这些表。</p><p>注意：</p><p>Flask使用migrate迁移后，无法检测到models，无法生成表，则 <em><strong>*只需要在 app.py 中导入 models.py 中的类即可。*</strong></em></p><h2 id="模型表操作"><a href="#模型表操作" class="headerlink" title="模型表操作"></a>模型表操作</h2><p><img src="/2025/05/20/%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/flask_study/%E6%88%AA%E5%B1%8F2024-02-06%2023.39.34.jpg" alt="截屏2024-02-06 23.39.34"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># view.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> and_</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint, render_template, request</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> desc </span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 蓝图用于规划 url</span></span><br><span class="line">blue = Blueprint(<span class="string">&#x27;user&#x27;</span>,__name__) <span class="comment"># __name__表示导入到当前模块</span></span><br><span class="line">blue1 = Blueprint(<span class="string">&#x27;product1&#x27;</span>,__name__) </span><br><span class="line">blue2 = Blueprint(<span class="string">&#x27;product2&#x27;</span>,__name__) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 给蓝图对象加上 路由；</span></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/useradd&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_add</span>():</span><br><span class="line">    u = User()</span><br><span class="line">    u.name = <span class="string">&#x27;kun&#x27;</span></span><br><span class="line">    u.age = <span class="number">24</span> </span><br><span class="line">    db.session.add(u)   <span class="comment"># u对象添加到session中。</span></span><br><span class="line">    db.session.commit() <span class="comment"># 同步到数据库中.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;success!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/useradds&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_adds</span>():</span><br><span class="line">    users = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>,<span class="number">30</span>):</span><br><span class="line">        u = User()</span><br><span class="line">        u.name = <span class="string">&#x27;斌斌&#x27;</span> + <span class="built_in">str</span>(i)</span><br><span class="line">        u.age = i </span><br><span class="line">        users.append(u)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        db.session.add_all(users)</span><br><span class="line">        db.session.commit() <span class="comment"># 事物提交</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        db.session.rollback() <span class="comment"># 回滚</span></span><br><span class="line">        db.session.flush() <span class="comment"># 清空缓存</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;fail !&#x27;</span> + <span class="built_in">str</span>(e)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;success !!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/userdel&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_del</span>():</span><br><span class="line">    u = User.query.first()  <span class="comment"># 先查到，再删除。</span></span><br><span class="line">    db.session.delete(u)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;success !&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/userupdate&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_update</span>():</span><br><span class="line">    u = User.query.first()  <span class="comment"># 先查到，再删除。</span></span><br><span class="line">    u.age = <span class="number">1000</span></span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;success !&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/userget/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">user_get</span>():</span><br><span class="line">    users = User.query.<span class="built_in">all</span>()</span><br><span class="line">    <span class="comment"># print(users) # class &#x27;list&#x27;</span></span><br><span class="line">    <span class="comment"># print(User.query) # 查询语句</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># filter()</span></span><br><span class="line">    users = User.query.<span class="built_in">filter</span>()</span><br><span class="line">    <span class="comment"># print(users,type(users)) # 查询集,可以不停的 filter再filter.</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># get()</span></span><br><span class="line">    user = User.query.get(<span class="number">8</span>)</span><br><span class="line">    <span class="comment"># print(user,type(user)) # user 对象.</span></span><br><span class="line">    <span class="comment"># print(user.name,user.age)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># filter()</span></span><br><span class="line">    users = User.query.<span class="built_in">filter</span>(User.age==<span class="number">20</span>)</span><br><span class="line">    users = User.query.filter_by(age=<span class="number">20</span>)</span><br><span class="line">    users = User.query.<span class="built_in">filter</span>(User.age&gt;<span class="number">20</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">list</span>(users))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># limit() 前几条</span></span><br><span class="line">    <span class="comment"># offset() 跳过前几条</span></span><br><span class="line">    users = User.query.offset(<span class="number">3</span>).limit(<span class="number">4</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">list</span>(users))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># order by </span></span><br><span class="line">    users = User.query.order_by(<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line">    users = User.query.order_by(desc(<span class="string">&#x27;age&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">list</span>(users))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 逻辑运算</span></span><br><span class="line">    users = User.query.<span class="built_in">filter</span>(and_(User.age&gt;<span class="number">20</span>,User.age&lt;<span class="number">25</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">list</span>(users))</span><br><span class="line">    users = User.query.<span class="built_in">filter</span>(User.name.contains(<span class="string">&#x27;3&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">list</span>(users))</span><br><span class="line">    users = User.query.<span class="built_in">filter</span>(User.name.in_([<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>]))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">list</span>(users))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;success !&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># paginate 对象，在网页中/paginate/？后加的参数 page=1 就是第一页的内容。</span></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/paginate/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_paginate</span>():</span><br><span class="line">    <span class="comment"># 默认显示第一页</span></span><br><span class="line">    page = <span class="built_in">int</span>(request.args.get(<span class="string">&#x27;page&#x27;</span>,<span class="number">1</span>))</span><br><span class="line">    <span class="comment"># 每页显示数据量</span></span><br><span class="line">    per_page = <span class="built_in">int</span>(request.args.get(<span class="string">&#x27;per_page&#x27;</span>,<span class="number">5</span>))</span><br><span class="line">    <span class="built_in">print</span>(page,<span class="built_in">type</span>(page))</span><br><span class="line">    <span class="built_in">print</span>(per_page,<span class="built_in">type</span>(per_page))</span><br><span class="line">    <span class="comment"># 下面的只是默认形参，实际以网页输入的参数为准。</span></span><br><span class="line">    p = User.query.paginate(page=page,per_page=per_page,error_out=<span class="literal">False</span>)</span><br><span class="line">    <span class="built_in">print</span>(p.items) <span class="comment"># 返回当前页的内容列表</span></span><br><span class="line">    <span class="built_in">print</span>(p.has_next) <span class="comment"># 是否有下一页</span></span><br><span class="line">    <span class="built_in">print</span>(p.has_prev)</span><br><span class="line">    <span class="built_in">print</span>(p.total)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;paginate.html&#x27;</span>,p=p)</span><br><span class="line">    </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># model.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .exts <span class="keyword">import</span> db </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(db.Model):</span><br><span class="line">    <span class="comment"># 表名</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;user1&#x27;</span></span><br><span class="line">    <span class="comment"># 定义表的字段 </span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">30</span>),unique=<span class="literal">True</span>)</span><br><span class="line">    age = db.Column(db.Integer,default=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>: <span class="comment"># 内置字符串函数</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先去bootstrap官网下载文件，把对应的bootstrap.css 文件放到app&#x2F;static&#x2F;css文件夹下。照着文档指导配合自己的逻辑关系写即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- paginate.html&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="comment">&lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="comment">&lt;head&gt;</span></span><br><span class="line"><span class="comment">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="comment">    &lt;title&gt;分页演示&lt;/title&gt;</span></span><br><span class="line"><span class="comment">    &lt;!-- 先去bootstrp官网下载对应的css文件。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;,filename=&#x27;css/bootstrap.css&#x27;)&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>分页演示<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 编程的方式插入具体的内容 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span>  </span><br><span class="line">            &#123;% for user in p.items %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span>&#123;&#123; user.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>    </span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加上页脚 也就是分页内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pagination&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 上一页 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;page-item&quot;</span>&gt;</span></span><br><span class="line">            &#123;% if p.has_prev %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;page-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/paginate/?page=&#123;&#123; p.prev_num &#125;&#125;&amp;per_page=3&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Previous&quot;</span>&gt;</span></span><br><span class="line">            &#123;% else %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;page-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Previous&quot;</span>&gt;</span></span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="symbol">&amp;laquo;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 中间页码 --&gt;</span></span><br><span class="line">        &#123;% for i in range(p.pages) %&#125;   </span><br><span class="line">            &#123;% if p.page == i+1 %&#125; <span class="comment">&lt;!-- 标亮当前页面 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;page-item active&quot;</span>&gt;</span></span><br><span class="line">            &#123;% else %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;page-item&quot;</span>&gt;</span></span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line">            <span class="comment">&lt;!-- &lt;li class=&quot;page-item&quot;&gt; --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;page-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/paginate/?page=&#123;&#123; i+1 &#125;&#125;&amp;per_page=3&quot;</span>&gt;</span>&#123;&#123; i + 1 &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">        <span class="comment">&lt;!-- 下一页 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;page-item&quot;</span>&gt;</span></span><br><span class="line">            &#123;% if p.has_next %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;page-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/paginate/?page=&#123;&#123; p.next_num &#125;&#125;&amp;per_page=3&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Next&quot;</span>&gt;</span></span><br><span class="line">            &#123;% else %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;page-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Next&quot;</span>&gt;</span></span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="symbol">&amp;raquo;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="图书馆测试项目"><a href="#图书馆测试项目" class="headerlink" title="图书馆测试项目"></a>图书馆测试项目</h1><p><img src="/2025/05/20/%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/flask_study/%E6%88%AA%E5%B1%8F2024-02-28%2008.45.02.jpg" alt="截屏2024-02-28 08.45.02"></p><p>app.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接从App包 下调用 __init__.py 中的方法创建app对象就 好了。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> App <span class="keyword">import</span> create_app </span><br><span class="line"><span class="keyword">from</span> App.models <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">app = create_app()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><code>__init__.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入上一层级的 App 的包的时候，这个 __init__.py自动执行</span></span><br><span class="line"><span class="comment"># 一个 App 就是一个 flask 应用。</span></span><br><span class="line"><span class="comment"># 注意不要循环导入，这里统一外部向 __init__ 导入；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask </span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> blue</span><br><span class="line"><span class="keyword">from</span> .exts <span class="keyword">import</span> init_exts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不必每一次 导入app包都新建一个 app 对象，所以封装进方法等待调用。jdong</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_app</span>():</span><br><span class="line">    app = Flask(__name__)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 给app对象 注册 blue蓝图，把他们关联上。</span></span><br><span class="line">    app.register_blueprint(blueprint=blue)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 配置数据库</span></span><br><span class="line">    <span class="comment"># db_uri = &#x27;sqlite:///sqlite3.db&#x27;</span></span><br><span class="line">    db_uri = <span class="string">&#x27;mysql+pymysql://root:cys123456@localhost:3306/bookdb&#x27;</span> <span class="comment"># mysql</span></span><br><span class="line">    app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = db_uri <span class="comment"># 配置数据库路径</span></span><br><span class="line">    app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="literal">False</span> </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 把 插件和app关联上</span></span><br><span class="line">    init_exts(app=app)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> app </span><br></pre></td></tr></table></figure><p>exes.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">from</span> flask_migrate <span class="keyword">import</span> Migrate</span><br><span class="line"></span><br><span class="line">db = SQLAlchemy() </span><br><span class="line">migrate = Migrate()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_exts</span>(<span class="params">app</span>):</span><br><span class="line">    db.init_app(app=app)</span><br><span class="line">    migrate.init_app(app=app,db=db)</span><br></pre></td></tr></table></figure><p>models.py 定义模型结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .exts <span class="keyword">import</span> db </span><br><span class="line"></span><br><span class="line"><span class="comment"># 作者 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Author</span>(db.Model):</span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">20</span>) )</span><br><span class="line">    age = db.Column(db.Integer,default=<span class="number">1</span>)</span><br><span class="line">    sex = db.Column(db.Boolean,default=<span class="literal">True</span>) </span><br><span class="line">    email = db.Column(db.String(<span class="number">200</span>))</span><br><span class="line">    <span class="comment"># 关系 (关联上book表) 1对多</span></span><br><span class="line">    <span class="comment"># 如果要知道 一个作者有多少作品，Author.books 关联的表book调用backref的值可以知道对应的作者。</span></span><br><span class="line">    books = db.relationship(<span class="string">&#x27;Book&#x27;</span>,backref=<span class="string">&#x27;auther&#x27;</span>,lazy=<span class="string">&#x27;dynamic&#x27;</span>)  </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 书籍</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(db.Model):</span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">    title = db.Column(db.String(<span class="number">100</span>),unique=<span class="literal">True</span>)</span><br><span class="line">    date = db.Column(db.DateTime)</span><br><span class="line">    <span class="comment"># 1对多，外键。</span></span><br><span class="line">    author_id = db.Column(db.Integer,db.ForeignKey(Author.<span class="built_in">id</span>)) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 中间表 (书籍-出版社) 如果关联中间表，则需要 secondary 参数</span></span><br><span class="line"><span class="comment"># 设置这两个字段为主键的目的是确保在中间表中的每一对关系都是唯一的</span></span><br><span class="line">book_publisher = db.Table(<span class="string">&#x27;book_publisher&#x27;</span>,</span><br><span class="line">    db.Column(<span class="string">&#x27;book_id&#x27;</span>,db.Integer,db.ForeignKey(<span class="string">&#x27;book.id&#x27;</span>),primary_key=<span class="literal">True</span>),</span><br><span class="line">    db.Column(<span class="string">&#x27;publisher_id&#x27;</span>,db.Integer,db.ForeignKey(<span class="string">&#x27;publisher.id&#x27;</span>),primary_key=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 出版社</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Publisher</span>(db.Model):</span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">20</span>),unique=<span class="literal">True</span>)</span><br><span class="line">    address = db.Column(db.String(<span class="number">200</span>))</span><br><span class="line">    province = db.Column(db.String(<span class="number">100</span>))</span><br><span class="line">    country = db.Column(db.String(<span class="number">100</span>))</span><br><span class="line">    website = db.Column(db.String(<span class="number">100</span>))</span><br><span class="line">    <span class="comment"># 多对多，关联book表。</span></span><br><span class="line">    <span class="comment"># 出版社调用 books 可以知道出版社对应的书籍，某一本书调用backref的值知道对应出版社。</span></span><br><span class="line">    books = db.relationship(<span class="string">&#x27;Book&#x27;</span>,backref=<span class="string">&#x27;publishers&#x27;</span>,</span><br><span class="line">                            secondary=book_publisher,lazy=<span class="string">&#x27;dynamic&#x27;</span>)    </span><br></pre></td></tr></table></figure><p>模型构建好以后，就可以进入 app.py 文件夹所在的目录，执行</p><p><code>flask db init（创建迁移文件夹migrates;只调用一次）  </code><br><code>flask db migrate (生成迁移文件;自动搜索继承了db.Model的类) </code><br><code>flask db upgrade (把类都转换成表)  </code><br><code>flask db downgrade (撤回把类都转换成表)</code></p><p>构建完表之后，就可以往表内写各种内容了。如果是vscode插件操作mysql可能出现数据库同步出现问题，此时需要找到migrations文件夹下最下面也就是最新的一个.py文件的名称，此名称去掉下划线，放入mysql数据库的alembic_version中。</p><p><img src="/2025/05/20/%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/flask_study/%E6%88%AA%E5%B1%8F2024-02-28%2008.59.23.jpg" alt="截屏2024-02-28 08.59.23"></p><p><img src="/2025/05/20/%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/flask_study/%E6%88%AA%E5%B1%8F2024-02-28%2008.58.37.jpg" alt="截屏2024-02-28 08.58.37"></p><p>​通过模型让mysql构建好表的结构之后，我们在表内写入数据。</p><p><img src="/2025/05/20/%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/flask_study/%E6%88%AA%E5%B1%8F2024-02-28%2009.02.36.jpg" alt="截屏2024-02-28 09.02.36"></p><p><img src="/2025/05/20/%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/flask_study/%E6%88%AA%E5%B1%8F2024-02-28%2009.02.56.jpg" alt="截屏2024-02-28 09.02.56"></p><p><img src="/2025/05/20/%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/flask_study/%E6%88%AA%E5%B1%8F2024-02-28%2009.03.31.jpg" alt="截屏2024-02-28 09.03.31"></p><p><img src="/2025/05/20/%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/flask_study/%E6%88%AA%E5%B1%8F2024-02-28%2009.03.48.jpg" alt="截屏2024-02-28 09.03.48"></p><p>view.py 视图脚本,基于视图脚本写各个html的前端逻辑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> and_</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint, render_template, request</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> desc </span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 蓝图用于规划 url</span></span><br><span class="line">blue = Blueprint(<span class="string">&#x27;book&#x27;</span>,__name__) <span class="comment"># __name__表示导入到当前模块</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/bookindex/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">book_index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;book_index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/booklist/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">book_list</span>():</span><br><span class="line">    books = Book.query.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;book_list.html&#x27;</span>,books = books)</span><br><span class="line"></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/bookdetail/&lt;int:bid&gt;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">book_detail</span>(<span class="params">bid</span>):</span><br><span class="line">    book = Book.query.get(bid)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;book_detail.html&#x27;</span>,book=book)</span><br><span class="line"></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/authordetail/&lt;int:aid&gt;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">author_detail</span>(<span class="params">aid</span>):</span><br><span class="line">    author = Author.query.get(aid)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;author_detail.html&#x27;</span>,author=author)</span><br><span class="line"></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/publisherdetail/&lt;int:pid&gt;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">publisher_detail</span>(<span class="params">pid</span>):</span><br><span class="line">    publisher = Publisher.query.get(pid)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;publisher_detail.html&#x27;</span>,publisher=publisher)</span><br></pre></td></tr></table></figure><p>book_index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>书籍<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>书籍首页<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/booklist/&quot;</span>&gt;</span>查看所有书籍<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>book_list.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>书籍<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>书籍列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        &#123;% for book in books %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- &lt;a href=&quot;/bookdetail/&#123;&#123; book.id &#125;&#125;&quot;&gt;&#123;&#123; book.title &#125;&#125;&lt;/a&gt; --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;book.book_detail&#x27;,bid=book.id) &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; book.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>book_detail.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>书籍<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>书籍详情<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>书籍标题：&#123;&#123; book.title &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>书籍出版时间：&#123;&#123; book.date &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>作者：</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/authordetail/&#123;&#123; book.auther.id &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; book.auther.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>出版社：</span><br><span class="line">        &#123;% for publisher in book.publishers %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/publisherdetail/&#123;&#123; publisher.id &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; publisher.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>author_detail.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>书籍<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>作者详情<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>作者名称：&#123;&#123; author.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>作者年龄：&#123;&#123; author.age &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>作者性别：&#123;&#123; author.sex &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>作者Email：&#123;&#123; author.email &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我的作品</span><br><span class="line">        &#123;% for book in author.books %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/bookdetail/&#123;&#123; book.id &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; book.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>publisher_detail.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>书籍<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>出版社详情<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>出版社名称：&#123;&#123; publisher.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>出版社名称：&#123;&#123; publisher.address &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>出版社名称：&#123;&#123; publisher.city &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>出版社名称：&#123;&#123; publisher.province &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>出版社名称：&#123;&#123; publisher.website &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>出版社的出版书籍</span><br><span class="line">        &#123;% for book in publisher.books %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/bookdetail/&#123;&#123; book.id &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; book.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="插件使用"><a href="#插件使用" class="headerlink" title="插件使用"></a>插件使用</h1><h2 id="缓存例子"><a href="#缓存例子" class="headerlink" title="缓存例子"></a>缓存例子</h2><p><img src="/2025/05/20/%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/flask_study/%E6%88%AA%E5%B1%8F2024-02-29%2009.35.45.jpg" alt="截屏2024-02-29 09.35.45"></p><p><img src="/2025/05/20/%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/flask_study/%E6%88%AA%E5%B1%8F2024-02-29%2009.42.04.jpg" alt="截屏2024-02-29 09.42.04"></p><p>​使用flask插件 就三个步骤，先下载，再ext.py中初始化，最后再视图中使用。</p><p>​</p><h1 id="中间件（钩子）"><a href="#中间件（钩子）" class="headerlink" title="中间件（钩子）"></a>中间件（钩子）</h1><h2 id="切面编程"><a href="#切面编程" class="headerlink" title="切面编程"></a>切面编程</h2><p><img src="/2025/05/20/%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/flask_study/%E6%88%AA%E5%B1%8F2024-03-01%2010.56.21.jpg" alt="截屏2024-03-01 10.56.21"></p><p>views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> and_</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint, render_template, request</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> desc </span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> .exts <span class="keyword">import</span> cache </span><br><span class="line"></span><br><span class="line"><span class="comment"># 蓝图用于规划 url</span></span><br><span class="line">blue = Blueprint(<span class="string">&#x27;book&#x27;</span>,__name__) <span class="comment"># __name__表示导入到当前模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用缓存</span></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@cache.cached(<span class="params">timeout=<span class="number">20</span></span>) </span><span class="comment"># 给视图函数加上 20 秒的缓存。第一次打开要等5秒，20s内再打开是秒开的，因为有缓存。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;index111&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Index&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;index&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;&#x27;&#x27;切面编程&#x27;&#x27;&#x27;———————————————————————————————————————————————————</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 中间件函数</span></span><br><span class="line"><span class="comment"># 每一次请求之前都会使用。</span></span><br><span class="line"><span class="meta">@blue.before_request</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">before</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;before request.&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(request.path)</span><br><span class="line">    <span class="built_in">print</span>(request.method)</span><br><span class="line">    <span class="built_in">print</span>(request.remote_addr) <span class="comment"># 客户端的IP</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># # 简单反爬</span></span><br><span class="line">    <span class="comment"># # 识别出爬虫 python-requests/2.31.0</span></span><br><span class="line">    <span class="comment"># # 正常浏览器访问  Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit...</span></span><br><span class="line">    <span class="comment"># print(request.user_agent) </span></span><br><span class="line">    <span class="comment"># if &#x27;python&#x27; in request.user_agent.string:</span></span><br><span class="line">    <span class="comment">#     return &#x27;检查出爬虫。&#x27; # 这个会被返回到爬虫运行者那边。</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 针对IP做反爬  简单</span></span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    <span class="comment"># 获取到了IP，如果这个IP之前就有缓存，直接返回 拦截。</span></span><br><span class="line">    <span class="keyword">if</span> cache.get(ip):</span><br><span class="line">        <span class="comment"># 做好拦截，进入视图函数。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;please stop 爬虫!!!&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 如果这个IP之前没有缓存，对每个IP设置缓存，1秒内不能多次重复访问。</span></span><br><span class="line">        cache.<span class="built_in">set</span>(ip,<span class="string">&#x27;value&#x27;</span>,timeout=<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># &#x27;&#x27;&#x27;切面编程&#x27;&#x27;&#x27;—————————————————————————————————————————————————</span></span><br></pre></td></tr></table></figure><p>spider.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests </span><br><span class="line"></span><br><span class="line">res = requests.get(<span class="string">&#x27;http://127.0.0.1:5000/&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res.text) </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):  <span class="comment"># 故意测试一下。</span></span><br><span class="line">    res = requests.get(<span class="string">&#x27;http://127.0.0.1:5000/&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><h1 id="flask四大内置对象"><a href="#flask四大内置对象" class="headerlink" title="flask四大内置对象"></a>flask四大内置对象</h1><p><strong>g</strong>：global，突破变量存储位置限制，例如在 before_request装饰的钩子函数产生了一个后续用得到的变量就可以保存在g对象中，在视图函数中就可以用这个数据。</p><p><strong>request</strong>：请求对象，可以获取客户端提交过来的请求信息。</p><p><strong>session</strong>：会话技术，服务端会话技术的接口。</p><p><strong>current_app</strong>：app的配置信息，app对象获取，一定要在初始化之后使用。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g<span class="selector-class">.star</span> = <span class="string">&#x27;jack&#x27;</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(current_app)</span></span></span><br></pre></td></tr></table></figure><h1 id="静态文件目录static和模版文件目录templates"><a href="#静态文件目录static和模版文件目录templates" class="headerlink" title="静态文件目录static和模版文件目录templates"></a>静态文件目录static和模版文件目录templates</h1><p>​需要去 Flask.py文件中去修改，才能变 templates的配置。但是我们不推荐在这里改。<img src="/2025/05/20/%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/flask_study/%E6%88%AA%E5%B1%8F2024-08-25%2020.40.41.jpg" alt="截屏2024-08-25 20.40.41"></p><p>​给一个改动的例子，把app文件下的 static 和 templates 改到外面一层的文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 __init__</span></span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) <span class="comment"># 本文件的绝对路径的所在文件夹的所在文件夹，就是 上一层的文件夹。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_app</span>():</span><br><span class="line">  static_folder = os.path.join(BASE_DIR,<span class="string">&#x27;static&#x27;</span>)</span><br><span class="line">  template_folder = os.path.join(BASE_DIR,<span class="string">&#x27;template&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  app = Flask(__name__,static_folder=static_folder,</span><br><span class="line">             template_folder=template_folder)  <span class="comment"># 改位置。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h1><p>​      <img src="/2025/05/20/%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/flask_study/%E6%88%AA%E5%B1%8F2024-08-29%2020.07.25.jpg" alt="截屏2024-08-29 20.07.25"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint,render_template,jsonify,request </span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># blue</span></span><br><span class="line">blue = Blueprint(<span class="string">&#x27;user&#x27;</span>,__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 前后端不分离</span></span><br><span class="line"><span class="comment">#       render_template(&#x27;index.html&#x27;,users=users)</span></span><br><span class="line"><span class="comment"># 前后端分离</span></span><br><span class="line"><span class="comment">#       后端返回 json 字符串  jsonify():</span></span><br><span class="line"><span class="comment">#       前端使用 ajax 来请求数据  ajax</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@blue.route(<span class="params"><span class="string">&#x27;/usres/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;PUT&#x27;</span>,<span class="string">&#x27;DELETE&#x27;</span>]</span>) </span><span class="comment"># 查 增 改 删</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">users</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;method&#x27;</span>:<span class="string">&#x27;GET&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;method&#x27;</span>:<span class="string">&#x27;POST&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;PUT&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;method&#x27;</span>:<span class="string">&#x27;PUT&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;DELETE&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;method&#x27;</span>:<span class="string">&#x27;DELETE&#x27;</span>&#125;)</span><br><span class="line">    </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">res = requests.get(<span class="string">&#x27;http://127.0.0.1:5000/usres/&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br><span class="line"></span><br><span class="line">res = requests.post(<span class="string">&#x27;http://127.0.0.1:5000/usres/&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><h1 id="Flask类视图和RESTful"><a href="#Flask类视图和RESTful" class="headerlink" title="Flask类视图和RESTful"></a>Flask类视图和RESTful</h1><p>​我们删除 view模块，新建一个 apis.py模块，对 上面的代码 修改，使用 api接口开发。<br>之前用路由修饰器来访问到视图函数，现在该用单独的一个urls.py模块（路游文件）来实现访问视图函数。 restful 封装了查 增 改 删</p><p><img src="/2025/05/20/%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/flask_study/%E6%88%AA%E5%B1%8F2024-09-10%2014.50.54.jpg" alt="截屏2024-09-10 14.50.54"></p><p>​先说一下 思路，就是在 exts模块中引入restful包的api，然后在 写入exts的初始化的方法中，在初始化的时候把 app对象 和 这个插件api 对象绑定，把我们想要写的逻辑写进一个名叫 apis的模块的 函数中（充当视图函数），新建一个 urls模块 作路由用，这个路由模块中需要 关联上 apis模块中我们的逻辑 和 插件api对象，让索引能够找到 我们apis模块中 视图函数。（但是请在__init__模块中import 一下，不然urls模块不会执行）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># exts.py</span></span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">from</span> flask_migrate <span class="keyword">import</span> Migrate</span><br><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span> Api</span><br><span class="line"></span><br><span class="line">db = SQLAlchemy() </span><br><span class="line">migrate = Migrate()</span><br><span class="line">api = Api()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_exts</span>(<span class="params">app</span>):</span><br><span class="line">    db.init_app(app=app)</span><br><span class="line">    migrate.init_app(app=app,db=db)</span><br><span class="line">    api.init_app(app=app)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># apis.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> jsonify</span><br><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span> Resource</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类视图 CBV class based view</span></span><br><span class="line"><span class="comment"># 视图函数 FBV function based view </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloResouce</span>(<span class="title class_ inherited__">Resource</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;msg&#x27;</span>:<span class="string">&#x27;get 请求&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;msg&#x27;</span>:<span class="string">&#x27;post 请求&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="comment"># urls.py 路由文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .exts <span class="keyword">import</span> api</span><br><span class="line"><span class="keyword">from</span> .apis <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 路由</span></span><br><span class="line">api.add_resource(HelloResouce,<span class="string">&#x27;/hello/&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="字段格式化及参数解析"><a href="#字段格式化及参数解析" class="headerlink" title="字段格式化及参数解析"></a>字段格式化及参数解析</h1><p><img src="/2025/05/20/%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/flask_study/%E6%88%AA%E5%B1%8F2024-09-19%2014.47.35.jpg" alt="截屏2024-09-19 14.47.35"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># apis.py</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> jsonify</span><br><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span> Resource,fields,marshal_with,reqparse</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类视图 CBV class based view</span></span><br><span class="line"><span class="comment"># 视图函数 FBV function based view </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloResouce</span>(<span class="title class_ inherited__">Resource</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;msg&#x27;</span>:<span class="string">&#x27;get 请求&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;msg&#x27;</span>:<span class="string">&#x27;post 请求&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------------------------  字段格式化 ------------------------------ </span></span><br><span class="line"><span class="comment"># 定义返回给前端的数据格式</span></span><br><span class="line"><span class="comment"># flask-restful</span></span><br><span class="line"><span class="comment"># 一个字典，定义格式化，定义返回给前端的数据格式</span></span><br><span class="line">ret_field = &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>:fields.Integer,</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>:fields.String,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>:fields.Integer,</span><br><span class="line">    <span class="comment"># &#x27;status&#x27;:fields.Integer,</span></span><br><span class="line">    <span class="comment"># &#x27;msg&#x27;:fields.String,</span></span><br><span class="line">    <span class="comment">#  &#x27;go&#x27;:fields.String,</span></span><br><span class="line">    <span class="comment">#  &#x27;data&#x27;:fields.String,</span></span><br><span class="line">    <span class="string">&#x27;like&#x27;</span>:fields.String(default=<span class="string">&#x27;ball&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;url&#x27;</span>:fields.Url(endpoint=<span class="string">&#x27;id&#x27;</span>,absolute=<span class="literal">True</span>) <span class="comment">#  显示路由绝对路径。在urls模块中 endpoint在哪个路径，这里就会显示谁的路径。</span></span><br><span class="line">    <span class="comment">#  &#x27;data2&#x27;:fields.String(attribute=&#x27;data&#x27;) # 使用 data 的值。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserResource</span>(<span class="title class_ inherited__">Resource</span>):</span><br><span class="line"><span class="meta">    @marshal_with(<span class="params">ret_field</span>)  </span><span class="comment"># 把 对应的方法 通过这个装饰器 和 格式化定义关联上。</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&#x27;status&#x27;</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="string">&#x27;msg&#x27;</span>:<span class="string">&#x27;ok&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;data&#x27;</span>:<span class="string">&#x27;chenyushao&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">ret_field2 = &#123;</span><br><span class="line">    <span class="string">&#x27;status&#x27;</span>:fields.Integer,</span><br><span class="line">    <span class="string">&#x27;msg&#x27;</span>:fields.String,</span><br><span class="line">    <span class="comment"># user 对象</span></span><br><span class="line">    <span class="string">&#x27;data&#x27;</span>:fields.Nested(ret_field) <span class="comment"># 调用 其他的 格式化要求。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User2Resource</span>(<span class="title class_ inherited__">Resource</span>):</span><br><span class="line"><span class="meta">    @marshal_with(<span class="params">ret_field2</span>)  </span><span class="comment"># 把 对应的方法 通过这个装饰器 和 格式化定义关联上。</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):</span><br><span class="line">        user = User.query.first() <span class="comment"># 从数据库表中读第一行。</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&#x27;status&#x27;</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="string">&#x27;msg&#x27;</span>:<span class="string">&#x27;ok&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;data&#x27;</span>:user</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------------------------  字段格式化 ------------------------------ </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ret_field3 = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>:fields.String,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>:fields.Integer,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret_field4 = &#123;</span><br><span class="line">    <span class="string">&#x27;status&#x27;</span>:fields.Integer,</span><br><span class="line">    <span class="string">&#x27;msg&#x27;</span>:fields.String,</span><br><span class="line">    <span class="comment"># user 对象</span></span><br><span class="line">    <span class="string">&#x27;data&#x27;</span>:fields.<span class="type">List</span>(fields.Nested(ret_field3)) <span class="comment"># 调用 其他的 格式化要求。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User3Resource</span>(<span class="title class_ inherited__">Resource</span>):</span><br><span class="line"><span class="meta">    @marshal_with(<span class="params">ret_field4</span>)  </span><span class="comment"># 把 对应的方法 通过这个装饰器 和 格式化定义关联上。</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):</span><br><span class="line">        user = User.query.first() <span class="comment"># 从数据库表中读第一行。</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&#x27;status&#x27;</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="string">&#x27;msg&#x27;</span>:<span class="string">&#x27;ok&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;data&#x27;</span>:user</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment"># ------------------------------  字段格式化 ------------------------------ </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------------------------  参数解析 -------------------------------- </span></span><br><span class="line"><span class="comment"># 解析前端发送过来的数据</span></span><br><span class="line">parser = reqparse.RequestParser() </span><br><span class="line"><span class="comment"># 给parser 作一个规范声明，name 是提交过来的参数名称，类型，是否必须，没提交的提示 help。</span></span><br><span class="line">parser.add_argument(<span class="string">&#x27;name&#x27;</span>,<span class="built_in">type</span>=<span class="built_in">str</span>,required=<span class="literal">True</span>,<span class="built_in">help</span>=<span class="string">&#x27;name是必须的参数。&#x27;</span>) </span><br><span class="line">parser.add_argument(<span class="string">&#x27;age&#x27;</span>,<span class="built_in">type</span>=<span class="built_in">int</span>,required=<span class="literal">True</span>,action=<span class="string">&#x27;append&#x27;</span>) <span class="comment"># append支持多个age的意思 </span></span><br><span class="line"><span class="comment"># 随便从百度的网页的network 中 fetch 里， 点一下页面，找一个请求头的Cookes 来示范。</span></span><br><span class="line">parser.add_argument(<span class="string">&#x27;BAIDUID&#x27;</span>,<span class="built_in">type</span>=<span class="built_in">str</span>,location=<span class="string">&#x27;cookies&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User4Resource</span>(<span class="title class_ inherited__">Resource</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 获取参数</span></span><br><span class="line">        args = parser.parse_args()</span><br><span class="line">        name = args.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">        age = args.get(<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line">        BAIDUID = args.get(<span class="string">&#x27;BAIDUID&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;name&#x27;</span>:name,<span class="string">&#x27;age&#x27;</span>:age,<span class="string">&#x27;BAIDUID&#x27;</span>:BAIDUID&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------------------------  参数解析 -------------------------------- </span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># spider.py 单独运行这个 脚本来模仿 爬虫的访问。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># res = requests.get(&#x27;http://127.0.0.1:5000/hello/&#x27;)</span></span><br><span class="line"><span class="comment"># print(res.json())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># res = requests.post(&#x27;http://127.0.0.1:5000/usres/&#x27;)</span></span><br><span class="line"><span class="comment"># print(res.text)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据返回的提示改的 请求需求。  </span></span><br><span class="line">res = requests.get(<span class="string">&#x27;http://127.0.0.1:5000/user4/&#x27;</span>,</span><br><span class="line">                    json=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="string">&#x27;30&#x27;</span>&#125;,</span><br><span class="line">                    headers=&#123;<span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;Cookie&#x27;</span>:<span class="string">&#x27;BAIDUID=DBF491F84E3AC8F568BC6F6E3D8DF37C&#x27;</span></span><br><span class="line">                    &#125;)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><h1 id="实验部分"><a href="#实验部分" class="headerlink" title="实验部分"></a>实验部分</h1><p><img src="/2025/05/20/%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/flask_study/%E6%88%AA%E5%B1%8F2024-09-19%2015.33.52.jpg" alt="截屏2024-09-19 15.33.52"></p><h2 id="项目分析"><a href="#项目分析" class="headerlink" title="项目分析"></a>项目分析</h2><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2>]]></content>
    
    
    <summary type="html">这是文章开头，显示在主页面，详情请点击此处。</summary>
    
    
    
    <category term="网络学习" scheme="http://example.com/categories/%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="网络" scheme="http://example.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="flask" scheme="http://example.com/tags/flask/"/>
    
    <category term="后端" scheme="http://example.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
</feed>
